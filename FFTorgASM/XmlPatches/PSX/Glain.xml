<?xml version="1.0" encoding="utf-8" ?> 
<Patches>
    <Patch name="Set Action Mods" hidden="true">
        <Location file="BATTLE_BIN" offset="1509D0" mode="ASM" offsetMode="RAM">
            #   ROUTINE: Apply addend/multiplier to actions (Standard and return/drain action)
            #   Parameters: a0 = Multiplier (16.16 fixed point)
            #       NOTE: This routine does not modify temporary (t) registers.

            @set_action_mods:

                addiu   sp, sp, -16
                sw      ra, 4(sp)
                sw      s0, 8(sp)

                move    s0, a0

                #   Standard action
                lui     a1, 0x8019
                lw      a1, 0x2d90(a1)
                jal     @set_action_mod
                nop

                #   Return action (drain)
                lui     a1, 0x8019
                lw      a1, 0x2d8c(a1)
                jal     @set_action_mod
                move    a0, s0

                lw      s0, 8(sp)
                lw      ra, 4(sp)
                addiu   sp, sp, 16

                jr      ra
                nop

            #   ROUTINE: Apply addend/multiplier to action
            #   Parameters: a0 = Multiplier (16.16 fixed point), a1 = Action
            #       NOTE: This routine does not modify temporary (t) registers.

            @set_action_mod:

                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
                    sw      s0, 8(sp)
                    sw      s1, 12(sp)

                    beq     a1, zero, set_action_mod_end
                    move    s0, a0
                    move    s1, a1

                    #   HP Damage
                    jal     @set_action_property_mod
                    li      a2, 4

                    #   HP Healing
                    move    a0, s0
                    move    a1, s1
                    jal     @set_action_property_mod
                    li      a2, 6

                    #   MP Damage
                    move    a0, s0
                    move    a1, s1
                    jal     @set_action_property_mod
                    li      a2, 8

                    #   MP Healing
                    move    a0, s0
                    move    a1, s1
                    jal     @set_action_property_mod
                    li      a2, 10

                set_action_mod_end:
                    lw      s1, 12(sp)
                    lw      s0, 8(sp)
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop

            #   ROUTINE: Apply addend/multiplier to action property (offset)
            #   Parameters: a0 = Multiplier (16.16 fixed point), a1 = Action, a2 = Offset
            #       NOTE: This routine does not modify temporary (t) registers.

            @set_action_property_mod:

                    addu    a3, a1, a2
                    lhu     v0, 0(a3)
                    nop

                    beq     v0, zero, set_action_property_mod_end
                    nop

                    multu   v0, a0

                    #   Multiplying integer (32.0) by (16.16) fixed point gives (48.16) result
                    #   HI: [16 | 16], LO: [16 | 16]; Significant 32 bit integer part is the two middle 16s

                    #   a1: [ HI RIGHT 16 | ZERO ]
                    mfhi    a1
                    sll     a1, a1, 16

                    #   a2: [ ZERO | LO LEFT 16 ]
                    mflo    v1
                    srl     a2, v1, 16

                    #   Check decimal part to determine whether to round up (add one to integer part).
                    sll     v1, v1, 16
                    srl     v1, v1, 31
                    addu    a2, a2, v1

                    #   v0: [ HI RIGHT 16 | LO LEFT 16 ]
                    or      v0, a1, a2

                    #   Cap value at 999
                    #sltiu   v1, v0, 1000
                    #bne     v1, zero, set_action_property_mod_end
                    #nop
                    #li      v0, 999

                set_action_property_mod_end:
                    jr      ra
                    sh      v0, 0(a3)


            #   ROUTINE: Set action types
            @set_action_types:

                    addiu   sp, sp, -8
                    sw      ra, 4(sp)

                    lui     a0, 0x8019
                    lw      a0, 0x2d90(a0)
                    jal     @set_action_type
                    nop

                    lui     a0, 0x8019
                    lw      a0, 0x2d8c(a0)
                    jal     @set_action_type
                    nop

                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    nop

            #   ROUTINE: Set action type (a0 = Action)
            @set_action_type:

                    lbu     t0, 0x25(a0)

                    lbu     t1, 4(a0)
                    lbu     t2, 6(a0)
                    lbu     t3, 8(a0)
                    lbu     t4, 10(a0)

                    sltu    t1, zero, t1
                    sltu    t2, zero, t2
                    sltu    t3, zero, t3
                    sltu    t4, zero, t4

                    sll     t1, t1, 7
                    sll     t2, t2, 6
                    sll     t3, t3, 5
                    sll     t4, t4, 4

                    andi    t0, t0, 0x0f

                    or      t0, t0, t1
                    or      t0, t0, t2
                    or      t0, t0, t3
                    or      t0, t0, t4

                    jr      ra
                    sb      t0, 0x25(a0)
        </Location>
    </Patch>
    <Patch name="Random unit gear based on story progression - override with 0x16b">
        <Description>
          Random unit gear based on story progression, but can be overridden with 0x16b for any unit.
          (0x16b is the last row, last column in the ENTD for a unit, in the Unknown box, two underneath
          the top value that has its own row.)
        </Description>
        <Location file="BATTLE_BIN" offset="F59BC" mode="ASM">
            @find_compare_value:
                    lbu     t6,0x016b(t5)             # Load 0x016b from unit
                    lui     t0,0x8005
                    bne     t6,zero,SKP               # If not zero, jump to SKP (don't use shop availability)
                    nop
                    lbu     t6,0x78d8(t0)             # Load shop availability from memory
                    nop
              SKP:  sltiu   t7,t6,1               
                    jr      ra
                    addu    t6,t6,t7                  # If value = 0, set value = 1
        </Location>
        <Location file="SCUS_942_21" offset="4D49C" mode="ASM">
            sw      ra,0x94(sp)
            move    t5,a0
            jal     @find_compare_value                # Jump to new routine
            li      v0,0x20
        </Location>
        <Location file="SCUS_942_21" offset="4D52C" mode="ASM">
            nop
        </Location>
        <Location file="SCUS_942_21" offset="4D5D8" mode="ASM">
            lbu     v1,0x0a(a1)
        </Location>
    </Patch>
    <Patch name="Random unit gear based on story progression">
        <Description>
            Random unit gear based on story progression
        </Description>
        <Location file="BATTLE_BIN" offset="F59BC" mode="ASM">
            @find_compare_value:
                lui     t6,0x8005
                lbu     t6,0x78d8(t6)         # Load shop availability from memory
                nop
                sltiu   t7,t6,1
                jr      ra
                addu    t6,t6,t7              # If value = 0, set value = 1
        </Location>
        <Location file="SCUS_942_21" offset="4D49C" mode="ASM">
                sw      ra,0x94(sp)
                move    t5,a0
                jal     @find_compare_value            # Jump to new routine
                li      v0,0x20
        </Location>
        <Location file="SCUS_942_21" offset="4D52C" mode="ASM">
                nop
        </Location>
        <Location file="SCUS_942_21" offset="4D5D8" mode="ASM">
                lbu     v1,0x0a(a1)
        </Location>
    </Patch>
    <Patch name="Random unit equipment more selective">
        <Description>
            Random unit equipment will now be more selective
            of secondary item types. (You shouldn't see 
            knights in Chapters 2 to 4 using linen robes)
        </Description>
        <Location file="SCUS_942_21" offset="4D53C" mode="ASM">
                  li      t7,0                  # ItemFound = false (initialize)
        </Location>
        <Location file="SCUS_942_21" offset="4D5F0" mode="ASM">
                  bne     v0,zero,SKP           # Skip list index increment if not a new item type
                  li      t7,1                  # ItemFound = true
                  addiu   t1,t1,1               # Increment list index
                  nop
            SKP:  move    t4,v1
                  move    v1,t1
        </Location>
        <Location file="SCUS_942_21" offset="4D628" mode="ASM">
                  addiu   s0,t1,1               # Length = list index + 1
                  beq     t7,zero,0x8005ce60    # If (no item found), skip
        </Location>
    </Patch>
    <Patch name="All formulas apply elemental (v2)">
        <Description>
            All formulas apply elemental.
            Affects HP Damage, MP Damage, HP Healing, and MP Healing.
        
            Ability element takes precedent over weapon element, and will be used unless
            the ability's "Weapon Strike" and flag under "Hit Allies" are both checked, in which
            case the Ability and Weapon elements will be combined.
        
            Optional: You can specify a multiplier to be applied to damage and/or a separate multiplier for healing.  
            The format for the multipliers is 16.16 fixed point (e.g. 1.25 = 00014000).
            A multiplier of zero (default) will be ignored.
        </Description>
        <Include patch="Set Action Mods" />
        <Location file="BATTLE_BIN" offset="F5D20" mode="ASM">
            .label  @get_source_unit_misc_data_pointer, 0x8007a218
    
            .label  @elemental_nullify, 0x80184e40
            .label  @apply_elemental, 0x80186ffc

            # ROUTINE: Formula tail routine
            @formula_tail:

                    addiu   sp, sp, -8
                    sw      ra, 4(sp)
        
                    jal     @apply_elemental        
                    nop
                    jal     @apply_damage_healing_multipliers
                    nop

                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    nop

            @elemental_inner:
                    addiu   sp, sp, -0x20
                    sw      ra, 0x10(sp)
                    sw      s0, 0x14(sp)
                    sw      s1, 0x18(sp)
        
                    lui     t0, 0x8019
                    lw      t1, 0x2d90(t0)                 
                    lw      s1, 0x2d98(t0)                      # Target
                    lhu     t4, 0x10(t1)
        
                elem_absorb:
                    lbu     t6, 0x6d(s1)                        # Target's elemental absorption flags
                    move    s0, a0                              # Element
                    and     t6, t6, s0
                    beq     t6, zero, elem_nullify          
                    ori     t7, t4, 0x0400
                    sh      t7, 0x10(t1)
                    jal     @elemental_absorb
                    nop
        
                elem_nullify:
                    lbu     t5, 0x6e(s1)                        # Target's elemental nullification flags
                    lbu     t7, 0x6f(s1)                        # Target's elemental halving flags
                    and     t6, t5, s0
                    beq     t6, zero, elem_half
                    nop
        
                    jal     @elemental_nullify_actions
                    nop
                    j       elem_end
                    nop
    
                elem_half:
                    and     t6, t7, s0
                    lbu     t7, 0x70(s1)                        # Target's elemental weakness flags
                    nop
                    beq     t6, zero, elem_weak
                    li      a0, 0x8000                          # Multiplier = 0.50 (..000.100..)
        
                    jal     @set_action_mods
                    nop
        
                elem_weak:
                    and     t6, t7, s0
                    beq     t6, zero, elem_end
                    lui     t0, 0x8019
        
                    lui     a0, 2                               # Multiplier = 2.00 (..010.000..)
                    jal     @set_action_mods
                    nop

                    lw      t1, 0x2d90(t0)
                    nop
                    lhu     t4, 0x10(t1)
                    nop
                    ori     t7, t4, 0x0800
                    sh      t7, 0x10(t1)
        
                elem_end: 
                    lw      s1, 0x18(sp)
                    lw      s0, 0x14(sp)
                    lw      ra, 0x10(sp)
                    addiu   sp, sp, 0x20
                    jr      ra
                    nop

        
            # ROUTINE: Pre-processing for "apply elemental" routine
            #   Determination of element, and elemental strengthen
            #   Specific to apply elemental routine - don't call from elsewhere
            @apply_elemental_pre_process:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
                    sw      v1, 8(sp)

                    jal     @elemental_determination
                    nop
                    move    s0, v0
        
                    jal     @elemental_strengthen
                    move    a0, v0
        
                    lw      v1, 8(sp)        
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    andi    v0, v1, 0x0080
       
       
            # ROUTINE: Determine element based on ability/weapon
            @elemental_determination:

                    addiu   sp, sp, -8
                    sw      ra, 4(sp)
        
                    jal     @get_source_unit_misc_data_pointer
                    nop
                    lbu     t7, 0x15d(v0)                       #   Skillset ID
        
                    lui     t0, 0x8019                          
                    lbu     t1, 0x38f4(t0)                      #   Load flags
                    lbu     t2, 0x38f3(t0)
                    sll     t1, t1, 8
                    or      t1, t1, t2
                    lbu     v0, 0x38f7(t0)                      #   Ability element
                    lbu     t4, 0x3904(t0)                      #   Weapon element
                    lhu     t5, 0x38d6(t0)                      #   Ability ID
                    li      t2, 0x2004        
        
                    and     t3, t1, t2                          #   Check if "Weapon Strike" and flag under "Hit Allies" checked
                    xor     t3, t3, t2                          #   Zero if both flags checked, non-zero otherwise
                    sltiu   t3, t3, 1                           #   1 if both flags checked, 0 otherwise
                    sltiu   t6, t5, 1                           #   Check if Ability ID = 0 (Attack)
                    or      t6, t6, t3                          #   1 if both flags checked or ability is Attack, 0 otherwise
                    li      t2, 0x14                            #   ID for Throw skillset
                    xor     t2, t7, t2                          #   Zero if Skillset ID = 0x14 (Throw), non-zero otherwise
                    sltiu   t2, t2, 1                           #   1 if Skillset ID = 0x14 (Throw), 0 otherwise
                    or      t6, t6, t2                          #   1 if both flags checked or ability is Attack or skillset is Throw, 0 otherwise
        
                    # subu    t6, zero, t6
                    sll     t6, t6, 31
                    sra     t6, t6, 31                          #   Bitmask: All ones if both flags checked or ability is Attack, 0 otherwise
                    and     t6, t6, t4                          #   (Elements to add) = Bitmask applied to (Weapon element)
        
                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra                                  #   Return element
                    or      v0, v0, t6                          #   Add (Elements to add) to Element flags                          


            # ROUTINE: Apply elemental strengthen (a0 = Element)
            @elemental_strengthen:
                    addiu   sp, sp, -8
                    sw      ra, 4(sp)

                    lui     t0, 0x8019
                    lw      t3, 0x2d94(t0)                      
                    lw      t1, 0x2d90(t0)
                    lbu     t3, 0x0071(t3)
                    lhu     t2, 4(t1)  
                    and     t3, t3, a0
                    beq     t3, zero, elem_strengthen_end           # Skip if element not strengthened
                    lui     a0, 1
        
                    ori     a0, a0, 0x4000                          # Multiplier = 1.25 (..001.010..)
                    jal     @set_action_mods
                    nop
        
                elem_strengthen_end:    
                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    nop

        
            @elemental_nullify_actions:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)

                    jal     @elemental_nullify              # Nullify current action
                    nop

                    lui     t0, 0x8019
                    lw      t1, 0x2d90(t0)
                    lw      t2, 0x2d8c(t0)
                    sw      t1, 8(sp)                       # Save action to stack
                    sw      t2, 0x2d90(t0)                  # Save drain action as current action

                    jal     @elemental_nullify              # Nullify current action (drain action)
                    nop

                    lw      t1, 8(sp)                       # Load action from stack
                    lui     t0, 0x8019
                    sw      t1, 0x2d90(t0)                  # Save current action back

                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop 

        
            @clear_elements:
                    lui     t0, 0x8019
                    sb      zero, 0x3904(t0)                 # Zero out weapon element
                    jr      ra
                    sb      zero, 0x38f7(t0)                 # Zero out ability element


            # ROUTINE: Elemental absorb
            @elemental_absorb:

                    addiu   sp, sp, -8
                    sw      ra, 4(sp)
        
                    lui     t0, 0x8019
                    lw      t1, 0x2d90(t0)                  #   Action
                    lw      t2, 0x2d8c(t0)                  #   Return Action
        
                    lhu     t3, 4(t1)                       #   HP Damage
                    lhu     t4, 6(t1)                       #   HP Healing
                    lhu     t5, 8(t1)                       #   MP Damage
                    lhu     t6, 10(t1)                      #   MP Healing
        
                    addu    t7, t3, t4                      #   HP Damage + HP Healing
                    sh      t7, 6(t1)                       #   Save as HP Healing
                    addu    t7, t5, t6                      #   MP Damage + MP Healing
                    sh      t7, 10(t1)                      #   Save as MP Healing
                    sh      zero, 4(t1)                     #   Save zero as HP Damage
                    sh      zero, 8(t1)                     #   Save zero as MP Damage
        
                    sltu    a0, zero, t3
                    subu    a0, zero, a0                    #   HP Damage bitmask
                    sltu    a1, zero, t5
                    subu    a1, zero, a1                    #   MP Damage bitmask
        
                    lhu     t3, 4(t2)                       #   Returned HP Damage
                    lhu     t4, 6(t2)                       #   Returned HP Healing
                    lhu     t5, 8(t2)                       #   Returned MP Damage
                    lhu     t6, 10(t2)                      #   Returned MP Healing
        
                    and     t8, t4, a0                      #   Added HP Healing = Returned HP Damage, if HP Damage > 0; 0 otherwise
                    and     t9, t6, a1                      #   Added MP Healing = Returned MP Damage, if MP Damage > 0; 0 otherwise
        
                    addu    t7, t3, t8                      #   Returned HP Damage + Added HP Healing
                    sh      t7, 4(t2)                       #   Save as Returned HP Damage
                    addu    t7, t5, t9                      #   Returned MP Damage + Added MP Healing
                    sh      t7, 8(t2)                       #   Save as Returned MP Damage
        
                    not     a0, a0
                    not     a1, a1                          #   Reverse bitmasks
                    and     t8, t4, a0                      #   Returned HP Healing = 0 if HP Damage > 0
                    sh      t8, 6(t2)                       #   Save as Returned HP Healing
                    and     t9, t6, a0                      #   Returned MP Healing = 0 if MP Damage > 0
                    sh      t9, 10(t2)                      #   Save as Returned MP Healing
        
                    jal     @set_action_types
                    nop
        
                    lw      ra, 4(sp)                       #   Return
                    addiu   sp, sp, 8
                    jr      ra
                    nop

            # ROUTINE: Set damage/healing multipliers
            @apply_damage_healing_multipliers:
        
                    addiu   sp, sp, -8
                    sw      ra, 4(sp)

                    lui     t0, 0x8019
                    lw      a0, 0x2d90(t0)
                    nop
                    lhu     t1, 4(a0)
                    lhu     t2, 6(a0)
                    lhu     t3, 8(a0)
                    lhu     t4, 10(a0)
        
                    addu    t5, t1, t3
                    addu    t6, t2, t4
        
                adhm_damage:
                    beq     t5, zero, adhm_healing
                    #nop
        
                    la      a0, %DamageMultiplier
                    #la      a0, @address_damage_multiplier
                    #lw      a0, 0(a0)
                    #nop
        
                    beq     a0, zero, adhm_healing
                    nop
        
                    jal     @set_action_mods
                    nop
        
                adhm_healing:
                    beq     t6, zero, adhm_end
                    #nop
        
                    la      a0, %HealingMultiplier
                    #la      a0, @address_healing_multiplier
                    #lw      a0, 0(a0)
                    #nop
        
                    beq     a0, zero, adhm_end
                    nop
        
                    jal     @set_action_mods
                    nop
        
                adhm_end:    
                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="11DE98" mode="ASM">
            jr      ra                      # Return immediately from original routine
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="11FFF8" mode="ASM">
            jr      ra                      # Return immediately from original routine
        
            lui     v1, 0x8019              # Shift routine down one space
            addiu   sp, sp, -0x18

            lw      v1, 0x2d98(v1)
            sw      ra, 0x14(sp)
            lbu     v1, 0x5a(v1)
            sw      s0, 0x10(sp)
      
            jal     @apply_elemental_pre_process
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="1249F0" mode="ASM">
            j       @formula_tail      
        </Location>
        <Location file="BATTLE_BIN" offset="1200C8" mode="ASM">
            jal     @elemental_nullify_actions
        </Location>
        <Location file="BATTLE_BIN" offset="1200E0" mode="ASM">
            jal     @elemental_inner      # Call inner elemental routine at new location
        </Location>
        <Location file="BATTLE_BIN" offset="120124" mode="ASM">
            j       0x80187140            # Jump over normal absorption block
        </Location>
        <Location file="BATTLE_BIN" offset="11EFA4" mode="ASM">
            jr      ra                    # Blank out routine (Weapon element strengthen)
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="11EFFC" mode="ASM">
            jr      ra                    # Blank out routine (Ability element strengthen)
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="C2C0" mode="ASM">
            j       @clear_elements       # Action post: call routine to clear elements
        </Location>
        <Location file="BATTLE_BIN" offset="12002C" mode="ASM">
            # Override oil double damage section
            li    a0, 0x20000
            jal   @set_action_mods
            nop
            lui   v1, 0x8019
            lw    v1, 0x2d90(v1)
            nop
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="120060" mode="ASM">
            nop                           # Oil - don't overwrite action type
            lbu     t0,0x25(a0)           # Load Action type
            nop
            ori     t0,t0,0x08            # Add status change
            sb      t0,0x25(a0)           # Save as action type
        </Location>
        <Variable name="Damage Multiplier" bytes="4" default="00000000" symbol="true" />
        <Variable name="Healing Multiplier" bytes="4" default="00000000" symbol="true" /> 
    </Patch>
    <Patch name="Swordskill element strengthen and Dark/Night Sword elemental (v2)">
        <Description>
            Swordskill element fix - like previous fixes, but with Dark/Night sword elemental, using (WP+Y) and can status proc like Holy Sword can; 
            Also, elements should strengthen even if they're not on the weapon.
        </Description>
        <Location file="BATTLE_BIN" offset="F5A50" mode="ASM">
            @swordskill_load_MA_factors:
                  lui     a1, 0x8019
                  lw      a0, 0x2d94(a1)
                  lbu     v0, 0x3902(a1)        # WP
                  lbu     v1, 0x38fa(a1)        # Ability Y
                  lbu     a0, 0x0037(a0)        # MA
                  addu    v0, v0, v1            # (WP + Y)
                  sh      v0, 0x38d0(a1)        # YA = (WP + Y)
                  sh      a0, 0x38ce(a1)        # XA = MA
                  jr      ra
                  nop
        </Location>
        <Location file="BATTLE_BIN" offset="F5BD0" mode="ASM">
            @swordskill:
                    addiu   sp, sp, -0x18
                    sw      ra, 0x10(sp)
                    sw      s0, 0x0c(sp)
                    sw      s1, 0x08(sp)

                    move    s0, a0
                    jal     0x80188510                          # Physical Evade
                    nop
                    bne     v0, zero, swordskill_end            # Branch to end if evaded
                    nop

                    #lbu     s1, 0x8015cbcf                      # Load "Use MA?" option
                    li      s1, %UseMA
                    nop

                    bne     s1, zero, swordskill_load_MA
                    nop
      
                swordskill_load_PA:      
                    jal     0x80185e5c                          # Load PA and (WP+Y)
                    nop
                    j       swordskill_past_load_XA
                    nop
      
                swordskill_load_MA:
                    jal     @swordskill_load_MA_factors         # Load MA and (WP+Y)
                    nop

                swordskill_past_load_XA:
                    lui     t0, 0x8019
                    lhu     t1, 0x38ce(t0)                      # XA
                    lbu     t2, 0x38f9(t0)                      # Ability X
                    lbu     a0, 0x38f7(t0)                      # Ability Element
                    lbu     a1, 0x3904(t0)                      # Weapon Element
                    lbu     a2, 0x38f4(t0)                      # Ability Flags 2
                    srav    t1, t1, t2               
                    sh      t1, 0x38ce(t0)                      # XA = XA / 2^X   
                    andi    a2, a2, 0x0020                      # Check Blank flag under Hit Allies
                    beq     a2, zero, swordskill_strengthen     # Skip to strengthen section if not flagged
                    nop

                    or      a0, a0, a1                          # Combine weapon and ability element
      
                swordskill_strengthen:  
                    sb      a0, 0x3904(t0)                      # Save as weapon element
                    sb      a0, 0x38f7(t0)                      # Save as ability element

                    jal     0x80185fa4                          # Element Strengthen Calculation
                    nop
        
                    bne    s1, zero, swordskill_load_MA_damage
                    nop

                swordskill_load_PA_damage:
                    jal     0x801886a4                          # Physical Damage Calculation
                    nop
                    jal     0x80186ff8                          # Elemental Damage Modification
                    nop
                    j       swordskill_past_XA_damage
                    nop

                swordskill_load_MA_damage:
                    jal     0x80188744                          # Magic XA Modification
                    nop
                    jal     0x8018877c                          # Magic Damage Calculation
                    nop
      
                swordskill_past_XA_damage:
                    lui     v0, 0x8019
                    lw      v0, 0x2d90(v0)                      # Action
                    nop
                    lbu     v0, 0(v0)                           # Action Hit Status
                    nop
                    beq     v0, zero, swordskill_drain          # If Missed, skip to Drain section
                    nop

                    jal     0x801870fc                          # Elemental Absorption
                    nop
      
                swordskill_drain:  
                    beq     s0, zero, swordskill_status_proc    # Skip to status proc section if argument was 0 
                    nop
      
                    li      t0, 2
                    beq     s0, t0, swordskill_MP_drain         # Skip to MP Drain section if argument was 2
                    nop
      
                swordskill_HP_drain:  
                    jal     0x80187248                          # HP Drain
                    nop
                    li      t0, 0x81
                    bne     v0, t0, swordskill_end              # Skip to end if undead
                    nop
      
                    j       swordskill_status_proc              # Skip to status proc section
                    nop
      
                swordskill_MP_drain:  
                    jal     0x8018746c                          # MP Drain
                    nop
      
                swordskill_status_proc:  
                    jal     0x80187eb4                          # Status Proc
                    nop
      
                swordskill_end:  
                    lw      ra, 0x10(sp)
                    lw      s0, 0x0c(sp)
                    lw      s1, 0x08(sp)
                    addiu   sp, sp, 0x18
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="12026C" mode="ASM"> 
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="1202E0" mode="ASM"> 
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="12048C" mode="ASM"> 
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="122B20" mode="ASM">
            j       @swordskill           # Call new routine with a0=0
            li      a0, 0
        </Location>
        <Location file="BATTLE_BIN" offset="122C90" mode="ASM">
            j       @swordskill           # Call new routine with a0=1
            li      a0, 1
        </Location>
        <Location file="BATTLE_BIN" offset="122C50" mode="ASM">
            j       @swordskill           # Call new routine with a0=2
            li      a0, 2
        </Location>
        <Location file="BATTLE_BIN" offset="120338" mode="ASM">
            li      v0, 0x81              # Drain routine: Return 0x81 as success
        </Location>
        <Variable name="Use MA" file="BATTLE_BIN" offset="F5BCF" bytes="1" default="00" preset="boolean" />
    </Patch>
    <Patch name="Apply defense (Item HP/MP bonuses and type multipliers)">
        <Description>
            Reduces damage based on defense.
            Defense for Shield, Head, and Armor slots is determined by taking their HP Bonus and MP Bonus and using a multiplier to convert to damage reduction (Shields use Block Rate).
            Total defense is multiplicative per slot.  
            The multipliers are in the form X / 128.  To change these values, edit the values in the first Location tag.
            The values are in (Physical, Magical) pairs and go in order of item type: Shield, Helmet, Hat, HairAdornment, Armor, Clothing, Robe.
            To only write out the routine without calling it, set Apply variable to False.
        </Description>
        <Include patch="Set Action Mods" />
        <Location file="BATTLE_BIN" offset="159120" mode="DATA" offsetMode="RAM" label="addr_defense_type_multipliers">
            2D 2D 1A 13 13 1A 0D 1A 26 0D 1A 1A 0D 26
        </Location>
        <Location file="BATTLE_BIN" offset="159130" mode="ASM" offsetMode="RAM">
            @defense:
                    lui     t0, 0x8019
                    lhu     t2, 0x38d6(t0)                  #   Ability ID
                    lw      t1, 0x2d98(t0)                  #   Target unit
                    lw      t5, 0x2d90(t0)                  #   Action
          
                    sll     t4, t2, 3                       #   Ability ID * 8
                    lui     t2, 0x8006                      #   Base address for item data (%hi)
                    addu    t4, t2, t4
                    lbu     t4, %lo(0xebf6) (t4)            #   Ability AI Behavior Flags 3
                    li      t3, 0xff                        #   Code for empty slot
                    #addiu   t1, t1, 0x1a                    #   Unit equipment offset
        
                    lhu     t5, 4(t5)                       #   Action HP Damage
                    andi    t8, t4, 0x01                    #   Use physical defense (1 = true, 0 = false)
                    sltu    t5, zero, t5
                    or      t8, t8, t5
        
                    andi    t9, t4, 0x02                    #   Use magical defense (2 = true, 0 = false)              
        
                    sll     t8, t8, 31
                    sra     t8, t8, 31                      #   Use physical defense (0xffffffff = true, 0 = false)
                    sll     t9, t9, 30
                    sra     t9, t9, 31                      #   Use magical defense (0xffffffff = true, 0 = false)
                  
                    li      v0, 128                         #   Damage Multiplier (Numerator) = 128 (to be divided by 128 later)
                    li      v1, 0                           #   Loop counter = 0
      
                defense_loop_start:  
                    lbu     t4, 0x1a(t1)                    #   ItemID for current equipment slot
                    addiu   t1, t1, 1                       #   Increment slot
                    beq     t4, t3, defense_loop_bottom     #   If ItemID == 0xff (empty slot), skip this item and continue loop
                    sll     t7, t4, 1                       #   ItemID * 2
                    beq     t4, zero, defense_loop_bottom   #   If ItemID == 0 (nothing), skip this item and continue loop
                    addu    t5, t7, t4                      #   ItemID * 3
                    sll     t5, t5, 2                       #   ItemID * 12
                    addu    t5, t2, t5                  
        
                    lbu     t6, 0x2ebd(t5)                  #   Item type (0x05)
                    addu    t4, t2, t7
                    addiu   t7, t6, -0x13
                    sltiu   t5, t7, 7
                    beq     t5, zero, defense_loop_bottom
                    sll     t7, t7, 1
        
                    #   Secondary data at 0x80063db8 + (ItemID * 2)
                    lui     t5, %hi(@addr_defense_type_multipliers)
                    addu    t5, t5, t7
                    lhu     t5, %lo(@addr_defense_type_multipliers) (t5)
                    lbu     t6, 0x3db8(t4)                  #   HP Bonus
                    lbu     t7, 0x3db9(t4)                  #   MP Bonus
                    andi    t4, t5, 0xff                    #   HP Multiplier
                    srl     t5, t5, 8                       #   MP Multiplier
        
                    and     t6, t6, t8                      #   Effective physical defense (0 if unused)
                    and     t7, t7, t9                      #   Effective magical defense (0 if unused)
        
                    beq     t6, zero, defense_magical_multiplier
                    li      a0, 128
                    #subu    t6, a0, t6
                    multu   t6, t4
                    mflo    t6
                    addiu   t6, t6, 64
                    srl     t6, t6, 7
                    subu    t6, a0, t6
                    multu   v0, t6
                    mflo    v0
                    addiu   v0, v0, 64
                    srl     v0, v0, 7
        
                defense_magical_multiplier:
                    beq     t7, zero, defense_loop_bottom
                    nop
                    #subu    t7, a0, t7
                    multu   t7, t5
                    mflo    t7
                    addiu   t7, t7, 64
                    srl     t7, t7, 7
                    subu    t7, a0, t7
                    multu   v0, t7
                    mflo    v0
                    addiu   v0, v0, 64
                    srl     v0, v0, 7
      
                defense_loop_bottom:  
                    sltiu   t6, v1, 7
                    bne     t6, zero, defense_loop_start    #   Loop while counter is less than 7
                    addiu   v1, v1, 1                       #   Increment loop counter
      
                    #   Convert (X / 128) to 16.16 fixed point
                    srl     t0, v0, 7
                    andi    t1, v0, 0x7f
                    sll     t0, t0, 16
                    sll     t1, t1, 9
        
                    j       @set_action_mods
                    or      a0, t0, t1
        </Location>
        <Location file="BATTLE_BIN" offset="1249F0" mode="ASM">
                .if     %Apply
                    j       @defense
                .endIf
        </Location>
        <Variable name="Apply" bytes="1" default="01" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Apply defense: Item (Unknown 1) = Physical damage reduction (%); (Unknown 2) = Magical damage reduction (%)">
        <Description>
              In the item data, this patch interprets Unknown 1 as Physical damage reduction (percentage) and Unknown 2 as Magical damage reduction (percentage).
              The damage reduction percentage for each piece of equipment is added to determine the total damage reduction.
              An ability's classification as physical or magical is determined by the 'Physical Attack' and 'Magical Attack' AI flags for the ability.
              If an ability is flagged with both (this shouldn't happen, really), both damage reduction percentages (physical AND magical) will be applied 
              (the sum of the two)!
        </Description>
        <Location file="BATTLE_BIN" offset="F2130" mode="ASM">
            @defense:
                lui     t0,0x8019
                lw      t1,0x2d98(t0)         # Target unit
                lhu     t2,0x38d6(t0)         # Ability ID
                li      t3,0xff               # Code for empty slot
      
                sll     t2,t2,3               # Ability ID * 8
                lbu     t4,0x8005ebf6(t2)     # Ability AI Behavior Flags 3
                addiu   t1,t1,0x1a            # Unit equipment offset
                andi    t8,t4,0x01            # Use physical defense (1 = true, 0 = false)
                andi    t9,t4,0x02            # Use magical defense (2 = true, 0 = false)              

                sll     t8,t8,31
                sra     t8,t8,31              # Use physical defense (0xffffffff = true, 0 = false)
                sll     t9,t9,30
                sra     t9,t9,31              # Use magical defense (0xffffffff = true, 0 = false)
      
                lui     t2,0x8006             # Base address for item data
                li      v0,0                  # Result = 0
                li      v1,0                  # Loop counter = 0
      
            LST:  
                lbu     t4,0(t1)              # Item ID for current equipment slot
                addiu   t1,t1,1               # Increment slot
                addiu   v1,v1,1               # Increment loop counter
                beq     t4,t3,LCH             # If slot is empty, skip this item and continue loop
                sll     t5,t4,1               # Item ID * 2
                beq     t4,zero,LCH           # If slot = 0 (nothing), skip this item and continue loop
                addu    t5,t5,t4              # Item ID * 3
                sll     t5,t5,2               # Item ID * 12
                addu    t5,t2,t5              
                lbu     t6,0x2ebe(t5)         # Physical defense (0x06)
                lbu     t7,0x2ec3(t5)         # Magical defense (0x0b)
                and     t6,t6,t8              # Effective physical defense (0 if unused)
                and     t7,t7,t9              # Effective magical defense (0 if unused)
                addu    t5,t6,t7              # Defense value
                addu    v0,v0,t5              # Add to defense tally
      
            LCH:  
                sltiu   t6,v1,7
                bne     t6,zero,LST           # Loop while counter is less than 7
                nop
      
                lw      t1,0x2d90(t0)
                lw      t2,0x2d8c(t0)
                lhu     t3,4(t1)              # Load old HP damage
                lhu     t4,6(t2)              # Load old returned HP healing (drain)
      
                li      t7,100
                subu    t5,t7,v0
                slt     t6,zero,t5
                sll     t6,t6,31
                sra     t6,t6,31
                and     t5,t5,t6              # 100 - Defense% (Minimum 0)
      
                multu   t3,t5
                mflo    t3                    # Old HP Damage * (100 - Defense%)
                addiu   t3,t3,50              # Round the next division result
                li      t8,0x51eb851f         
                multu   t3,t8
                mfhi    t3                    
                sra     t3,t3,5               # Old HP Damage * (100 - Defense%) / 100
                sh      t3,4(t1)              # Save new HP damage
        
                multu   t4,t5
                mflo    t4                    # Old Returned HP Healing * (100 - Defense%)
                addiu   t4,t4,50              # Round the next division result
                nop
                multu   t4,t8                
                mfhi    t4
                sra     t4,t4,5               # Old Returned HP Healing * (100 - Defense%) / 100
      
                jr      ra                    # Return defense tally (v0)
                sh      t4,6(t2)              # Save new returned HP healing
        </Location>
        <Location file="BATTLE_BIN" offset="F6230" mode="ASM">
            @defense_outer:
                .label  @formula_tail, 0x8015CD20
            
                addiu   sp, sp, -8
                sw      ra, 4(sp)

                jal     @defense                    # Call new defense routine
                nop

                lhu     t0, @formula_tail           # Check for "All formulas apply elemental (v2)" patch
                li      t1, 0xfff8

                bne     t0, t1, def_tail_end
                nop

                jal     @formula_tail               # If using "All formulas apply elemental (v2)" patch, call appropriate routine
                nop

                def_tail_end:
                lw      ra, 4(sp)
                addiu   sp, sp, 8
                jr      ra
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="1249F0" mode="ASM">
                j       @defense_outer
        </Location>
    </Patch>
    <Patch name="Crystals can include special job abilities (Base job matching check removed)">
        <Description>
            Crystals can contain abilities from special jobs regardless of the inheriting unit's base job. However, the inheriting unit's base job would have to include the ability AT THE SAME INDEX in order to learn it. (e.g. Ramza could learn Night Sword from Gafgarion's crystal if it was Gafgarion's 10th ability  and Ramza's 02 Squire class also contained Night Sword as the 10th ability.)
        </Description>
        <Location file="BATTLE_BIN" offset="F5B50" mode="ASM">
            @crystal_mod:
                bne     s5, zero, CON         #   If we're not considering the base job, skip this code
                nop
 
                lw      v1, 0x38(sp)          #   Base job of crystal unit
                move    t4, v0                #   Save v0 (t4 is free in this procedure, and not overwritten by the below segment).
 
                sll     v0, v1, 1
                addu    v0, v0, v1
                lui     v1, 0x8006
                lw      v1, 0x6194(v1)        #   Start of job data
                sll     v0, v0, 0x04
                addu    v0, v0, v1            #   Job data for crystal unit
                lbu     t1, 0(v0)
                move    a1, s1                #   Argument 2: Ability index
                jal     0x8005a568            #   Get ability ID
                move    a0, t1                #   Argument 1: Skillset ID of crystal unit 
                move    t2, v0
      
                move    v0, t4                #   Get old value of v0 from "saved" register
                bne     t2, s4, SKP           #   IF (InheritingUnitAbility[index] != CrystalUnitAbility[index])
                nop                           #       Branch to SKP
      
            CON:  
                j       0x801807f8            #   Save this ability to the crystal
                nop
      
            SKP:  
                j       0x80180848            #   Skip this ability
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="1196E8" mode="ASM">
            bne     t3,t3,0x80180880      #   Wiped out base job check, so won't skip consideration
        </Location>
        <Location file="BATTLE_BIN" offset="1197F4" mode="ASM">
            j       @crystal_mod          #   Jump to new code (replaces nop)
        </Location>
    </Patch>
    <Patch name="Hide excessive HP/MP recovery">
        <Description>
            Excessive HP/MP recovery is not displayed.
        </Description>
        <Location file="BATTLE_BIN" offset="F2260" mode="ASM">
            @hide_excessive_recovery:
                    addiu   sp, sp, -32
                    sw      s0, 4(sp)
                    sw      s1, 8(sp)
                    sw      s2, 12(sp)
                    sw      s3, 16(sp)
                    sw      ra, 20(sp)

                    lui     t0, 0x8019
                    lbu     t1, 0x38e8(t0)  # Active ability?
                    lw      s0, 0x2d90(t0)  # Action
                    lw      s1, 0x2d8c(t0)  # Return action
                    lw      s2, 0x2d98(t0)  # Action target
                    lw      s3, 0x2d94(t0)  # Return action target

                    # Skip if not a passive ability?
                    bne     t1, zero, hide_excessive_recovery_end
                    move    a0, s0

                    # Hide excessive recovery for action
                    jal     @hide_excessive_recovery_single
                    move    a1, s2

                    # Hide excessive recovery for return action
                    move    a0, s1
                    jal     @hide_excessive_recovery_single
                    move    a1, s3

            hide_excessive_recovery_end:
                    lw      ra, 20(sp)
                    lw      s3, 16(sp)
                    lw      s2, 12(sp)
                    lw      s1, 8(sp)
                    lw      s0, 4(sp)
                    jr      ra
                    addiu   sp, sp, 32


            # a0 = Action, a1 = Target
            @hide_excessive_recovery_single:

                    beq     a0, zero, hide_excessive_recovery_single_end
                    nop

                    lhu     t0, 0x28(a1)    # Target HP
                    lhu     t1, 0x2a(a1)    # Target Max HP
                    lhu     t2, 0x2c(a1)    # Target MP
                    lhu     t3, 0x2e(a1)    # Target Max MP
                    lbu     t4, 0x25(a0)    # Action display type

                    slt     t5, t0, t1      # 1 if HP not max
                    sltiu   t5, t5, 1       # 1 if HP IS max (boolean not)
                    sll     t5, t5, 6       # 0x40 if HP is max
                    not     t5, t5          # 0x40 flag is zeroed out if HP is max (binary not)

                    slt     t6, t2, t3      # 1 if MP not max
                    sltiu   t6, t6, 1       # 1 if MP IS max (boolean not)
                    sll     t6, t6, 4       # 0x10 if MP is max
                    not     t6, t6          # 0x10 flag is zeroed out if MP is max (binary not)

                    and     t4, t4, t5      # Action type: HP recovery flag zeroed out if HP is max
                    and     t4, t4, t6      # Action type: MP recovery flag zeroed out if MP is max
              
                    sb      t4, 0x25(a0)    # Save action display type
              
            hide_excessive_recovery_single_end:
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="18BFD0" mode="ASM" offsetMode="RAM">
                    lui     s1, 0x8019
                    jal     @hide_excessive_recovery
                    nop
                    lw      a1, 0x2d98(s1)
                    lw      a0, 0x2d90(s1)
        </Location>
    </Patch>
    <Patch name="Signed Ability Y Values">
        <Description>
            Ability Y value is now signed and can accept integers between 
            -128 and +127, inclusive. To specify a negative value for Y, 
            take the number and add 256 (e.g. -3 would be input as 253).
        </Description>
        <Location file="BATTLE_BIN" offset="11ECA0" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11ECE0" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11ED20" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11ED60" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11EE10" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11EE70" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11F638" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11F6A0" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11F820" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11F8F4" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11F930" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11FC64" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11FC80" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11FC9C" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11FCB8" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11FD04" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11FD30" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="11FD74" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="11FEA8" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="121C40" mode="ASM">
            lb      v1,0x38fa(v1)
        </Location>
        <Location file="BATTLE_BIN" offset="1236C4" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
        <Location file="BATTLE_BIN" offset="123724" mode="ASM">
            lb      v0,0x38fa(v0)
        </Location>
    </Patch>
    <Patch name="Target's Faith in Spell damage calculations becomes XX%">
        <Location file="BATTLE_BIN" offset="1201F8" mode="ASM">
            li     v0, 0x46
            nop
        </Location>
        <Variable name="XX" file="BATTLE_BIN" offset="1201F8" default="46" />
    </Patch>
    <Patch name="[Half of MP] becomes [No MP Cost]">
        <Description>[Half of MP] becomes [No MP Cost]</Description>
        <Location file="BATTLE_BIN" offset="17DB6C" mode="ASM" offsetMode="RAM">
            li      a0, 0
        </Location>
        <Location file="BATTLE_BIN" offset="181A44" mode="ASM" offsetMode="RAM">
            li      s1, 0
        </Location>
        <Location file="BATTLE_BIN" offset="195CA4" mode="ASM" offsetMode="RAM">
            li      v0, 0
        </Location>
    </Patch>
    <Patch name="Require Materia Blade -> Require Item Type X (Default Lance)">
        <Description>
            Require Materia Blade -> Require Item Type X (Default Lance)
        </Description>
        <Location file="SCUS_942_21" offset="4CE24" mode="ASM">
            li      t0,0x0f               # Default: Lance
            move    v1,a1
            sll     t1,v1,1
            addu    t1,t1,v1
            sll     t1,t1,2
            lbu     v0,0x80062ebd(t1)     # Find item type
            lbu     t3,0x0184(s1)         # Load equip flags
            subu    t1,v0,t0              # Check if item type = specified type
            sltiu   t1,t1,1
            sll     t1,t1,2                   
            or      t3,t3,t1              # If so, set 0x04 bit ("Materia Blade" equipped) of equip flags
            j       0x8005c668
            sb      t3,0x0184(s1)         # Save equip flags to memory
        </Location>
        <Variable name="Item Type" file="SCUS_942_21" offset="4CE24" default="0F">
            <Preset name="Fists" value="00" />
            <Preset name="Daggers" value="01" />
            <Preset name="Ninjato" value="02" />
            <Preset name="Sword" value="03" />
            <Preset name="Knight Sword" value="04" />
            <Preset name="Katana" value="05" />
            <Preset name="Axe" value="06" />
            <Preset name="Rod" value="07" />
            <Preset name="Staff" value="08" />
            <Preset name="Flail" value="09" />
            <Preset name="Gun" value="0A" />
            <Preset name="Crossbow" value="0B" />
            <Preset name="Bow" value="0C" />
            <Preset name="Instrument" value="0D" />
            <Preset name="Book" value="0E" />
            <Preset name="Lance" value="0F" />
            <Preset name="Stick/Pole" value="10" />
            <Preset name="Bag" value="11" />
            <Preset name="Carpet/Veil" value="12" />
            <Preset name="Custom" modify="true" />
        </Variable>
    </Patch>
    <Patch name="Fix Status Text Graphic Width">
        <Description>
            This patch fixes issues with status text having the wrong lengths.
            The pixel width of the "Reraise" graphic is set to the wrong value normally (26, when it should be 28).
            The pixel width of the "Reflect" graphic is set to the wrong value normally (29, when it should be 28) (Fix provided by TheKillerNacho).
        </Description>
        <Location file="BATTLE_BIN" offset="14CF92" offsetMode="RAM">
            1C
        </Location>
        <Location file="BATTLE_BIN" offset="14CFD2" offsetMode="RAM">
            1C
        </Location>
    </Patch>
    <Patch name="Event skip (Start button)">
        <Description>
            Start button skips events, effects, battle and event text, map titles, unit movement, chapter title and end graphics, the gameover screen, and the ending credits.
            Keep "Using Event Instruction Upgrade" variable set to True if using with event instruction upgrade.
        </Description>
        <Location file="BATTLE_BIN" offset="15BB85" mode="DATA" offsetMode="RAM" label="address_calc_skip_type">
            00
        </Location>
        <Location mode="DATA" label="address_is_dialog_text_unskippable">
            00
        </Location>
        <Location mode="DATA" label="address_are_effects_unskippable">
            00
        </Location>
        <Location mode="DATA" label="address_is_event">
            00
        </Location>
        <Location mode="DATA" label="address_is_skipping_effect_targets">
            00
        </Location>
        <Location mode="DATA" label="address_is_skipping_effect">
            00
        </Location>
        <Location mode="DATA" label="address_run_next_wait">
            00
        </Location>
        <Location mode="DATA" label="address_pathing_direction_map">
            03010002
        </Location>
        <Location mode="DATA" label="address_event_last_camera_instruction_pointer">
            00000000
        </Location>
        <Location mode="DATA" label="address_event_last_focus_instruction_pointer">
            00000000
        </Location>
        <Location mode="DATA" label="address_event_choice_message_id">
            0000
        </Location>
        <Location mode="DATA" label="address_event_choice_message_id_display_message">
            0000
        </Location>
        <Location mode="DATA" label="address_event_skip_type">
            00
        </Location>
        <Location mode="DATA" label="address_event_old_skip_type">
            00
        </Location>
        <Location mode="DATA" label="address_is_mid_battle">
            00
        </Location>
        <Location mode="DATA" label="address_is_mid_battle_event">
            00
        </Location>
        <Location mode="DATA" label="address_can_skip_instruction_array">
            .if     %UsingEventInstructionUpgrade
                00002286
                DE008FE1
                C180A00E
                611C3C56
                6F33D680
                00000000
                00000000
                00004000
            .else
                FFFF2F86
                DE018FE1
                C180A00E
                611C3C56
                6F37D6BF
                00000000
                00000000
                00004000
            .endif
        </Location>
        <Location mode="DATA" label="address_can_total_skip_instruction_array">
            .if     %UsingEventInstructionUpgrade
                0000FFFF
                FFFFFFFD
                CFFFBFFF
                FFDFFFD7
                FF6BFFFF
                00000000
                00000000
                00004000
            .else
                FFFFFFFF
                FFFFFFFD
                CFFFBFFF
                FFDFFFD7
                FF6FFFFF
                00000000
                00000000
                00004000
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="15BC00" mode="ASM" offsetMode="RAM" inputFile="skip_events.asm" />
        <Location file="BATTLE_BIN" offset="1316D0" mode="ASM" offsetMode="RAM">
            #   Add Start button to list of buttons that advances text
            andi    v0, v0, 0x0960
        </Location>
        <Location file="BATTLE_BIN" offset="1316D8" mode="ASM" offsetMode="RAM">
            #   Save button input to stack
            sw      v0, 0x0c(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="131B68" mode="ASM" offsetMode="RAM">
            jal     @advance_dialog_text_hook
        </Location>
        <Location file="BATTLE_BIN" offset="1465A4" mode="ASM" offsetMode="RAM">
            jal     @camera_hook
        </Location>
        <Location file="BATTLE_BIN" offset="13DBFC" mode="ASM" offsetMode="RAM">
            sb      zero, 8(sp)             #   Last event instruction ID = 0 (initial)
            lbu     v0, 0(s4)
            li      v1, 0x1e
            bne     v0, a0, 0x8013dc18
            nop
            addiu   s6, s6, 1
            sw      s4, 12(sp)              #   Store last camera instruction pointer at sp + 12
            beq     v0, v1, 0x8013dc38
        </Location>
        <Location file="BATTLE_BIN" offset="13DC24" mode="ASM" offsetMode="RAM">
            lbu     t0, -0x2e90(at)
            sb      v0, 8(sp)               #   Store last event instruction ID to sp + 8
            addiu   t0, t0, 1
            j       0x8013dc00
            addu    s4, s4, t0
        </Location>
        <Location file="BATTLE_BIN" offset="13DF44" mode="ASM" offsetMode="RAM">
            jal     @camera_fusion_hook
        </Location>
        <Location file="BATTLE_BIN" offset="6D96C" mode="ASM" offsetMode="RAM">
            jal     @process_single_unit_movement_hook
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="146DF8" mode="ASM" offsetMode="RAM">
            jal     @sprite_move_hook
            sw      v0, 0x44(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="14C880" mode="ASM" offsetMode="RAM">
            jal     @wait_hook
        </Location>
        <Location file="BATTLE_BIN" offset="1309F8" mode="ASM" offsetMode="RAM">
            jal     @determine_dialog_text_hook
        </Location>
        <Location file="BATTLE_BIN" offset="1314E4" mode="ASM" offsetMode="RAM">
            jal     @skip_dialog_text_hook
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C9DDC" mode="ASM" offsetMode="RAM">
            jal     @show_map_title_hook
            li      t0, 0x9da4
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C9E28" mode="ASM" offsetMode="RAM">
            jal     @show_map_title_hook
            li      t0, 0x9df0
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C9E8C" mode="ASM" offsetMode="RAM">
            jal     @show_map_title_hook
            li      t0, 0x9e40
        </Location>
        <Location file="BATTLE_BIN" offset="1A1B30" mode="ASM" offsetMode="RAM">
            jal     @effect_hook
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="1B4820" mode="ASM" offsetMode="RAM">
            jal     @effect_second_hook
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="77650" mode="ASM" offsetMode="RAM">
            j       @effect_targets_hook
        </Location>
        <Location file="BATTLE_BIN" offset="1A189C" mode="ASM" offsetMode="RAM">
            j       @play_effect_tail
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1BF224" mode="ASM" offsetMode="RAM">
            addu    t0, v0, v1
            jal     @show_graphic_chapter_end_hook
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1BF26C" mode="ASM" offsetMode="RAM">
            addu    t0, v0, v1
            jal     @show_graphic_chapter_end_hook
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1BF2B4" mode="ASM" offsetMode="RAM">
            addu    t0, v0, v1
            jal     @show_graphic_chapter_end_hook
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1BF2F8" mode="ASM" offsetMode="RAM">
            addu    t0, v0, v1
            jal     @show_graphic_chapter_end_hook
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1BF334" mode="ASM" offsetMode="RAM">
            addu    t0, v0, v1
            jal     @show_graphic_chapter_end_hook
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1C04B8" mode="ASM" offsetMode="RAM">
            lh      t0, 0x1e(s3)
            jal     @show_graphic_gameover_hook
            addu    s0, s0, v1
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1C0524" mode="ASM" offsetMode="RAM">
            li      t0, 0x258
            jal     @show_graphic_gameover_hook
            addu    s0, s0, v0
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1C0598" mode="ASM" offsetMode="RAM">
            li      t0, 0x80
            jal     @show_graphic_gameover_hook
            addu    s0, s0, v0
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1C0240" mode="ASM" offsetMode="RAM">
            lh      t0, 0x1c(s5)
            jal     @show_graphic_chapter_start_hook
            addu    s1, s1, v1
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1C02D4" mode="ASM" offsetMode="RAM">
            li      t0, 0x50
            jal     @show_graphic_chapter_start_hook
            addu    s1, s1, v0
        </Location>
        <Location file="EVENT_ETC_OUT" offset="1C0370" mode="ASM" offsetMode="RAM">
            li      t0, 0x80
            jal     @show_graphic_chapter_start_hook
            addu    s1, s1, v0
        </Location>
        <Location file="BATTLE_BIN" offset="78620" mode="ASM" offsetMode="RAM">
            jal     @check_event_button_input
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="143C24" mode="ASM" offsetMode="RAM">
            jal     @event_start_hook
            nop 
        </Location>
        <Location file="BATTLE_BIN" offset="143D34" mode="ASM" offsetMode="RAM">
            .if     %UsingEventInstructionUpgrade
                jal     @check_event_skip
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="143D3C" mode="ASM" offsetMode="RAM">
            .if     %UsingEventInstructionUpgrade
            .else
                jal     @check_event_skip
                move    s3, v0
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="145008" mode="ASM" offsetMode="RAM">
            j       @sprite_move_event_instruction_hook
        </Location>
        <Location file="BATTLE_BIN" offset="1452F0" mode="ASM" offsetMode="RAM">
            j       0x80145304      #   Jump over deadlock-causing specific thread wait (thread ID 2)
        </Location>
        <Location file="BATTLE_BIN" offset="14A43C" mode="ASM" offsetMode="RAM">
            jal     @wait_value_hook
        </Location>
        <Location file="BATTLE_BIN" offset="79198" mode="ASM" offsetMode="RAM">
            jal     @reveal_hook
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C4AAC" mode="ASM" offsetMode="RAM">
            j       @post_battle_tail
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C61DC" mode="ASM" offsetMode="RAM">
            lui     t0, 0x801d
            addiu   a0, t0, -0x4ce4
            addiu   a1, t0, -0x4c9c
            addiu   a2, t0, -0x4c7c
            lui     t0, %hi(@address_event_skip_type)
            lbu     t0, %lo(@address_event_skip_type) (t0)
            jal     0x80133f78
            sb      t0, 4(sp)
            li      v0, 1
            lui     at, 0x801d
            sw      v0, 0x0088(at)
            sw      v0, 0x009c(at)
            sw      v0, 0x00b0(at)
            lui     t0, %hi(@address_event_skip_type)
            sb      zero, %lo(@address_event_skip_type) (t0)
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6874" mode="ASM" offsetMode="RAM">
            lui     t0, %hi(@address_event_skip_type)
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6884" mode="ASM" offsetMode="RAM"> 
            lbu     t1, 4(sp)
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C68BC" mode="ASM" offsetMode="RAM"> 
            sb      t1, %lo(@address_event_skip_type) (t0)
        </Location>
        <Location file="OPEN_OPEN_BIN" offset="672DC" mode="ASM" offsetMode="RAM">
            j       0x8006824c
        </Location>
        <Location file="OPEN_OPEN_BIN" offset="68220" mode="ASM" offsetMode="RAM">
            #   Rewrite routine to save space
            lui     t0, 0x8004
            lbu     v0, 0x73a1(t0)
            lbu     v1, 0x73a2(t0)
            lui     at, 0x8008
            sw      zero, 0x642c(at)
            sw      zero, 0x6428(at)
            sw      zero, 0x6424(at)
            sw      zero, 0x6420(at)
            sw      v0, 0x6418(at)
            jr      ra
            sw      v1, 0x641c(at)
        </Location>
        <Location file="OPEN_OPEN_BIN" offset="6824C" mode="ASM" offsetMode="RAM">
            #   Branch out of loop if Start was pressed
            lui     t0, 0x8008
            lw      t0, 0x51bc(t0)
            nop
            andi    t0, t0, 0x0800
            bne     t0, zero, 0x800672ec
            nop
            j       0x800672e4
        </Location>
        <Location file="OPEN_OPEN_BIN" offset="68268" mode="ASM" offsetMode="RAM">
            lui     at, 0x8008
            lw      v0, 0x55a4(at)
        </Location>
        <Variable name="Using Event Instruction Upgrade" bytes="1" default="01" symbol="true" preset="boolean" />
        <Variable name="Unskippable Event Instruction ID" bytes="1" default="F3" symbol="true" />
    </Patch>
    <Patch name="Speed shortens Ability CT">
        <Description>
            (New CT) = ((CT * (CT Factor))) + (Speed - 1)) / Speed    (For Speed >= (CT Factor))
            ((CT Multiplier) = (CT Factor) / Speed)
            Default (CT Factor) = 5
        </Description>
        <Location file="BATTLE_BIN" offset="15D290" mode="ASM" offsetMode="RAM">
            #   HOOK: Attack Preparation (Ability CT)
            #   Parameters:
            #       v0 = Ability data pointer
            #       s2 = Ability CT
            #       s3 = Unit (in-battle) data pointer
            #   Returns:
            #       v0 = Ability data flags 3 ( *(v0 + 5), byte )
            #       s2 = New CT value
            @attack_preparation_ability_ct_hook:
                    addiu   sp, sp, -16
                    sw      s0, 4(sp)
                    sw      ra, 8(sp)
                
                    lbu     s0, 5(v0)
                
                    lbu     a1, 0x38(s3)        #   Load unit's Speed
                    jal     @find_ability_ct
                    move    a0, s2
                
                    move    s2, v0
                    move    v0, s0              #   (Requirement for calling routine)
            
                    lw      ra, 8(sp)
                    lw      s0, 4(sp)
                    jr      ra
                    addiu   sp, sp, 16
        
            #   HOOK: Load skillset ability data (Ability CT)
            #   Parameters:
            #       a0 = Current ability data block 2 pointer (Pointer into array starting at 0x8005fbf0)
            #       *(sp + 12) = Unit (in-battle) data pointer
            #   Returns:
            #       v0 = New CT value
            #       v1 = Current ability Flags 3 value (= *(a0 + 5), byte)
            @load_skillset_ability_data_ct_hook:
                    lw      t2, 12(sp)          #   Unit (in-battle) data pointer
                
                    lbu     t0, 12(a0)          
                    lbu     v1, 5(a0)           #   (Required for calling routine)
                
                    lbu     a1, 0x38(t2)        #   Load unit's Speed
                    j       @find_ability_ct    #   (This routine preserves $v1)
                    andi    a0, t0, 0x7f        #   Ability CT
       
            #   HOOK: AI Ability Data Setting (Ability CT for Charge abilities)
            #   Parameters:
            #       at = Base address for Charge CT (offset 0x1044)
            #       s2 = Unit (in-battle) data pointer
            #   Returns:
            #       v0 = New CT value
            @ai_ability_data_setting_charge_ct_hook:
                        
                    lbu     a0, 0x1044(at)      #   Load Charge CT
                    lbu     a1, 0x38(s2)        #   Load unit's Speed
                    j       @find_ability_ct    #   (This routine preserves $v1)
                    nop
       
            #   HOOK: AI Ability Data Setting (Ability CT - Default)
            #   Parameters:
            #       v1 = Current ability data block 2 pointer (Pointer into array starting at 0x8005fbf0)
            #       s2 = Unit (in-battle) data pointer
            #   Returns:
            #       v0 = New CT value
            #       v1 = Current ability data block 2 pointer
            #       s6 = Current ability Inflict Status value (= *(v1 + 11) (byte))
            @ai_ability_data_setting_default_ct_hook:
                        
                    lbu     s6, 11(v1)          #   (Required for calling routine)
        
                    lbu     a0, 12(v1)          #   Load Ability CT
                    lbu     a1, 0x38(s2)        #   Load unit's Speed
                    j       @find_ability_ct    #   (This routine preserves $v1)
                    nop
                
            #   ROUTINE: Find ability CT
            #   Parameters:
            #       a0 = Ability CT
            #       a1 = Speed
            #   Returns:
            #       v0 = New CT value
            @find_ability_ct:
                    #lbu     t1, 0x8015d28f
                    li      t1, %CTFactor
                    move    v0, a0              #   Default: Keep CT the same
        
                    sltu    t0, a1, t1          #   If (Speed is less than (CT Factor)), return with no change
                    bne     t0, zero, find_ability_ct_end
                    nop

                    # ((CT Multiplier) = (CT Factor) / Speed)
                    # CT = ((CT * (CT Factor)) + (Speed - 1)) / Speed
                
                    multu   a0, t1
                    mflo    t0                  #   (CT * (CT Factor))
                
                    addiu   t1, a1, -1          #   (Speed - 1)
                    addu    t0, t0, t1          #   (CT * (CT Factor)) + (Speed - 1)
                    divu    t0, a1
                    mflo    v0                  #   ((CT * (CT Factor)) + (Speed - 1)) / Speed
            
                find_ability_ct_end:
                    jr      ra
                    nop
                                   
        </Location>
        <Location file="BATTLE_BIN" offset="17C84C" mode="ASM" offsetMode="RAM">
            jal     @attack_preparation_ability_ct_hook
        </Location>
        <Location file="BATTLE_BIN" offset="181838" mode="ASM" offsetMode="RAM">
            sw      s0, 12(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="181A48" mode="ASM" offsetMode="RAM">
            jal     @load_skillset_ability_data_ct_hook
        </Location>
        <Location file="BATTLE_BIN" offset="195BAC" mode="ASM" offsetMode="RAM">
            jal     @ai_ability_data_setting_charge_ct_hook
            addu    at, at, v0
        </Location>
        <Location file="BATTLE_BIN" offset="195C64" mode="ASM" offsetMode="RAM">
            jal     @ai_ability_data_setting_default_ct_hook
            nop
        </Location>
        <Variable name="CT Factor" file="BATTLE_BIN" offset="F628F" bytes="1" default="05" />
    </Patch>
    <Patch name="Geomancy single ability">
        <Description>
            Creates a single ability for Geomancy that changes its properties based on the tile the caster or target is standing on.
            Should be used inside a Default skillset.  Ability ID can be specified; default is 0x7E (Pitfall).
            To use the target tile's properties instead of the attacker's, use a different ability with the same formula.
        </Description>
        <!-- Ability properties corresponding to vanilla elemental ability order (Pitfall to Lava Ball) -->
        <!-- Each entry has format [Inflict Status ID, Element, Effect ID] -->
        <Location file="BATTLE_BIN" offset="15D350" mode="DATA" offsetMode="RAM" label="address_geomancy_properties_array">
            41 01 79
            42 04 7A
            43 08 7B
            44 08 7C
            45 08 7D
            46 10 7E
            47 80 7F
            48 04 80
            49 10 81
            4A 20 82
            4B 10 83
            4C 80 84
        </Location>
        <Location file="BATTLE_BIN" offset="15D374" mode="ASM" offsetMode="RAM">
            .label  @address_geomancy_tile_array, 0x8005e9d0
            .label  @address_inflict_status_data, 0x80063fc4
            .label  @address_tile_array, 0x8018f8cc
            .label  @address_ability_id, 0x801938d6
            .label  @address_ability_element, 0x801938f7
            .label  @address_ability_inflict_status_id, 0x801938fb
            .label  @address_ability_inflict_status_data, 0x80193906
            .label  @address_ability_effect_array, 0x801b63f0

            .eqv    %common_address_high_halfword, 0x8019

            #   a0 = Pointer to unit whose tile data is to be loaded
            @geomancy_replace:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
                    
                    #   Use target tile if ability ID is not geomancy ability ID
                    lbu     t0, @address_ability_id
                    li      t1, %GeomancyAbilityID
                    beq     t0, t1, geomancy_replace_use_source_tile
                    nop
                    
                    lw      a0, 0(a0)
                    jal     0x8007a218
                    nop
                    jal     0x80068418
                    move    a0, v0
                    lui     t0, 0x8009
                    lbu     a0, 0x61b4(t0)           #   Selected X Coordinate
                    lbu     a1, 0x61bc(t0)           #   Selected Y Coordinate
                    lbu     a2, 0x61b8(t0)           #   Selected [Higher Elevation] flag
                    jal     0x80183fb4
                    nop
                    lbu     t0, 0(v0)
                    j       geomancy_replace_get_properties
                    lui     t6, %common_address_high_halfword
                
                geomancy_replace_use_source_tile:
                    #   Get unit tile ID    
                    lw      a0, 0(a0)
                    jal     0x801810a0
                    nop
                    lui     t6, %common_address_high_halfword
                    sll     v0, v0, 3
                    addu    at, t6, v0
                    lbu     t0, %lo(@address_tile_array) (at)
                        
                geomancy_replace_get_properties:
                    la      t3, @address_geomancy_properties_array
                    andi    t0, t0, 0x3f
        
                    lbu     t0, @address_geomancy_tile_array (t0)       #   LookupID
                    lbu     t1, %lo(@address_ability_id) (t6)
                
                    addiu   t4, t0, -126                                #   EntryID = LookupID - 126
                    sll     t2, t4, 1                                   #   EntryID * 2
                    addu    t2, t2, t4                                  #   EntryID * 3
                
                    addu    t2, t3, t2                                  #   Address for geomancy property
                
                    lbu     t3, 0(t2)                                   #   Inflict Status ID
                    lbu     t4, 1(t2)                                   #   Element
                    lbu     t5, 2(t2)                                   #   Effect ID
                
                    sb      t3, 0x38fb(t6)
                    sb      t3, 0x3905(t6)
                
                    sb      t4, %lo(@address_ability_element) (t6)      #   Store new Element
                    sll     t1, t1, 1
                    sh      t5, @address_ability_effect_array (t1)      #   Store new Effect ID
                
                    #   Copy inflict status data
                    sll     t2, t3, 1
                    addu    t2, t2, t3
                    sll     t2, t2, 1
                    la      a0, @address_inflict_status_data
                    addu    a0, t2, a0
                    addiu   a1, t6, %lo(@address_ability_inflict_status_data)
                    jal     0x8005e254                                  #   Copy bytes
                    li      a2, 6
                
                    lw      ra, 4(sp)
                    j       0x80185d40                                  #   Store MA and PA + Y / 2
                    addiu   sp, sp, 16
        </Location>
        <Location file="BATTLE_BIN" offset="1896C8" mode="ASM" offsetMode="RAM">
            lui     a0, 0x8019
            jal     @geomancy_replace
            ori     a0, a0, 0x2d94
        </Location>
        <Location file="BATTLE_BIN" offset="17A9D8" mode="ASM" offsetMode="RAM">
            li      s4, %GeomancyAbilityID
        </Location>
        <Location file="BATTLE_BIN" offset="17E348,18227C" mode="ASM" offsetMode="RAM">
            li      a2, %GeomancyAbilityID
        </Location>
        <Location file="BATTLE_BIN" offset="17F308,19B7A4" mode="ASM" offsetMode="RAM">
            li      v0, %GeomancyAbilityID
        </Location>
        <Variable name="Geomancy Ability ID" file="BATTLE_BIN" offset="17E348" offsetMode="RAM" bytes="2" default="007E" />
    </Patch>
    <Patch name="JP scroll glitch actual fix (Disable paging on confirm menu)">
        <Description>
            Disables paging when a confirm menu is up so there is no way to do the JP scroll glitch.
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="148100" mode="ASM" offsetMode="RAM">
            @menu_page_hook:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
        
                    lbu     t0, 0x801c8550
                    nop
                    bne     t0, zero, menu_page_hook_end
                    nop
        
                    jal     0x80129b7c
                    nop
            
                menu_page_hook_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="128DBC" mode="ASM" offsetMode="RAM">
            jal     @menu_page_hook
        </Location>
    </Patch>
    <Patch name="Rewrite Init Party Battle Data Routine" hidden="true">
        <Description>
            Frees RAM 0x8005b1bc - 0x8005b2b0.
        </Description>
        <Location file="SCUS_942_21" offset="5B0D0" mode="ASM" offsetMode="RAM">
                addiu   sp, sp, -32
                sw      s0, 16(sp)
                sw      s1, 20(sp)
                sw      ra, 24(sp)

                move    s1, a0
                move    s0, a1
        
                lbu     t0, 0(s0)
                lbu     t1, 1(s0)
        
                sltiu   t2, t0, 4
                beq     t2, zero, store_entd_flags
                li      t2, 0x08
                li      t2, 0x0b
        
            store_entd_flags:
                sb      t2, 5(s1)
                sb      t2, 0x1ba(s1)
        
                lbu     t2, 2(s0)
                sb      t0, 0(s1)
                sb      t1, 2(s1)
                sb      t2, 3(s1)
                lbu     t2, 3(s0)
                sltiu   t1, t1, 20
                beq     t1, zero, store_palette
                addiu   a0, s0, 7
                li      t2, 0
        
            store_palette:
                sb      t2, 4(s1)
        
                lbu     t0, 4(s0)
                addiu   a1, s1, 0x13
                sb      t0, 6(s1)
        
                lbu     t0, 5(s0)
                lbu     t1, 6(s0)
                sb      t0, 8(s1)
                sb      t1, 9(s1)
        
                jal     0x8005e254
                li      a2, 16
        
                addiu   a0, s0, 0x19
                addiu   a1, s1, 0x72
                jal     0x8005e254
                li      a2, 15
        
                lbu     t0, 0x17(s0)
                lbu     t1, 0x18(s0)
                sb      t0, 0x24(s1)
                sb      t0, 0x23(s1)
                sb      t1, 0x26(s1)
                sb      t1, 0x25(s1)
                
                addiu   a0, s0, 0x28
                addiu   a1, s1, 0x96
                jal     0x8005e254
                li      a2, 0xa6
     
                lbu     t0, 0xce(s0)
                lbu     t1, 0xcf(s0)
                sb      t0, 0x16c(s1)
                sb      t1, 0x16d(s1)
        
                addiu   a0, s1, 0x165
                jal     0x8005e644
                li      a1, 7
        
                lw      ra, 24(sp)
                lw      s1, 20(sp)
                lw      s0, 16(sp)
                jr      ra
                addiu   sp, sp, 32
        </Location>
    </Patch>
    <Patch name="Rewrite ENTD Data Calculation Routine" hidden="false">
        <Description>
            Frees RAM (0x5af50 to 0x5b034), and provides some new options.
            Ignores Load Formation if unit is not in the party.
            Unknown Month is treated as Serpentarius for non-Ramza units.
            
            Change Party Level Random:
                In FFTPatcher ENTD tab by default, Party Level - Random finds highest party level and rolls between Level - (Level / 8) and Level.
                This option changes it to roll between Level - (Level / 16) and Level + (Level / 16).
            
            Change Party Level Addend:
                Party Level + 51 and beyond is Party Level - (Value - 50).  Party Level + 51 is Party Level - 1, etc.
            
            Brave and Faith Minimum and Range: Use rand(0..Range) + Minimum
        </Description>
        <Location file="SCUS_942_21" offset="5AC1C" mode="ASM" offsetMode="RAM">      
                    addiu   sp, sp, -0x30
                    sw      ra, 0x28(sp)
                    sw      s5, 0x24(sp)
                    sw      s4, 0x20(sp)
                    sw      s3, 0x1c(sp)
                    sw      s2, 0x18(sp)
                    sw      s1, 0x14(sp)
                    sw      s0, 0x10(sp)
        
                    move    s2, a1
                    move    s3, a0
        
                    lbu     t0, 0x17(s2)
                    lbu     t1, 0x18(s2)
                    sb      t0, 4(s3)
                    sb      t1, 5(s3)
                    sb      t1, 0x1ba(s3)
                        
                    #   Ignore Load Formation if unit not in party
                    lbu     a0, 0(s2)
                    jal     0x80059f94
                    li      s1, -1
                    lbu     s0, 1(s2)
                    bne     v0, s1, check_load_formation
                    li      t0, 0xf7
                    and     s0, s0, t0
                    sb      s0, 1(s2)
        
                check_load_formation:
                    andi    t0, s0, 0x08
                    beq     t0, zero, check_ramza_init
                    li      s1, 0
        
                    move    a0, s3
                    jal     0x8005b038
                    move    a1, s2
                    j       past_ramza_init
                    move    s4, v0
        
                check_ramza_init:
                    lbu     t0, 0(s2)
                    lbu     t1, 4(s2)
                    sltiu   t0, t0, 4
                    lui     s5, 0x8006
                    beq     t0, zero, past_ramza_init
                    ori     s5, s5, 0x10e8
                    bne     t1, zero, past_ramza_init
                    nop
        
                check_ramza_init_loop:
                    jal     0x80059af0
                    move    a0, s1
                    move    a0, v0
                    lbu     t1, 1(a0)       #   Party index
                    li      t0, 0xff
                    lbu     t2, 0(a0)       #   Base class
                    lbu     t3, 2(a0)       #   Job
                    lbu     t4, 0(s2)       #   ENTD base class
                    lbu     t5, 7(a0)       #   Secondary skillset
                    beq     t1, t0, check_ramza_init_loop_bottom
                    sltiu   t2, t2, 4
                    beq     t2, zero, check_ramza_init_loop_bottom
                    sltiu   t3, t3, 3
                    sb      t4, 0(a0)
                    beq     t3, zero, check_ramza_init_loop_past_job_store
                    nop
        
                    sb      t4, 2(a0)
        
                check_ramza_init_loop_past_job_store:
                    lbu     t0, 0x00(s5)
                    lbu     t1, 0x30(s5)
                    lbu     t2, 0x60(s5)
                    beq     t0, t5, check_ramza_init_store_secondary_skillset
                    nop
                    beq     t1, t5, check_ramza_init_store_secondary_skillset
                    nop
                    bne     t2, t5, check_ramza_init_routine
                    nop
        
                check_ramza_init_store_secondary_skillset:
                    sll     t0, t4, 1
                    addu    t0, t0, t4
                    sll     t0, t0, 4
                    addu    t0, s5, t0
                    lbu     t0, -0x30(t0)
                    nop
                    sb      t0, 7(a0)
        
                check_ramza_init_routine:
                    move    a0, s3
                    jal     0x8005b038
                    move    a1, s2
                    move    s4, v0
                    li      s0, 0x08
    
                check_ramza_init_loop_bottom:
                    addiu   s1, s1, 1
                    sltiu   t0, s1, 20
                    bne     t0, zero, check_ramza_init_loop
                    nop
        
                past_ramza_init:
                    li      a0, 0
                    lw      t3, 0x80066238
        
                ai_data_loop:
                    addu    t1, s3, a0
                    addu    t2, t3, a0
                    lbu     t2, 0x21(t2)
                    addiu   a0, a0, 1
                    sb      t2, 0x0165(t1)
                    sltiu   t2, a0, 7
                    bne     t2, zero, ai_data_loop
                    andi    t0, s0, 0x08
                    bne     t0, zero, end
                    move    v0, s4
        
                    sb      s0, 6(s3)
                    lbu     t0, 0(s2)
                    li      t1, 0xff
                    sb      t1, 2(s3)
                    sb      t0, 0(s3)
        
                    lbu     s0, 3(s2)
                    lbu     t2, 0x80066308
                    beq     s0, zero, party_level_random
                    li      t1, 0xfe
                    bne     s0, t1, level_addend_check
                    sltu    t4, t2, s0
        
                party_level_random:
                    srl     t1, t2, 3
        
                    .if     %ChangePartyLevelRandom
                        srl     t3, t2, 4
                    .else
                        move    t3, t1
                    .endif
        
                    subu    s1, t2, t3
                    jal     0x8002230c
                    addiu   s0, t1, 1
                    multu   s0, v0
                    mflo    t0
                    addiu   t0, t0, 0x7fff
                    sra     t0, t0, 15
                    j       min_level_check
                    addu    s0, s1, t0
        
                level_addend_check:
                    sltiu   t0, s0, 100
                    
                    .if     %DisableHighFixedLevel
                        and     t5, t4, t0
                        bne     t5, zero, party_level_random
                        nop
                    .endif
                    
                    .if     %DisableFixedLevel
                        bne     t0, zero, party_level_random
                    .else
                        bne     t0, zero, min_level_check
                    .endif
                    
                    addiu   t0, s0, -100
     
                    .if     %ChangePartyLevelAddend
                        li      t1, 51
                        sltu    t1, t0, t1
                        bne     t1, zero, min_level_check
                        addu    s0, t2, t0
        
                        addiu   t1, t0, -50
                        sltu    t3, t2, t1
                        bne     t3, zero, min_level_check
                        li      s0, 1
                        subu    s0, t2, t1
                    .else
                        addu    s0, t2, t0
                    .endif
    
                min_level_check:
                    bne     s0, zero, max_level_check
                    sltiu   t0, s0, 100
                    li      s0, 1
    
                max_level_check:
                    bne     t0, zero, store_level
                    nop
                    li      s0, 99
        
                store_level:
                    sb      s0, 0x22(s3)
        
                    lbu     s1, 4(s2)           #   Birth month
                    lbu     s0, 5(s2)           #   Birth day
        
                    beq     s1, zero, birthday_random
                    sltiu   t1, s1, 13
                    beq     t1, zero, birthday_random
                    nop
                    beq     s0, zero, birthday_random
                    sltiu   t1, s0, 32
                    bne     t1, zero, birthday_specific
                    sll     t1, s1, 1

                birthday_random:
                    jal     0x8002230c
                    nop
                    
                    li      t1, 365
                    multu   v0, t1
                    mflo    t0                   #   result * 365
                    
                    #sll     t0, v0, 3           #   result * 8
                    #addu    t0, t0, v0          #   result * 9
                    #sll     t0, t0, 3           #   result * 72
                    #addu    t0, t0, v0          #   result * 73
                    #sll     t1, t0, 2           #   result * 292
                    #addu    t0, t1, t0          #   result * 365
                    
                    sra     t0, t0, 15
                    j       birthday_zodiac
                    addiu   s0, t0, 1
        
                birthday_specific:
                    lhu     t0, 0x800661ce(t1)
                    nop
                    addu    s0, t0, s0
        
                birthday_zodiac:
                    #lbu     t1, 10(s2)          #   ENTD Job ID
                    #li      t2, 0x97
                    #lbu     t1, 4(s2)           #   Month = Unknown -> Serpentarius
                    #li      t2, 0
                    #beq     t1, t2, birthday_store
                    #li      v0, 12
        
                    lbu     t0, 0(s2)           #   ENTD base class
                    nop
                    sltiu   t0, t0, 4
                    or      t0, t0, s1          #   If not Ramza and birth month = Unknown, use Serpentarius
                    beq     t0, zero, birthday_store
                    li      v0, 12
    
                calc_zodiac:
                    jal     0x8005e5d8
                    move    a0, s0
        
                birthday_store:
                    sll     t0, v0, 12
                    andi    t1, s0, 0x01ff
                    or      t0, t0, t1
                    sh      t0, 8(s3)
        
                    #   Brave
                    lbu     s0, 6(s2)
                    lbu     s1, 7(s2)
                    sltiu   t0, s0, 101
                    bne     t0, zero, brave_store
                    nop
        
                    #jal     0x8002230c
                    #nop
                    #sll     t0, v0, 4           #   result * 16
                    #subu    t0, t0, v0          #   result * 15
                    #sll     t0, t0, 1           #   result * 30
                    #sra     t0, t0, 15
                    #addiu   s0, t0, 45          #   Brave = 45 + rand(0..29)
        
                    jal     0x8002230c
                    li      s5, %BraveRange
                    multu   v0, s5
                    mflo    t0
                    sra     t0, t0, 15
                    addiu   s0, t0, %BraveMinimum
        
                brave_store:
                    sb      s0, 0x24(s3)
                    sb      s0, 0x23(s3)
        
                    #   Faith
                    sltiu   t0, s1, 101
                    bne     t0, zero, faith_store
                    nop
        
                    #jal     0x8002230c
                    #nop
                    #sll     t0, v0, 4           #   result * 16
                    #subu    t0, t0, v0          #   result * 15
                    #sll     t0, t0, 1           #   result * 30
                    #sra     t0, t0, 15
                    #addiu   s1, t0, 45          #   Faith = 45 + rand(0..29)
        
                    jal     0x8002230c
                    li      s5, %FaithRange
                    multu   v0, s5
                    mflo    t0
                    sra     t0, t0, 15
                    addiu   s1, t0, %FaithMinimum
        
                faith_store:
                    sb      s1, 0x26(s3)
                    sb      s1, 0x25(s3)
        
                    lbu     t0, 2(s2)
                    sb      zero, 0x21(s3)      #   Experience = 0
                    sh      t0, 0x16c(s3)       #   Name ID
        
                    li      v0, 0
        
                end:
                    j       0x80016d3c
                    nop
        
                    #lw      ra, 0x28(sp)
                    #lw      s5, 0x24(sp)
                    #lw      s4, 0x20(sp)
                    #lw      s3, 0x1c(sp)
                    #lw      s2, 0x18(sp)
                    #lw      s1, 0x14(sp)
                    #lw      s0, 0x10(sp)
                    #addiu   sp, sp, 0x30
                    #jr      ra
                    #nop
        </Location>
        <Variable name="Change Party Level Random" bytes="1" default="00" symbol="true" preset="boolean" />
        <Variable name="Change Party Level Addend" bytes="1" default="00" symbol="true" preset="boolean" />
        <Variable name="Disable Fixed Level" bytes="1" default="00" symbol="true" preset="boolean" />
        <Variable name="Disable High Fixed Level" bytes="1" default="00" symbol="true" preset="boolean" />
        <Variable name="Brave Range" bytes="1" default="1E" symbol="true" />
        <Variable name="Brave Minimum" bytes="1" default="2D" symbol="true" />
        <Variable name="Faith Range" bytes="1" default="1E" symbol="true" />
        <Variable name="Faith Minimum" bytes="1" default="2D" symbol="true" />
    </Patch>
    <Patch name="Check if Guest can join party" hidden="true">
        <Location file="EVENT_REQUIRE_OUT" offset="1C6018" mode="ASM" offsetMode="RAM">
            bne     a1, zero, 0x801c6024
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6CF4" mode="ASM" offsetMode="RAM">
            li      a2, 0
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6D40" mode="ASM" offsetMode="RAM">
            andi    a0, a0, 0x01
            addiu   a0, a0, 0x100
            subu    a0, a0, v0
            sh      a0, 4(s3)
            lw      a0, 0(s1)
            jal     0x801c6000
            li      a1, 0
            sb      v0, 0x04(sp)
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6E30" mode="ASM" offsetMode="RAM">
            lbu     a2, 0x04(sp)
            bne     v0, zero, 0x801c702c
            srl     a2, a2, 1
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6E44" mode="ASM" offsetMode="RAM">
            li      a1, 1
        </Location>
    </Patch>
    <Patch name="Party roster expansion (Glain version)">
        <Description>
            Party roster size is now 20 (from 16).  Guests can be in any slot?  (Glain version)
        </Description>
        
        <Include patch="Rewrite Init Party Battle Data Routine" />
        <Include patch="Rewrite ENTD Data Calculation Routine" />
        <Include patch="Check if Guest can join party" />
        
        <Location file="SCUS_942_21" offset="59BF4" mode="ASM" offsetMode="RAM">
            b   0x80059c38
        </Location>
        <Location file="SCUS_942_21" offset="59C80" mode="ASM" offsetMode="RAM">
            nop
        </Location>
        <Location file="SCUS_942_21" offset="59DA0" offsetMode="RAM">
            00
        </Location>
        <Location file="SCUS_942_21" offset="59DB0,59F64,5A358" offsetMode="RAM">
            14
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C3110,1C8BBC,1C8BCC,1C9890" offsetMode="RAM">
            14
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C3134" offsetMode="RAM">
            05
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C951C" mode="ASM" offsetMode="RAM">
            lbu     t0, 1(v0)
            lbu     t1, 4(v0)
            li      t2, 0xff
            beq     t0, t2, 0x801c9548
            andi    t1, t1, 0x01
            bne     t0, zero, 0x801c9548
            move    a0, v0
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C40F0,1C48A8,1C610C" offsetMode="RAM">
            14
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C4464" mode="ASM" offsetMode="RAM">
            lbu     v0, 6(s0)
            beq     a1, zero, 0x801c470c
            andi    v0, v0, 0x01
            bne     v0, zero, 0x801c470c
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C498C" mode="ASM" offsetMode="RAM">
            b       0x801c4a08
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C4A0C" offsetMode="RAM">
            F7
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6130" offsetMode="RAM">
            05
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6D64" mode="ASM" offsetMode="RAM">
            b       0x801c6d7c
        </Location>
        <Location file="EVENT_BUNIT_OUT" offset="1C08A0" mode="ASM" offsetMode="RAM">
            lbu     v1, 0x70(t0)
            nop
            andi    v1, v1, 0x01
            beq     v1, zero, 0x801c08dc
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="E78B4,120924,1382F8,195ABF" offsetMode="RAM">
            14
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="120C00" mode="ASM" offsetMode="RAM">
            lbu     t0, 6(s1)
            nop
            andi    v0, t0, 0x01
            beq     v0, zero, 0x80120c1c
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="73D64" mode="ASM" offsetMode="RAM">
            lbu     t0, 4(v1)
            bne     v0, zero, 0x80073dac
            andi    t0, t0, 0x01
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="73D84" mode="ASM" offsetMode="RAM">
            bne     t0, zero, 0x80073dac
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="73DB0,75908,91F50" offsetMode="RAM">
            14
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="75820" offsetMode="RAM">
            21
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="91F20" mode="ASM" offsetMode="RAM">
            lbu     t0, 0(v0)
            lbu     t1, 1(v0)
            lbu     t2, 4(v0)
            beq     t1, s1, 0x80091f4c
            andi    t2, t2, 0x01
            beq     t0, zero, 0x80091f4c
            nop
            bne     t2, zero, 0x80091f4c
            sltiu   v0, t0, 4
        </Location>
    </Patch>
    <Patch name="Unit slots backfilled when unit is removed from party">
        <Description>
            When a unit is removed from the party, other units backfill the slot so that it doesn't leave a gap in the party.
        </Description>
        <Location file="BATTLE_BIN" offset="159330" mode="ASM" offsetMode="RAM">
            .label  @battle_unit_data_start, 0x801908cc

            #   Modify battle unit party indeces when backfilling unit slots.
            #   Parameters:
            #       a0 = Party unit index to backfill into
            #       a1 = Sentinel value (last valid index) (15 for non-guest, 19 for guest)
            @modify_battle_unit_party_indeces:

                    la      t0, @battle_unit_data_start     #   Current battle unit
                    li      t1, 0                           #   Current battle unit index

                                                            #   do {
                modify_battle_unit_party_indeces_loop:
                    lbu     t3, 2(t0)                       #       Party unit index
                    nop
                    sltu    t4, t3, a0                      #       Skip to loop bottom if Party unit index is less than removed unit index
                    bne     t4, zero, modify_battle_unit_party_indeces_loop_bottom
                    sltu    t4, a1, t3                      #       Skip to loop bottom if Party unit index is greater than sentinel value
                    bne     t4, zero, modify_battle_unit_party_indeces_loop_bottom
                    li      t5, 0xff                        #       Skip to loop bottom if unit isn't in party
                    beq     t3, t5, modify_battle_unit_party_indeces_loop_bottom
                    nop                                     #       If Party unit index == Removed unit index, store 0xff (not in party) as new party unit index for this unit
                    bne     t3, a0, modify_battle_unit_party_indeces_subtract
                    nop
                    j       modify_battle_unit_party_indeces_loop_bottom
                    sb      t5, 2(t0)
                                                        
                modify_battle_unit_party_indeces_subtract:   
                    addiu   t5, t3, -1                      #       Otherwise, store party unit index - 1
                    sb      t5, 2(t0)
            
                modify_battle_unit_party_indeces_loop_bottom:
                    addiu   t0, t0, 448                     #       Next current battle unit
                    addiu   t1, t1, 1                       #       Next battle unit index
                    sltiu   t2, t1, 21
                    bne     t2, zero, modify_battle_unit_party_indeces_loop
                    nop                                     #   } while (index is less than 21);
                
                    jr      ra
                    nop
        </Location>
        <Location file="SCUS_942_21" offset="27600" mode="ASM" offsetMode="RAM">
            .label  @party_data_start, 0x80057f74
            .label  @regenerate_formation_unit_name_string, 0x80108920

            .eqv    %unit_data_size, 256

            #   ROUTINE: Backfill into a unit slot.  The unit being backfilled over is removed from the party.
            #       Parameters:
            #           a0 = Unit slot index to backfill into
            @backfill_into_unit_slot:

                    addiu   sp, sp, -32
                    sw      ra, 4(sp)
                    sw      s0, 8(sp)
                    sw      s1, 12(sp)
                    sw      s2, 16(sp)
                    sw      s3, 20(sp)
                
                    la      t0, @party_data_start       
                    sll     s0, a0, 8                   #   Unit slot index * sizeof(unit) (256)
                    addu    s0, s0, t0                  #   Current unit slot (unitSlot)
                    move    s1, a0                      #   Current slot index
                    move    s3, a0                      #   Slot index
                
                    #   Find sentinel index: depends on whether unit is a Guest (by default, slot 16 - 19) or not
                    sltiu   t0, a0, %RosterSize
                    bne     t0, zero, backfill_unit_slots_pre_loop
                    li      s2, %RosterSizeMinusOne     #   Sentinel index (default 15 for non-guest)
                    li      s2, 19                      #   Sentinel index (19 for guest)
                
                backfill_unit_slots_pre_loop:
                    #   Skip loop if we're already at the sentinel index (default 15 for non-guest, 19 for guest)
                    beq     s1, s2, backfill_unit_slots_post_loop
                    nop
                
                backfill_unit_slots_loop:               #   do {
                    move    a0, s0
                    addiu   a1, s0, %unit_data_size
                    jal     @copy_bytes                 #       memcpy (unitSlotPtr, unitSlotPtr + sizeof(unit), sizeof(unit))
                    li      a2, %unit_data_size
                
                    lbu     t0, 1(s0)                   #       Load copied slot index
                    li      t1, 0xff
                    beq     t0, t1, backfill_unit_slots_loop_bottom
                    nop
                                                        #       if (Loaded slot index != 0xff)
                    sb      s1, 1(s0)                   #           Save current slot index into unit data
                
                backfill_unit_slots_loop_bottom:
                    addiu   s1, s1, 1                   #       unitSlot++
                    bne     s1, s2, backfill_unit_slots_loop
                    addiu   s0, s0, %unit_data_size     #       unitSlotPtr += sizeof(unit)
                                                        #   } while (unitSlot != sentinelValue)
                backfill_unit_slots_post_loop:
                    #   Mark last (sentinel) slot as empty
                    sll     t0, s2, 8                   #   Sentinel index * sizeof(unit) (256)
                    la      t1, @party_data_start
                    addu    t0, t1, t0                  #   Sentinel unit pointer
                    li      t1, 0xff
                    sb      t1, 1(t0)                   #   Store sentinel slot as empty (Slot index = 0xff)
            
                    #   If not in BATTLE.BIN, skip to the end
                    lui     t0, 0x8006
                    lw      t1, 0x7000(t0)
                    ori     t2, t0, 0x8888
                    xor     t0, t1, t2
                    bne     t0, zero, backfill_unit_slots_end
                    nop
                
                    jal     @modify_battle_unit_party_indeces
                    move    a0, s3
            
                backfill_unit_slots_end:
                    lw      s3, 20(sp)
                    lw      s2, 16(sp)
                    lw      s1, 12(sp)
                    lw      s0, 8(sp)
                    lw      ra, 4(sp)
                    addiu   sp, sp, 32
                    jr      ra
                    nop

                
            #   ROUTINE: Copy bytes
            #   Basically a memcpy implementation, but nothing fancy.  Just copies data byte by byte.
            #       Parameters:
            #           a0 = (dest) Destination pointer
            #           a1 = (src)  Source pointer
            #           a2 = (size) Number of bytes to copy
            @copy_bytes:

                    beq     a2, zero, copy_bytes_end
                    nop
                    lbu     t1, 0(a1)
                    addiu   a1, a1, 1
                    sb      t1, 0(a0)
                    addiu   a0, a0, 1
                    j       @copy_bytes
                    addiu   a2, a2, -1
                
                copy_bytes_end:
                    jr      ra
                    nop
        </Location>
        <Location file="SCUS_942_21" offset="59FE0" mode="ASM" offsetMode="RAM">
            j       @backfill_into_unit_slot
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1209BC" mode="ASM" offsetMode="RAM">
            j       @regenerate_formation_unit_name_string
        </Location>
        <Variable name="Roster Size" bytes="1" default="10" symbol="true" />
        <Variable name="Roster Size Minus One" bytes="1" reference="Roster Size" operator="-" operand="1" symbol="true" />
    </Patch>
    <Patch name="Speed up text crawls">
        <Description>
            Speeds up text crawls significantly.
            Text delays longer than a certain amount are changed to that amount.  Default is 2.  Lower is faster.
        </Description>
        <Location file="BATTLE_BIN" offset="15C9F0" mode="ASM" offsetMode="RAM">
            @text_delay_hook:
                    .eqv    %min_hard_stop, 45

                    li      t2, %TextDelay
                    sltiu   t1, t0, %min_hard_stop
                    beq     t1, zero, text_delay_hook_end
                    sltu    t1, t0, t2
                    bne     t1, zero, text_delay_hook_end
                    nop
                
                    move    t0, t2
                
                text_delay_hook_end:
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="132718" mode="ASM" offsetMode="RAM">
            jal     @text_delay_hook
        </Location>
        <Variable name="Text Delay" bytes="1" default="2" symbol="true" /> 
    </Patch>
    <Patch name="Switch unit number with L1 and R1 buttons (formation)">
        <Description>
            Switch unit number with L1 and R1 buttons in the formation screen.  Changes unit order as appropriate.  L1 and R1 still work normally (switching the selected unit) in menus.
            To only enable switching units when CT is displayed, set "Only On CT" variable to True.
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="1481FF" mode="DATA" offsetMode="RAM" label="address_skip_portrait_transition">
            00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="148200" mode="ASM" offsetMode="RAM">
            @swap_formation_unit_hook:
                    .if     %OnlyOnCT
                            lbu     t2, 0x8018c197
                            li      t3, 2
                            beq     t2, t3, swap_formation_unit_hook_onlyct_end
                            nop
                    
                            addu    t0, t0, a0
                            slt     t1, a2, t0
                            beq     t1, zero, swap_formation_unit_hook_onlyct_check
                            nop
                            li      t0, 0
                        swap_formation_unit_hook_onlyct_check:
                            slt     t1, t0, zero
                            beq     t1, zero, swap_formation_unit_hook_onlyct_back
                            nop
                            move    t0, a2
                        swap_formation_unit_hook_onlyct_back:
                            j       0x8012bcf8
                        swap_formation_unit_hook_onlyct_end:
                            nop
                    .endif
            
                    addiu   sp, sp, -24
                    sw      ra, 4(sp)
                    sw      a3, 8(sp)

                    move    a1, a0
                    jal     @swap_formation_unit
                    move    a0, t0
                    sw      v0, 12(sp)
        
                    sb      zero, 0x8018bad4
                    jal     0x801140bc
                    nop
        
                    jal     0x80108920
                    nop
        
                    lw      v0, 12(sp)
                    lw      a3, 8(sp)
                    lw      ra, 4(sp)
                    addiu   sp, sp, 24
                    j       0x8012bcf8
                    move    t0, v0

            @portrait_transition_hook:
                    lui     t2, %hi(@address_skip_portrait_transition)
                    lbu     t1, %lo(@address_skip_portrait_transition) (t2)
                    nop
        
                    beq     t1, zero, portrait_transition_hook_default
                    addiu   t1, t1, -1
        
                    sw      v1, 0x0058(sp)
                    j       portrait_transition_hook_end
                    sb      t1, %lo(@address_skip_portrait_transition) (t2)
        
                portrait_transition_hook_default:    
                    sw      v0, 0x0050(sp)
        
                portrait_transition_hook_end:
                    jr      ra
                    nop
        
            #   swap_formation_unit (formationIndex, offset)
            @swap_formation_unit:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
        
                    move    v0, a0                  #   formationIndex
                    sll     t0, a0, 2
                    lw      t0, 0x801cd5ec(t0)
                    addu    t1, a0, a1              #   offsetFormationIndex
                    lhu     a0, 0x2c(t0)            #   unitIndex
                    move    t2, a1                  #   offset
                    addu    a1, a0, a1              #   offsetUnitIndex
        
                    #   Skip if either unit index = 0 or either unit index >= RosterSize
                    beq     a0, zero, swap_formation_unit_end
                    nop
                    beq     a1, zero, swap_formation_unit_end
                    sltiu   t0, a0, %RosterSize  
                    beq     t0, zero, swap_formation_unit_end
                    sltiu   t0, a1, %RosterSize
                    beq     t0, zero, swap_formation_unit_end
                    li      t4, 1
        
                    #   If offset formation index >= number of formation units, don't move formation index
                    lbu     t3, 0x801cd788
                    nop
                    sltu    t3, t1, t3
                    beq     t3, zero, swap_formation_unit_swap
                    nop
        
                    #   Find unit index of offset formation unit
                    sll     t0, t1, 2
                    lw      t0, 0x801cd5ec(t0)
                    nop
        
                    #   If null, skip index check
                    beq     t0, zero, swap_formation_unit_swap
                    nop
        
                    lhu     t0, 0x2c(t0)
                    nop
        
                    #   If it's the same as the offset unit index...
                    bne     t0, a1, swap_formation_unit_swap
                    nop
                    #   ...move the selected formation unit index.
                    addu    v0, v0, t2
        
                swap_formation_unit_swap:
                    sb      t4, @address_skip_portrait_transition
                    sw      v0, 8(sp)
                    jal     @swap_unit_data
                    nop
                    lw      v0, 8(sp)
        
                swap_formation_unit_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop

            #   swap_unit_data (index1, index2)
            @swap_unit_data:
                    addiu   sp, sp, -32
                    sw      ra, 4(sp)
                    sw      s0, 8(sp)
                    sw      s1, 12(sp)
                    sw      s2, 16(sp)
                    sw      s3, 20(sp)
        
                    move    s0, a0
                    move    s1, a1
        
                    sll     s2, a0, 8
                    sll     s3, a1, 8
                    la      t0, 0x80057f74
                    addu    s2, s2, t0
                    addu    s3, s3, t0
        
                    move    a0, s2
                    move    a1, s3
                    jal     @swap_data
                    li      a2, 256
        
                    lbu     t0, 0xd0(s2)
                    lbu     t1, 0xd0(s3)
                    nop
                    or      t0, t0, t1
                    beq     t0, zero, swap_unit_data_first_index
        
                    move    a0, s0
                    jal     @swap_proposition_data
                    move    a1, s1
        
                swap_unit_data_first_index:
                    lbu     t1, 1(s2)
                    li      t0, 0xff
                    beq     t1, t0, swap_unit_data_second_index
                    nop
                    sb      s0, 1(s2)
    
                swap_unit_data_second_index:    
                    lbu     t1, 1(s3)
                    nop
                    beq     t1, t0, swap_unit_data_end
                    nop
                    sb      s1, 1(s3)
    
                swap_unit_data_end:    
                    lw      s3, 20(sp)
                    lw      s2, 16(sp)
                    lw      s1, 12(sp)
                    lw      s0, 8(sp)
                    lw      ra, 4(sp)
                    addiu   sp, sp, 32
                    jr      ra
                    nop
        
            #   swap_data (ptr1, ptr2, size)
            @swap_data:
                    beq     a2, zero, swap_data_end
                    addiu   a2, a2, -1
                    lbu     t0, 0(a0)
                    lbu     t1, 0(a1)
                    sb      t0, 0(a1)
                    sb      t1, 0(a0)
                    addiu   a0, a0, 1
                    j       @swap_data
                    addiu   a1, a1, 1
        
                swap_data_end:
                    jr      ra
                    nop

            #   swap_proposition_data (index1, index2)
            @swap_proposition_data:
                    lui     t0, 0x8005
                    lbu     t7, 0x7ce8(t0)      #   Number of active propositions
                    ori     t0, t0, 0x7eec
                    li      t1, 0
        
                swap_proposition_data_loop:
                    beq     t1, t7, swap_proposition_data_end
                    nop
    
                    lbu     t2, 0(t0)
                    lbu     t3, 5(t0)
                    beq     t2, zero, swap_proposition_data_loop_bottom
                    li      t4, 0
                    addiu   t5, t0, 6
        
                swap_proposition_data_inner_loop:
                    beq     t4, t3, swap_proposition_data_loop_bottom
                    nop
                    lbu     t6, 0(t5)
                    nop
                    bne     t6, a0, swap_proposition_data_inner_loop_second_check
                    nop
                    sb      a1, 0(t5)
                    j       swap_proposition_data_inner_loop_bottom
                    nop
        
                swap_proposition_data_inner_loop_second_check:
                    bne     t6, a1, swap_proposition_data_inner_loop_bottom
                    nop
                    sb      a0, 0(t5)
    
                swap_proposition_data_inner_loop_bottom:
                    addiu   t4, t4, 1
                    sltiu   t6, t4, 3
                    bne     t6, zero, swap_proposition_data_inner_loop
                    addiu   t5, t5, 1
        
                swap_proposition_data_loop_bottom:
                    addiu   t1, t1, 1
                    sltiu   t2, t1, 8
                    bne     t2, zero, swap_proposition_data_loop
                    addiu   t0, t0, 9

                swap_proposition_data_end:
                    jr      ra
                    nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="10DB28" mode="ASM" offsetMode="RAM">
            jal     @portrait_transition_hook
            li      v0, 2
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12BCC8" mode="ASM" offsetMode="RAM">
            j       @swap_formation_unit_hook
            li      a0, 1
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12BCE8" mode="ASM" offsetMode="RAM">
            j       @swap_formation_unit_hook
            li      a0, -1
        </Location>
        <Variable name="Roster Size" bytes="1" default="10" symbol="true" />
        <Variable name="Only On CT" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Process Battle Button Input Rewrite" hidden="true">
        <Location file="BATTLE_BIN" offset="93654" mode="ASM" offsetMode="RAM">
            @process_battle_button_input_rewrite:
                    addiu   sp, sp, -24
                    sw      ra, 16(sp)

                    jal     0x8001db58
                    li      a0, 1

                    sw      v0, 0x80045944

                    jal     0x8013b590
                    li      a0, 0x1fc

                    beq     v0, zero, past_input_mod
                    lui     a0, 0x8004

                    jal     0x80142d2c
                    addiu   a0, a0, 0x5944

                past_input_mod:
                    lui     t0, 0x8004
                    lw      v0, 0x594c(t0)
                    lw      v1, 0x5948(t0)
                    lw      a0, 0x5944(t0)
                    sw      v0, 0x5964(t0)
                    sw      v0, 0x5968(t0)
                    sw      v0, 0x596c(t0)
                    sw      v0, 0x5970(t0)
        
                    not     v0, v1
                    and     v0, v0, a0
                    sw      v0, 0x594c(t0)
        
                    sw      v1, 0x5954(t0)
                    sw      v1, 0x5958(t0)
                    sw      v1, 0x595c(t0)
                    sw      v1, 0x5960(t0)
        
                    not     v0, a0
                    and     v0, v0, v1
                    sw      v0, 0x5950(t0)
        
                    lw      v0, 0x5974(t0)
                    bne     v1, a0, store_zero
                    addiu   v0, v0, 1
        
                    j       past_store
                    sw      v0, 0x5974(t0)
        
                store_zero:
                    sw      zero, 0x5974(t0)
        
                past_store:
                    lw      v0, 0x594c(t0)
                    lw      v1, 0x5944(t0)
                    andi    v0, v0, 0x10
                    sw      v1, 0x5948(t0)
                    beq     v0, zero, past_triangle_menu
                    lui     t1, 0x8009
                    lw      v1, 0x60e4(t1)
                    li      v0, 0x34
                    beq     v1, v0, past_triangle_menu
                    lui     v1, 0x800e
                    lw      v1, 0x4e8c(v1)
                    lw      t2, 0x60f8(t1)
                    beq     v1, zero, past_triangle_menu
                    nop
                    bne     t2, zero, past_triangle_menu
                    nop
                    jal     0x8007a218
                    nop
                    lbu     v0, 0x13d(v0)
                    nop
                    andi    v0, v0, 0x08
                    bne     v0, zero, past_triangle_menu
                    nop
        
                    jal     0x80043ff8
                    li      a0, 0x71
                    li      v0, 1
                    sw      v0, 0x800960f8
        
                past_triangle_menu:
                    lw      v0, 0x80045948
                    li      v1, 0x90c
                    and     v0, v0, v1
                    bne     v0, v1, normal_end
                    nop
                    jal     0x80040974
                    
                normal_end:
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="937E8" mode="ASM" offsetMode="RAM">
                @process_battle_button_input_rewrite_end:
                    lw      ra, 16(sp)
                    addiu   sp, sp, 24
                    jr      ra
                    li      v0, 1
        </Location>
    </Patch>
    <Patch name="Press buttons to win! (v2)">
        <Description>
            Press a button combination to win.  Default is L1 + Select.
            Button codes:
                0x8000  Left
                0x4000  Down
                0x2000  Right
                0x1000  Up
                0x0800  Start
                0x0400  R3
                0x0200  L3
                0x0100  Select
                0x0080  Square
                0x0040  X
                0x0020  Circle
                0x0010  Triangle
                0x0008  R1
                0x0004  L1
                0x0002  R2
                0x0001  L2
        </Description>
        <Include patch="Process Battle Button Input Rewrite" />
        <Location file="BATTLE_BIN" offset="1593AF" mode="DATA" offsetMode="RAM" label="address_insta_win_pressed">
            00
        </Location>
        <Location file="BATTLE_BIN" offset="1593B0" mode="ASM" offsetMode="RAM">
            @check_button_win:
                    lbu     t0, @address_insta_win_pressed
                    lui     t7, 0x8005
                    addiu   v1, t7, %lo(0x80049a18)                 #   Conditionals                
                    beq     t0, zero, check_button_win_end          #   Skip if insta-win not triggered
                    li      t5, 0x19
        
                    addu    t0, v0, v1                              #   Conditionals + offset (from calling routine)
                    li      t1, 0                                   #   index (Conditional index)
            
                check_button_win_loop:
                    lhu     t2, 0(t0)                               #   Check for Run Scenario conditional
                    lui     at, %hi(0x801696bc)
                    beq     t2, t5, check_button_win_past_loop      #   If so, break out of loop
                    addu    at, at, t2
                    lbu     t3, %lo(0x801696bc)(at)                 #   Load parameter length value
                    addiu   t1, t1, 1                               #   index = index + 1
                    sll     t3, t3, 1                               #   Parameter length = value * 2
                    addiu   t3, t3, 2                               #   Command length = parameter length + 2
                    sltiu   t4, t1, 256                             
                    bne     t4, zero, check_button_win_loop         #   Loop while index is less than 256 (or until break)
                    addu    t0, t0, t3                              #   (Go to next conditional)
        
                check_button_win_past_loop:
                    lhu     t0, 2(t0)                               #   Scenario ID
                    bne     t2, t5, check_button_win_end            #   If there was no Run Scenario in this conditional block, return            
                    sll     t3, t0, 1
            
                    addu    at, t7, t3
                    lhu     t1, %lo(0x8004e5d0)(at)                 #   Scenario after event value
            
                    li      t2, 0x80
                    andi    t1, t1, 0xf300                          
                    sra     t1, t1, 8                               #   Scenario after event action
                    beq     t1, t2, check_button_win_change         #   Change if action = 0x80 (Go to World Map) 
                    li      t2, 0x81                                
                    beq     t1, t2, check_button_win_change         #   Change if action = 0x81 (Go to Next Scenario)
                    nop
                    j       check_button_win_end                    #   Otherwise, return normally
                    nop
            
                check_button_win_change:
                    sw      t0, %lo(0x800577b8)(t7)                 #   Current Event ID = Scenario ID
                    la      ra, 0x80142674                          #   Exit calling routine
                    li      v0, 1                                   #   Return value = 1
        
                check_button_win_end:
                    jr      ra
                    nop
            
            
            @check_button_win_outcome:
                    lbu     t0, @address_insta_win_pressed 
                    nop
                    beq     t0, zero, check_button_win_outcome_end        
                    nop
        
                    li      v0, 0
        
                check_button_win_outcome_end:
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="93774" mode="ASM" offsetMode="RAM">
                lw      t0, 0x80045944                              #   Button input
                li      t1, %Buttons                           
                and     t0, t0, t1                                  #   Was insta-win triggered?
                bne     t0, t1, check_button_win_input_end          #   Skip if not
                li      t2, 1
 
                sb      t2, @address_insta_win_pressed
 
            check_button_win_input_end:
                j       @process_battle_button_input_rewrite_end
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="1425F4" mode="ASM" offsetMode="RAM">
                jal     @check_button_win
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="142634" mode="ASM" offsetMode="RAM">
                lui     t0, %hi(@address_insta_win_pressed)
        </Location>
        <Location file="BATTLE_BIN" offset="142688" mode="ASM" offsetMode="RAM">
                sb      zero, %lo(@address_insta_win_pressed)(t0)
        </Location>
        <Location file="BATTLE_BIN" offset="1834B4" mode="ASM" offsetMode="RAM">
                j       @check_button_win_outcome
        </Location>
        <Variable name="Buttons" symbol="true" bytes="2" default="104" /> 
    </Patch>
    <Patch name="Break out of multi-battle sequences">
        <Description>
            Break out of multi-battle sequences by pressing a button combination directly after exiting the formation screen.  Default is L1 + R1.
            Includes the "Rewrite ENTD Data Calculation Routine" patch, so that the game does not try to load a Guest that has already left the party.
            Button codes:
                0x8000  Left
                0x4000  Down
                0x2000  Right
                0x1000  Up
                0x0800  Start
                0x0400  R3
                0x0200  L3
                0x0100  Select
                0x0080  Square
                0x0040  X
                0x0020  Circle
                0x0010  Triangle
                0x0008  R1
                0x0004  L1
                0x0002  R2
                0x0001  L2
        </Description>
        <Include patch="Rewrite ENTD Data Calculation Routine" />
        <Location file="WORLD_WORLD_BIN" offset="148150" mode="ASM" offsetMode="RAM">
            @close_formation_screen_hook:
                    addiu   sp, sp, -24
                    sw      ra, 4(sp)
                    sw      s0, 8(sp)
                    sw      s1, 12(sp)
                
                    li      a0, 0x000c
                    move    s1, a0
                    jal     0x8001db58
                    move    s0, v0
                    and     t0, v0, s1
                    bne     t0, s1, close_formation_screen_hook_end
                    move    v0, s0
        
                    li      v0, 0
        
                close_formation_screen_hook_end:
                    lw      ra, 4(sp)
                    lw      s1, 12(sp)
                    lw      s0, 8(sp)
                    jr      ra
                    addiu   sp, sp, 24
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="685D8" mode="ASM" offsetMode="RAM">
                    j       @close_formation_screen_hook
        </Location>
        <Variable name="Buttons" file="WORLD_WLDCORE_BIN" offset="15DC" bytes="2" default="C" /> 
    </Patch>
    <Patch name="Equipment duplication glitch fixes">
        <Description>
            Fixes the equipment duplication glitches that can be triggered from using Best Fit in the shops.
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="124354" mode="ASM" offsetMode="RAM">
            b       0x80124360
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1367FC" mode="ASM" offsetMode="RAM">
            beq     v0, zero, 0x80136818
        </Location>
    </Patch>
    <Patch name="Level down fix">
        <Description>
            Fixes leveling down to subtract raw stats based on old level instead of new level, so it should subtract the same amount gained in the previous level.  Also fixes level up abilities so that they add the same amount as leveling up via experience gain.
        </Description>
        <Location file="BATTLE_BIN" offset="18C870" mode="ASM" offsetMode="RAM">
            sw      s0, 0x0c(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="18C8E0" mode="ASM" offsetMode="RAM">
            move    s0, v1
        </Location>
        <Location file="BATTLE_BIN" offset="18C8EC" mode="ASM" offsetMode="RAM">
            lui     a0, 0x8019
            lw      a0, 0x2d98(a0)
            jal     0x8005da10
            nop
            lui     a0, 0x8019
            lw      a0, 0x2d98(a0)
            nop
            sb      s0, 0x22(a0)
        </Location>
        <Location file="BATTLE_BIN" offset="18C914" mode="ASM" offsetMode="RAM">
            lw      s0, 0x0c(sp)
            jr      ra
            addiu   sp, sp, 0x18
        </Location>
    </Patch>
    <Patch name="Historic level down and level fixes">
        <Description>
            Level down is based on previous growths, and level up abilities have the same effect as leveling up via experience gain.  (Includes Level down fix patch)
        
            Use Midpoint variable:  
                Set to True (default) to use average base stat values (less subtraction on level down).  
                Set to False to use minimum base stat values (more subtraction on level down).
        </Description>
        <Include patch="Level down fix" />
        <Location file="SCUS_942_21" offset="5DA10" mode="ASM" offsetMode="RAM">
                addiu   sp, sp, -16
                sw      s0, 4(sp)
                sw      ra, 8(sp)

                move    s0, a0              #   Unit
                addiu   t0, s0, 0x72        #   Raw stat pointer
                addiu   t1, s1, 0x81        #   Growth pointer
                lbu     t2, 0x22(s0)        #   Level
                li      t3, 0               #   Raw stat index
        
                li      t6, 0x00ffffff

            level_unit_loop:
                lwl     t5, 3(t0)
                lwr     t5, 0(t0)           #   Raw stat (with extra byte)
                lbu     t4, 0(t1)           #   Growth
                and     t5, t5, t6          #   Raw stat
        
                #   If growth == 0, growth = 1
                sltiu   t7, t4, 1
                or      t4, t4, t7
        
                addu    t4, t4, t2          #   Growth + Level
                beq     a1, zero, level_unit_loop_level_up
                li      t7, 2
        
                #   Level down
        
                #   Load base class and flags, and check for Ramza
                lbu     t8, 0(s0)
                lbu     t9, 6(s0)
                sltiu   t8, t8, 4
        
                #   Determine base stat set
                bne     t8, zero, level_unit_loop_level_down_load_base
                andi    t8, t9, 0x80
                bne     t8, zero, level_unit_loop_level_down_load_base
                li      t7, 0
                andi    t8, t9, 0x40
                bne     t8, zero, level_unit_loop_level_down_load_base
                li      t7, 1
                li      t7, 3
        
            level_unit_loop_level_down_load_base:
                sll     t8, t7, 1           #   BaseStatSet * 2
                addu    t8, t8, t7          #   BaseStatSet * 3
                sll     t8, t8, 2           #   BaseStatSet * 12
        
                lui     at, 0x8006
        
                addu    t8, t8, t3          #   Add raw stat index
                addu    t9, at, t8
                lbu     v0, -0x16f4(t9)     #   Base Stat Base
        
                .if     %UseMidpoint
        
                    sll     t8, t7, 2           #   BaseStatSet * 4
                    addu    t8, t8, t7          #   BaseStatSet * 5
            
                    addu    t8, t8, t3          #   Add raw stat index
                    addu    t9, at, t8
                    lbu     v1, -0x16c4(t9)     #   Base Stat Random Mod
            
                    sll     v0, v0, 14
                    sll     v1, v1, 13
                    addu    v0, v0, v1          #   BaseStat
        
                .else
        
                    sll     v0, v0, 14
        
                .endif
        
                subu    t8, t5, v0          #   (BaseStat - RawStat)
        
                addiu   t4, t2, -1          #   Level - 1
                srl     t9, t4, 1
                addu    t8, t8, t9          #   Add ((Level - 1) / 2) to numerator for rounding purposes
        
                divu    t8, t4              
                mflo    t8                  #   (BaseStat - RawStat) / (Level - 1)
        
                j       level_unit_loop_raw_stat_cap
                subu    t5, t5, t8          #   RawStat = RawStat - ((BaseStat - RawStat) / Level)
        
            level_unit_loop_level_up:
                divu    t5, t4
                mflo    t7
                addu    t5, t5, t7          #   RawStat = RawStat + (RawStat / (Growth + Level))
        
            level_unit_loop_raw_stat_cap:
                sltu    t7, t5, t6
                bne     t7, zero, level_unit_loop_save_raw_stat
                nop
                move    t5, t6
        
            level_unit_loop_save_raw_stat:
                srl     t7, t5, 16
                srl     t8, t5, 8
                sb      t7, 2(t0)
                sb      t8, 1(t0)
                sb      t5, 0(t0)
        
                addiu   t3, t3, 1
                addiu   t0, t0, 3
                sltiu   t4, t3, 5
                bne     t4, zero, level_unit_loop
                addiu   t1, t1, 2

                jal     0x8005d5e0 
                move    a0, s0

                lhu     t0, 0x28(s0)        #   HP
                lhu     t1, 0x2a(s0)        #   MaxHP
                lhu     t2, 0x2c(s0)        #   MP
                lhu     t3, 0x2e(s0)        #   MaxMP
        
                #   Cap HP at MaxHP
                sltu    t4, t1, t0
                beq     t4, zero, level_unit_cap_mp
                sltu    t4, t3, t2
                sh      t1, 0x28(s0)
        
            level_unit_cap_mp:
                #   Cap MP at MaxMP
                beq     t4, zero, level_unit_end
                nop
                sh      t3, 0x2c(s0)

            level_unit_end:
                lw      ra, 8(sp)
                lw      s0, 4(sp)
                jr      ra
                addiu   sp, sp, 16
        </Location>
        <Variable name="Use Midpoint" bytes="1" default="01" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Degenerator traps transformed into other trap type">
        <Description>
            Degenerator traps change to a different type of trap.  Default is Steel Needle.
        </Description>
        <Location file="BATTLE_BIN" offset="180440" mode="ASM" offsetMode="RAM">
                li      s4, %TrapType
        </Location>
        <Variable name="Trap Type" bytes="1" default="03" symbol="true">
            <Preset name="Degenerator" value="00" />
            <Preset name="Deathtrap" value="01" />
            <Preset name="Sleeping Gas" value="02" />
            <Preset name="Steel Needle" value="03" />
        </Variable>
    </Patch>
    <Patch name="Crits always deal bonus damage">
    <Description>
        Crit XA bonus minimum is 1 instead of 0.  Maximum is still XA - 1.
    </Description>
        <Location file="BATTLE_BIN" offset="186528" mode="ASM" offsetMode="RAM">
            lh      v1, 0x38ce(a0)
            nop
            sltiu   t0, v1, 1
            addu    v1, v1, t0
            addiu   t0, v1, -1
            mult    v0, t0
            mflo    v0
            addiu   v1, v1, 1
        </Location>
        <Location file="BATTLE_BIN" offset="186554" mode="ASM" offsetMode="RAM">
            sh      v0, 0x38ce(a0)
        </Location>
        </Patch>
        <Patch name="Always crit">
        <Location file="BATTLE_BIN" offset="186500" mode="ASM" offsetMode="RAM">
            lui     v0, 0x8019
            lw      v0, -0x0a04(v0)
        </Location>
    </Patch>
    <Patch name="Brave story can point to non-setup events">
        <Description>
            Changes when the brave story variable is unset to being when you leave the menu as opposed to when you enter a new event.
        </Description>
        <Location file="BATTLE_BIN" offset="142E84" mode="ASM" offsetMode="RAM">
            nop
        </Location>
        <Location file="WORLD_WLDCORE_BIN" offset="83220" mode="ASM" offsetMode="RAM">
            jal     0x800903e4
            addiu   a0, a0, -0x1108
            bne     v0, zero, 0x80083428
            li      a0, 0x1fc
            jal     0x800ef25c
            li      a1, 0
            jal     0x80090d30
            li      a0, 2
            lui     t0, 0x800c
            lw      a2, -0x4b10(t0)
            nop
            addiu   v0, a2, -2
            sll     a0, v0, 1
            addu    a0, a0, v0
            sll     a0, a0, 3
            subu    a0, a0, v0
            sll     a0, a0, 2
            addiu   at, t0, -0x466c
        </Location>
    </Patch>
    <Patch name="Enforce level caps">
        <Description>Enforces level caps. Defined in sets of two by the data in the first Location tag. First number in the set is storyline progression variable value and second number in the set is what the level cap is up to that progression. All values in hex.</Description>
        <Location file="SCUS_942_21" offset="27730" mode="DATA" offsetMode="RAM" label="address_level_cap_data">
            0F 14 1F 23 29 32 35 46 00 00
        </Location>
        <Location file="SCUS_942_21" offset="27A5C" mode="ASM" offsetMode="RAM">
            .label  @address_storyline_progression_variable, 0x800578d4
            .label  @address_skip_level_up, 0x8005d8e4
            
            .eqv    %battle_unit_experience_offset, 0x21
        
            #   HOOK: ENFORCE LEVEL CAP
            #       Parameters:
            #           s0 = Unit in-battle data pointer
            #           s1 = Unit level
            #       Sets v0 = 0 and experience = 99 if unit is at level cap, and skips the level up code.
            #       Preserve: v0, in default case
            @enforce_level_cap_hook:
                    
                    addiu   sp, sp, -24
                    sw      ra, 4(sp)
                    sw      v0, 8(sp)
                    
                    jal     @find_level_cap
                    nop
                    
                    sltu    t0, s1, v0
                    bne     t0, zero, enforce_level_cap_hook_default
                    li      t0, 99
                  
                    sb      t0, %battle_unit_experience_offset (s0)
                    la      ra, @address_skip_level_up
                    j       enforce_level_cap_hook_end
                    li      v0, 0
                  
                enforce_level_cap_hook_default:
                    lw      v0, 8(sp)
                    lw      ra, 4(sp)
                    
                enforce_level_cap_hook_end:
                    addiu   sp, sp, 24
                    jr      ra
                    nop

                    
            #   ROUTINE: FIND LEVEL CAP
            #       Finds the level cap based on the storyline progression variable.
            #       Returns:
            #           v0 = Level cap
            @find_level_cap:

                    lbu     t0, @address_storyline_progression_variable
                    la      t1, @address_level_cap_data
                    
                find_level_cap_loop:
                    lbu     t2, 0(t1)
                    lbu     t3, 1(t1)
                    beq     t2, zero, find_level_cap_default
                    sltu    t4, t0, t2
                    bne     t4, zero, find_level_cap_end
                    move    v0, t3
                    j       find_level_cap_loop
                    addiu   t1, t1, 2
                    
                find_level_cap_default:
                    li      v0, 99
                    
                find_level_cap_end:
                    jr      ra
                    nop
        </Location>
        
        <Location file="SCUS_942_21" offset="5D8AC" mode="ASM" offsetMode="RAM">
            jal     @enforce_level_cap_hook
        </Location>        
        
        <Location file="BATTLE_BIN" offset="15AF30" mode="ASM" offsetMode="RAM">
            .label  @address_skip_ability_level_up, 0x8018c910
        
            #   HOOK: ENFORCE LEVEL CAP (ABILITY)
            #       Parameters:
            #           v0 = Unit level
            #       Sets v0 = 0 if unit is at level cap, and skips the level up code.
            #       Preserve: v0 and v1, in default case
            @enforce_ability_level_cap_hook:
                    
                    addiu   sp, sp, -24
                    sw      ra, 4(sp)
                    sw      s0, 8(sp)
                    sw      v1, 12(sp)
                    
                    move    s0, v0
                    jal     @find_level_cap
                    nop
                    
                    sltu    t0, s0, v0
                    bne     t0, zero, enforce_ability_level_cap_hook_default
                    nop
                  
                    la      ra, @address_skip_ability_level_up
                    j       enforce_ability_level_cap_hook_end
                    li      v0, 0
                  
                enforce_ability_level_cap_hook_default:
                    lw      v1, 12(sp)
                    move    v0, s0
                    lw      ra, 4(sp)
                    
                enforce_ability_level_cap_hook_end:
                    lw      s0, 8(sp)
                    addiu   sp, sp, 24
                    jr      ra
                    nop
        </Location>
        
        <Location file="BATTLE_BIN" offset="18A770" mode="ASM" offsetMode="RAM">
            lui     s1, 0x8019
            lw      s1, 0x2d98(s1)
            nop
            lbu     s1, 0x22(s1)
            jal     @find_level_cap
            nop
            sltu    v0, s1, v0
        </Location>
        <Location file="BATTLE_BIN" offset="18C890" mode="ASM" offsetMode="RAM">
            jal     @enforce_ability_level_cap_hook
        </Location>
    </Patch>
    <Patch name="Change camera zoom values">
        <Description>Change camera zoom values.  Lower is more zoomed out, higher is more zoomed in.  Recommended to use same values for zooming and fixed.</Description>
        <Variable name="Zoom-in value (zooming)" file="BATTLE_BIN" offset="86C0" bytes="2" default="1000" />
        <Variable name="Zoom-in value (fixed)" file="BATTLE_BIN" offset="86F8" bytes="2" default="1000" />
        <Variable name="Zoom-out value (zooming)" file="BATTLE_BIN" offset="8744" bytes="2" default="0C01" />
        <Variable name="Zoom-out value (fixed)" file="BATTLE_BIN" offset="8774" bytes="2" default="0C00" />
    </Patch>
    <Patch name="Abilities can flash red without charge time">
        <Location file="BATTLE_BIN" offset="1400BC" mode="ASM" offsetMode="RAM">
            nop
        </Location>
    </Patch>
    <Patch name="Disable Now Loading Message" hidden="true">
        <Location file="SCUS_942_21" offset="40BD8" mode="ASM" offsetMode="RAM">
            jr      ra
            nop
        </Location>
    </Patch>
    <Patch name="Now Loading Routine Rewrite">
        <Location file="SCUS_942_21" offset="40BD8" mode="ASM" offsetMode="RAM" inputFile="build_now_loading_rewrite.asm" />
        <Variable name="Now Loading Red Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
        <Variable name="Now Loading Green Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
        <Variable name="Now Loading Blue Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
    </Patch>
    <Patch name="Expand load and save data">
        <Description>
            Expands load and save data to use all 64 blocks, instead of just 60.  If you load a normal 60 block save, then the last 4 blocks loaded in could be garbage data.
            If you want to prevent loading saves made without this patch, change the Checksum End Block variable to 40 from 3C. (These values are hexadecimal)
        </Description>
        <Location file="SCUS_942_21" offset="40BD8" mode="ASM" offsetMode="RAM" inputFile="build_now_loading_rewrite.asm" />
        <Location file="SCUS_942_21" offset="40F00" mode="ASM" offsetMode="RAM" label="extra_save_data_location">
            .label  @copy_bytes, 0x8005e254
        </Location>
        <Location specific="WORLD_WORLD_BIN:12FA99,12FAA9,12FBD1,12FC65,12FCD9,12FCE1,EVENT_CARD_OUT:1BFF71,1BFF99,1C0069" offsetMode="RAM">
            20
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12D974" mode="ASM" offsetMode="RAM">
            lui     at, %hi(0x8018e48c)
            beq     a0, zero, 0x8012dac8
            sb      a0, %lo(0x8018e48c) (at)
            lui     a1, 0x801c
            jal     0x8012d8b0
            ori     a1, a1, 0xa768
            lui     at, 0x801d
            lw      v0, -0x3a94(at)
            lw      v1, -0x3a98(at)
            sw      v0, -0x3a90(at)
            jal     0x80130898
            sw      v1, -0x2700(at)
            jal     0x8012fdd8
            li      a0, -1

            lw      a0, 0x801cd1ec
            la      a1, 0x801e8000
            li      a2, 0x200
            jal     @copy_bytes
            addiu   a0, a0, 0x1e00

            j       0x8012d9dc
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12DCDC" mode="ASM" offsetMode="RAM">
            lw      v0, 0x801cc574
            sw      s0, 0x0c(sp)
            beq     v0, zero, 0x8012dd9c
            lui     s0, %hi(0x801cd1ec)
            jal     0x8012d5bc
            nop
            bne     v0, zero, 0x8012dd94
            nop
            lui     at, %hi(0x8018e48c)
            lw      a0, 0x801cc568
            jal     0x800449cc
            sb      zero, %lo(0x8018e48c) (at)
            lw      a0, 0x801cc56c
            jal     0x800449cc
            nop
            la      a0, 0x801ca768
            lw      a1, %lo(0x801cd1ec) (s0)
            jal     0x800222dc
            li      a2, 0x1e00

            la      a0, 0x801e8000
            lw      a1, %lo(0x801cd1ec) (s0)
            li      a2, 0x200
            jal     @copy_bytes
            addiu   a1, a1, 0x1e00

            jal     0x80130338
            li      a0, 1
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12DDB0" mode="ASM" offsetMode="RAM">
            lw      ra, 0x14(sp)
            lw      s0, 0x0c(sp)
            jr      ra
            addiu   sp, sp, 0x18
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12FDE4" mode="ASM" offsetMode="RAM">
            lui     t0, 0x801d
            lbu     a0, -0x2878(t0)
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12FE3C" mode="ASM" offsetMode="RAM">
            sw      s5, 0x0114(sp)
            lw      s5, -0x2e14(t0)
            move    v0, a0
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12FFB8" mode="ASM" offsetMode="RAM">
            li      a2, 0x0100
            jal     @copy_bytes
            addiu   a1, s5, 0x1604
            lui     a0, 0x8005
            ori     a0, a0, 0x9494
            li      a2, 0x0100
            jal     @copy_bytes
            addiu   a1, s5, 0x1704
            lui     a0, 0x8005
            ori     a0, a0, 0x9414
            li      a2, 0x0080
            jal     @copy_bytes
            addiu   a1, s5, 0x1804

            la      a0, @extra_save_data_location
            li      a2, 0x200
            jal     @copy_bytes
            addiu   a1, s5, 0x1e00
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="13032C" mode="ASM" offsetMode="RAM">
            lw      s5, 0x0114(sp)
            jr      ra
            addiu   sp, sp, 0x0130
        </Location>        
        <Location file="WORLD_WORLD_BIN" offset="130338" mode="ASM" offsetMode="RAM">
            addiu   sp, sp, -0x30
            sw      s4, 0x20 (sp)
            move    s4, a0
            sw      s5, 0x28 (sp)
            lui     s5, 0x801d
            lw      s5, -0x2e14 (s5)
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="130360" mode="ASM" offsetMode="RAM">
            lbu     v1, 0x100 (s5)
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="13036C" mode="ASM" offsetMode="RAM">
            sw      ra, 0x24 (sp)       
            lbu     v1, 0x117 (s5)
            li      v0, 4
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="130394" mode="ASM" offsetMode="RAM">
            addiu   a0, s5, 0x118
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1305B0" mode="ASM" offsetMode="RAM">
            lui     t0, 0x8005      
            ori     a1, t0, 0x7b34
            li      a2, 7
            li      v0, -1
            sb      v0, 0x7b33(t0)
            jal     @copy_bytes
            addiu   a0, s5, 0x1c9f
            lui     t0, 0x8005
            ori     a1, t0, 0x7b3c
            li      a2, 5
            jal     @copy_bytes
            addiu   a0, s5, 0x1ca6

            la      a1, @extra_save_data_location
            li      a2, 0x200
            jal     @copy_bytes
            addiu   a0, s5, 0x1e00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="13088C" mode="ASM" offsetMode="RAM">
            lw      s5, 0x28 (sp)
            jr      ra
            addiu   sp, sp, 0x30
        </Location>
        <Location file="EVENT_CARD_OUT" offset="1C01BC" mode="ASM" offsetMode="RAM">
            sw      a0, 0x0138(fp)
        </Location>
        <Location file="EVENT_CARD_OUT" offset="1C024C" mode="ASM" offsetMode="RAM">
            sw      s5, 0x134(fp)
            addiu   v0, v1, 0xbe
            lui     s5, 0x801d
            lw      s5, -0x37f8(s5)
            nop
            addiu   v1, s5, 0x0101
        </Location>
        <Location file="EVENT_CARD_OUT" offset="1C03B0" mode="ASM" offsetMode="RAM">
            lw      a0, 0x0138(fp)
        </Location>
        <Location file="EVENT_CARD_OUT" offset="1C0460" mode="ASM" offsetMode="RAM">
            lui     a0, 0x8005
            ori     a0, a0, 0x96e0
            li      a2, 0x0100
            jal     @copy_bytes
            addiu   a1, s5, 0x1604

            la      a0, @extra_save_data_location
            li      a2, 0x200
            jal     @copy_bytes
            addiu   a1, s5, 0x1e00
        </Location>
        <Location file="EVENT_CARD_OUT" offset="1C099C" mode="ASM" offsetMode="RAM">
            lw      s5, 0x134(fp)
            move    sp, fp
            lw      ra, 0x144(sp)
            lw      fp, 0x140(sp)
            jr      ra
            addiu   sp, sp, 0x148
        </Location>
        <Location file="EVENT_CARD_OUT" offset="1C09FC" mode="ASM" offsetMode="RAM">
            ori     v0, v0, 0xf000
        </Location>
        <Variable name="Checksum End Block" specific="WORLD_WORLD_BIN:130308,1303FC,EVENT_CARD_OUT:1C08D8" offsetMode="RAM" bytes="1" default="3C" />
        <Variable name="Now Loading Red Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
        <Variable name="Now Loading Green Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
        <Variable name="Now Loading Blue Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
    </Patch>
    <Patch name="Unit bench (10 extra unit slots)">
        <Description>
            Add the unit bench, which can hold 10 extra units.  Accessible from the formation screen, with Bench Unit and Unbench Unit menu items.  Units sent to the bench lose EXP and JP.  Joining units will join to the bench if party is full.
            This uses expanded (64 block) save data.  If you load a normal 60 block save, then the last 4 blocks loaded in could be garbage data.
            If you want to prevent loading saves made without this patch, change the Checksum End Block variable to 40 (from 3C). (These values are hexadecimal)
            Roster size refers to the benchable roster size (default 16 (0x10)).  If you want to include the final 4 (normally guest) slots, set to 20 (0x14).
        </Description>
        <Include patch="Expand load and save data" />
        <Location file="SCUS_942_21" offset="40F00,40F54,40FA8,40FFC,41050,410A4" offsetMode="RAM" mode="DATA">
            00
        </Location>
        <Location file="SCUS_942_21" offset="42B14" offsetMode="RAM" mode="ASM">
            j       @clear_bench
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141D00" offsetMode="RAM" mode="DATA" label="address_bench_menu_text">
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141DC0" offsetMode="RAM" mode="DATA" label="address_bench_menu_select_text_entries">
            08 07
            08 07
            08 07
            08 07
            08 07
            08 07
            08 07
            08 07
            08 07
            08 07
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141DD8" offsetMode="RAM" mode="DATA" label="address_bench_menu_entry_empty_text">
            E3 04 8D 0E 30 33 37 3C 8E E3 00 FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141E00" offsetMode="RAM" mode="DATA" label="address_triangle_menu_text">
            E3 00 12 37 28 30 F8 
            E3 00 0A 25 2C 2F 2C 37 3C F8 
            E3 00 0C 2B 24 31 2A 28 FA 13 32 25 F8 
            E3 00 1B 28 30 32 39 28 FA 1E 31 2C 37 F8 
            E3 00 18 35 27 28 35 FA 1E 31 2C 37 F8 
            E3 00 0B 28 31 26 2B FA 1E 31 2C 37 F8 
            E3 00 1E 31 25 28 31 26 2B FA 1E 31 2C 37 FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141E60" offsetMode="RAM" mode="DATA" label="address_triangle_menu_select_text_entries">
            23 10 24 10 25 10 26 10 27 10 82 C8 83 C8
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141EF0" offsetMode="RAM" mode="DATA" label="address_bench_menu_is_empty_entry">
            01 01 01 01 01 01 01 01 01 01
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141EFB" offsetMode="RAM" mode="DATA" label="address_bench_menu_status">
            00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141EFC" offsetMode="RAM" mode="DATA" label="address_bench_menu_init">
            01 00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141EFE" offsetMode="RAM" mode="DATA" label="address_bench_menu_selection">
            FF FF
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141E70" offsetMode="RAM" mode="DATA" label="address_bench_menu_data" replaceLabels="true">
            80 01 00 00 68 00 B0 00 18 01 20 00 68 00 B0 00 
            00 00 00 00 68 00 B0 00 00 00 00 00 
            80 C8 
            09 00 
            01 00 00 00 
            FF FF FF FF 
            1C 24 11 80 
            01 00 00 00 
            @address_bench_menu_init 
            @address_bench_menu_selection
            00 00 
            4D 00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141EB0" offsetMode="RAM" mode="DATA" label="address_bench_menu_select_text">
            1E 31 2C 37 FA 31 24 30 28 5F FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F00" offsetMode="RAM" mode="DATA" label="address_unbench_inner_menu_text">
            1E 31 25 28 31 26 2B F8 0D 2C 36 30 2C 36 36 FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F14" offsetMode="RAM" mode="DATA" label="address_unbench_inner_menu_select_text_entries">
            83 C8 26 10
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F1A" offsetMode="RAM" mode="DATA" label="address_unbench_inner_menu_status">
            00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F1C" offsetMode="RAM" mode="DATA" label="address_unbench_inner_menu_init">
            01 00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F1E" offsetMode="RAM" mode="DATA" label="address_unbench_inner_menu_selection">
            FF FF
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F20" offsetMode="RAM" mode="DATA" label="address_unbench_inner_menu_data" replaceLabels="true">
            80 01 00 00 40 00 30 00 E0 00 54 00 40 00 30 00
            00 00 00 00 40 00 30 00 00 00 00 00
            81 C8
            01 00
            01 00 00 00
            FF FF FF FF
            1C 24 11 80
            01 00 00 00
            @address_unbench_inner_menu_init
            @address_unbench_inner_menu_selection
            00 00
            4E 00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F60" offsetMode="RAM" mode="DATA" label="address_restore_unit_array">
            00 00 00 00 00 00 00 00 00 00
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141F6C" offsetMode="RAM" mode="DATA" label="address_bench_unit_select_text">
            16 32 39 28 FA 38 31 2C 37 FA 29 35 32 30 FA 24 26 37 2C 39 28 FA 33 24 35 37 3C FA 37 32 FA 25 28 31 26 2B 5F F8
            1E 31 2C 37 FA 2F 32 36 28 36 FA 0E 21 19 FA 24 31 27 FA 13 19 5F FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="141FAC" offsetMode="RAM" mode="DATA" label="address_unbench_unit_select_text">
            16 32 39 28 FA 38 31 2C 37 FA 29 35 32 30 FA 25 28 31 26 2B FA 37 32 FA 24 26 37 2C 39 28 FA 33 24 35 37 3C 5F FE
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="114594" offsetMode="RAM">
            5C
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="18A5B4" offsetMode="RAM" mode="DATA" replaceLabels="true">
            @address_triangle_menu_select_text_entries
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="18A5C8" offsetMode="RAM" mode="DATA" replaceLabels="true">
            @address_bench_menu_select_text_entries
            @address_unbench_inner_menu_select_text_entries
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="18C0DE,18C0EE" offsetMode="RAM" mode="DATA">
            80
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="18C0F6" offsetMode="RAM" mode="DATA">
            06
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="142000" offsetMode="RAM" mode="ASM" inputFile="unit_bench_world.asm" />
        <Location file="WORLD_WORLD_BIN" offset="E4BB8,ECFD0,112520" offsetMode="RAM" mode="ASM">
            jal     @display_menu_text_entry_outer
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="E50E8" offsetMode="RAM" mode="ASM">
            jal     @find_text_entry_outer
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="EBD60" offsetMode="RAM" mode="ASM">
            lui     t1, %hi(@address_bench_menu_status)
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="EBD7C" offsetMode="RAM" mode="ASM">
            lbu     t1, %lo(@address_bench_menu_status) (t1)
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="EBD84" offsetMode="RAM" mode="ASM">
            or      s6, s6, t1
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1140D0" offsetMode="RAM" mode="ASM">
            jal     @formation_screen_frame_processing_start_hook
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="114344" offsetMode="RAM" mode="ASM">
            jal     @formation_screen_frame_processing_action_check_hook
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="15B0FF" offsetMode="RAM" mode="DATA" label="address_is_bench_join">
            00
        </Location>
        <Location file="BATTLE_BIN" offset="15B100" offsetMode="RAM" mode="ASM" inputFile="unit_bench_battle.asm" />
        <Location file="EVENT_REQUIRE_OUT" offset="1C6834" mode="ASM" offsetMode="RAM">
            jal     @handle_post_battle_party_unit_bench
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6E14" mode="ASM" offsetMode="RAM">
            li      a2, 0
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C6E40" offsetMode="RAM" mode="ASM">
            jal     @post_battle_get_join_status
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C7014" offsetMode="RAM" mode="ASM">
            jal     @post_battle_join
        </Location>
        <Location file="MENU_TUTO1_SCR" offset="95,10B">06</Location>
        <Location file="MENU_TUTO1_SCR" offset="9B">6C</Location>
        <Location file="MENU_TUTO1_SCR" offset="AD">7C</Location>
        <Location file="MENU_TUTO1_SCR" offset="BF">8C</Location>
        <Location file="MENU_TUTO1_SCR" offset="D1">9C</Location>
        <Location file="MENU_TUTO1_SCR" offset="E3">AC</Location>
        <Location file="MENU_TUTO4_SCR" offset="5C">8C</Location>
        <Location file="MENU_TUTO4_SCR" offset="65">06</Location>
        <Variable name="Roster Size" bytes="1" default="10" specific="WORLD_WORLD_BIN:120924" offsetMode="RAM" />
    </Patch>
    <Patch name="Jump single ability">
        <Description>
            Makes an ability function as Jump.  It should be placed in a normal skillset with Default action menu.  Recommended to use the default ability ID, 0x018A Level Jump2.
            Range (Both level and vertical) are based on Lancer job level.
        </Description>
        <Location file="BATTLE_BIN" offset="15D4B0" mode="ASM" offsetMode="RAM">
            #   Parameters:
            #       a0 = Ability ID
            #       t2 = Battle unit data pointer
            #   Returns:
            #       s0 = CT (if jump)
            #       a2 = sp + 16 (if jump)
            #       v0 = (v0 less than 8)
            #   Preserve: v1
            @set_jump_ability_data:
        
                    li      t0, %JumpAbilityID
                    bne     a0, t0, set_jump_ability_data_end
                    li      t1, 50
        
                    lbu     t0, 0x38(t2)
                    la      ra, 0x80181ad8
                    divu    t1, t0
                    mflo    s0
                    addiu   a2, sp, 16
        
                set_jump_ability_data_end:
                    jr      ra
                    sltiu   v0, v0, 8
        
        
            @ai_ability_data_setting_hook:
                    bne     v0, zero, ai_ability_data_setting_hook_end
                    move    t0, s1
        
                    lui     v0, 0x8019
                    ori     a0, t1, 0x5a90
                    j       @generic_jump_hook
                    ori     v0, t1, 0x5c00
        
        
                ai_ability_data_setting_hook_end:
                    jr      ra
                    nop
        
        
            #   Parameters:        
            #       v0 = Normal return location
            #       a0 = Alternate return location
            #       t0 = Ability ID
            @generic_jump_hook:

                    li      t1, %JumpAbilityID
                    bne     t0, t1, generic_jump_hook_end
                    nop
        
                    move    v0, a0
        
                generic_jump_hook_end:
                    jr      v0
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="174328" mode="DATA" offsetMode="RAM">
            .if     %UsingTLW
            .else
                28
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="179E38" mode="ASM" offsetMode="RAM">
            sw      a0, 0x0c(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="179EA4" mode="ASM" offsetMode="RAM">
                li      s4, 8               #   Range
                lbu     t3, 0xd9(sp)
                li      t4, 0x34
                beq     t3, t4, jump_range_end
                li      s0, 8               #   Vertical
        
                lw      t3, 0x0c(sp)        #   Unit
                nop
                lbu     t3, 0xd8(t3)        #   Geomancer/Lancer Job Level
                nop
                andi    t3, t3, 0x0f        #   Lancer Job Level
        
                move    s4, t3
                move    s0, t3
        
            jump_range_end:
                j       0x80179f1c
                nop
        </Location>    
        <Location file="BATTLE_BIN" offset="17A934" mode="ASM" offsetMode="RAM">
            lhu     t0, 0x12(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="17A950" mode="ASM" offsetMode="RAM">
            lui     a0, 0x8017
            j       @generic_jump_hook
            ori     a0, a0, 0xaa18
        </Location>
        <Location file="BATTLE_BIN" offset="17AB18" mode="ASM" offsetMode="RAM">
            lhu     t0, 0x12(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="17ABA0" mode="ASM" offsetMode="RAM">
            lui     a0, 0x8017
            j       @generic_jump_hook
            ori     a0, a0, 0xabb8
        </Location>
        <Location file="BATTLE_BIN" offset="17C498" mode="ASM" offsetMode="RAM">
            lhu     t0, 0x12(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="17C53C" mode="ASM" offsetMode="RAM">
            lui     a0, 0x8017
            j       @generic_jump_hook
            ori     a0, a0, 0xc730
        </Location>
        <Location file="BATTLE_BIN" offset="181838" mode="ASM" offsetMode="RAM">
            sw      s0, 0x0c(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="181AB4" mode="ASM" offsetMode="RAM">
            lw      t2, 0x0c(sp)
            jal     @set_jump_ability_data
            addiu   v0, a0, -0x0196
        </Location>
        <Location file="BATTLE_BIN" offset="18B32C" mode="ASM" offsetMode="RAM">
            .if     %UsingTLW
                sb      a1, 0x38d8(at)
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="18B610" mode="ASM" offsetMode="RAM">
            lui     t1, 0x8018
        </Location>
        <Location file="BATTLE_BIN" offset="18B674" mode="ASM" offsetMode="RAM">
            lhu     t0, 0x12(sp)
            j       @generic_jump_hook
            ori     a0, t1, 0xb7dc
        </Location>
        <Location file="BATTLE_BIN" offset="1958C4" mode="ASM" offsetMode="RAM">
            lbu     t2, 2(s4)
            lui     t1, 0x8019
            sb      t2, 0(s0)
        </Location>
        <Location file="BATTLE_BIN" offset="195920" mode="ASM" offsetMode="RAM">
            jal     @ai_ability_data_setting_hook
        </Location>
        <Location file="BATTLE_BIN" offset="195B6C" mode="ASM" offsetMode="RAM">
            lbu     t0, 0xd8(s2)
            li      t1, 0x34
            beq     t2, t1, 0x80195b80
            li      v0, 8
            andi    v0, t0, 0x0f
        </Location>
        <Location file="BATTLE_BIN" offset="195B98" mode="ASM" offsetMode="RAM">
            j       0x80195968
        </Location>
        <Variable name="Jump Ability ID" bytes="2" default="018A" symbol="true" />
        <Variable name="Jump Formula" bytes="1" default="64" file="BATTLE_BIN" offset="18B7E0" offsetMode="RAM" />
        <Variable name="Using TLW" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Skillset learned ability fix">
        <Description>When determining usable abilities in a skillset, finds the learned abilities based on the job instead of skillset ID.  
        Fixes an issue where changing the skillset for a generic job to an unused skillset resulted in those abilities all being auto-learned.</Description>
        <Location file="BATTLE_BIN" offset="1818D0" mode="ASM" offsetMode="RAM">
            .label  skillsetIndexTest, 0x8018193c

                lbu     t2, 6(s0)               #   Flags
                lbu     t1, 0xb8(sp)            #   Skillset
                
                .if     %UsingTLW
                    jal     0x80152750
                .endif
                
                andi    t2, t2, 0x20
                bne     t2, zero, skillsetIndexTest
                li      a1, -1
        
                li      t0, 0x4a                #   Job ID
                li      t4, 0x80061e98
            job_loop:
                lbu     t2, 0(t4)               #   Job skillset
                addiu   t4, t4, 0x30
                beq     t2, t1, past_job_loop
                li      t3, 1
                addiu   t0, t0, 1
                sltiu   t2, t0, 0x5d
                bne     t2, zero, job_loop
                li      t3, 0
        
            past_job_loop:
                bne     t3, zero, skillsetIndexTest
                addiu   a1, t0, -0x4a
        
                lbu     t2, 0x0012(s0)          #   Unit primary skillset
                lbu     t3, 0x0162(s0)          #   Unit special skillset
                beq     t2, t1, skillsetIndexTest
                li      a1, 0
                beq     t3, t1, skillsetIndexTest
                nop
                j       skillsetIndexTest
                li      a1, -1
        </Location>
        <Location file="BATTLE_BIN" offset="19AA68" mode="ASM" offsetMode="RAM">
                lbu     t2, 6(a0)               #   Flags
                li      t0, 0x4a                #   Job ID
                andi    t2, t2, 0x20
                bne     t2, zero, return_known
                lui     t4, 0x8006
        
                ori     t4, t4, 0x1e98
            job_loop:
                lbu     t2, 0(t4)               #   Job skillset
                addiu   t4, t4, 0x30
                beq     t2, a1, past_job_loop
                li      t3, 1
                addiu   t0, t0, 1
                sltiu   t2, t0, 0x5d
                bne     t2, zero, job_loop
                li      t3, 0
        
            past_job_loop:
                move    t5, a1
                bne     t3, zero, skillset_index_lookup
                addiu   a1, t0, -0x4a
        
                lbu     t2, 0x0012(a0)          #   Unit primary skillset
                lbu     t3, 0x0162(a0)          #   Unit special skillset
                beq     t2, t5, skillset_index_lookup
                li      a1, 0
                beq     t3, t5, skillset_index_lookup
                nop
        
            return_known:
                j       0x8019ab00
                li      v0, 1
        
            skillset_index_lookup:
                sll     v0, a1, 1
                addu    v0, v0, a1
                addu    v0, v0, a0
                addiu   v0, v0, 0x99
                sra     a0, a2, 3
        </Location>
        <Location file="BATTLE_BIN" offset="152754" mode="ASM" offsetMode="RAM">
            .if     %UsingTLW
                addiu   v0, t1, -5
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="152770" mode="ASM" offsetMode="RAM">
            .if     %UsingTLW
                jr      ra
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="152798,1527D4" mode="ASM" offsetMode="RAM">
            .if     %UsingTLW
                lui     t3, 0x8018
            .endif
        </Location>
        <Location file="BATTLE_BIN" offset="1527AC,1527E8" mode="ASM" offsetMode="RAM">
            .if     %UsingTLW
                j       0x80152770
                ori     ra, t3, 0x1954
            .endif
        </Location>
        <Variable name="Using TLW" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Skillset menu hardcoding fix">
        <Description>
            Skillset menu actions based on action menu instead of being hardcoded to skillset ID.  
            Fixes some issues resulting from changing action menus on generic skillsets.  
            Similar to (and mutually exclusive with) Generic Skillset Fix / Skillset Behaviors hack, but based on action menu.
            
            Skillset notes:
                Throw: AI sees ability index 0 as Shuriken, 1 as Ball, and only checks one other ability for everything else.  If changing the Throw skillset, keep this ability order.
        </Description>
        <Location file="BATTLE_BIN" offset="1411B4" mode="ASM" offsetMode="RAM">
                li      v0, 0x12
                lui     t7, 0x8016
                lbu     a2, 0x5ee4(t7)
                lbu     a3, 0x5ee6(t7)
                lhu     t1, 0x5ee8(t7)
                lui     t8, 0x8017
                sw      a2, -0x67d8(t8)
                beq     a2, v0, near_end
                move    t6, a3
        
                andi    v1, a2, 0xfe
                li      v0, 0xfe
                beq     v1, v0, near_end
                li      t0, 0 
        
                lui     t3, 0x8015
                addiu   a0, t3, -0x2c88
                lw      v1, 0x5f84(t7)
                li      a1, 0
         
            loop_start:
                addu    at, t3, a1
                lhu     v0, -0x2c8c(at)
                lw      t9, 0(a0)
                bne     v1, v0, loop_bottom
                li      t2, 0xff
                beq     a2, t2, no_menu_selection
                li      t2, 105
                beq     v1, t2, menu_105
                li      t2, 25
                beq     v1, t2, menu_default
                slti    t2, v1, 100
                bne     t2, zero, menu_alternate
                nop
        
            menu_default:
                addu    v0, t9, a3
                lbu     a2, 1(v0)
                j       past_loop
                li      a3, 0xfffe
        
            menu_alternate:
                addu    v0, t9, a2
                lbu     a2, 1(v0)
                j       past_loop_next
                li      v0, 0x1f
        
            no_menu_selection:
                lbu     a2, 0(t9)
                j       past_loop_next
                li      v0, 0x1f
        
            loop_bottom:
                addiu   a0, a0, 8
                addiu   t0, t0, 1
                slti    v0, t0, 0x1f
                bne     v0, zero, loop_start
                addiu   a1, a1, 8
        
            past_loop:
                li      v0, 0x1f
        
            past_loop_next:
                bne     t0, v0, store_primary
                slti    v0, t0, 16
                li      a2, 7
        
            store_primary:
                beq     v0, zero, store_primary_alternate
                addiu   v0, a2, -5
                sw      a2, -0x2cec(t3)
                j       set_selected
                li      v0, 1
    
            menu_105:
                lw      a2, 0x5f78(t7)
                lbu     v0, 0x5f7c(t7)
                li      a3, 0xfffe
                j       past_loop
                sb      v0, -0x67cc(t8)
    
            store_primary_alternate:
                sltiu   v0, v0, 2
                beq     v0, zero, set_selected
                li      v0, 1
                sb      a2, -0x67ca(t8)
    
            set_selected:
                bne     a2, v0, past_set_selected
                li      v0, 12
                li      t9, 1
                sb      t9, -0x2cdc(t3)
        
            past_set_selected:
                bne     a2, v0, find_skillset
                slti    v0, a3, 3
                beq     v0, zero, find_setting_alternate
                addiu   v0, a3, -1
                sll     v0, v0, 1
                addiu   v1, t1, 12
                j       setting
                addu    a2, v0, v1
        
            find_setting_alternate:
                addiu   a2, a3, 13
        
            setting:
                li      a3, 0xfffe
                li      t1, 0xfffe
                sw      a2, -0x2cec(t3)
        
            find_skillset:
                sw      a2, -0x67d8(t8)
                andi    v1, a3, 0xfe
                li      v0, 0xfe
                beq     v1, v0, end
                andi    v0, a3, 0xff
                addu    at, t8, t6
                lbu     a3, 0x4060(at)
        
                lui     t7, 0x8006
                addu    t7, t7, a3
                lbu     t7, 0x5cb4(t7)
        
                #   Action menus: 08 Attack, 0B Defend, 0C Equip Change, 0D Unknown, 04 Elements, 09 Jump
                li      t9, 4
                beq     t7, t9, action_menu_check_true
                li      t9, 8
                beq     t7, t9, action_menu_check_true
                li      t9, 9
                beq     t7, t9, action_menu_check_true
                li      t9, 11
                beq     t7, t9, action_menu_check_true
                li      t9, 12
                beq     t7, t9, action_menu_check_true
                li      t9, 13
                bne     t7, t9, action_menu_check_false
                li      v0, 0xbc
        
            action_menu_check_true:
                sh      zero, -0x67d2(t8)
                j       past_action_menu_check
                li      t1, 0xfffe
        
            action_menu_check_false:
                bne     a3, v0, past_bc_check
                nop
                lw      v0, -0x67c0(t8)
                nop
                bne     v0, zero, past_bc_check
                li      v0, 0xfffe
                lhu     t1, -0x1bd8(t1)
                j       past_action_menu_branch_2
                nop
        
            past_bc_check:
                lw      v0, 0x4048(t8)
                sll     v1, t1, 1
                addu    v1, v1, v0
                lhu     v0, 0(v1)
                nop
                andi    t1, v0, 0x01ff
        
            past_action_menu_check:
                li      v0, 0xfffe
    
            past_action_menu_branch_2:
                sb      a3, -0x67d3(t8)
                sw      a3, -0x2cf4(t3)
                beq     t1, v0, end
                andi    v0, a3, 0xff
        
                #   Action menu check (Item Inventory, Weapon Inventory, Draw Out)
                li      t9, 1
                beq     t7, t9, action_menu_second_block
                li      t9, 2
                beq     t7, t9, action_menu_second_block
                li      t9, 7
                bne     t7, t9, action_menu_second_else
                nop
    
            action_menu_second_block:
                j       past_action_menu_second_check
                sb      t1, -0x67cc(t8)
        
            action_menu_second_else:
                sh      t1, -0x67d2(t8)
        
            past_action_menu_second_check:
                sw      t1, -0x2cf0(t3)
    
            near_end:
                andi    v0, a3, 0xff
        
            end:
                sll     v0, v0, 8
                or      v0, a2, v0
                sll     v1, t1, 0x10
                jr      ra
                or      v0, v0, v1
        </Location>
        <Location file="BATTLE_BIN" offset="18B458" mode="ASM" offsetMode="RAM">
                lui     t0, 0x8019
                lbu     t1, 0x11(sp)
                addu    at, t0, v0
                lbu     v0, -0x0734(at)
                lbu     v1, 0x38c3(t0)
                andi    v0, v0, 0x3f
                sb      v0, 0x38cd(t0)
                lui     t2, 0x8006
                
                .if     %UsingTLW
                    jal     0x80152cc0
                .else
                    bne     v1, zero, 0x8018b490
                .endif
                
                addu    t2, t2, t1
        </Location>
        <Location file="BATTLE_BIN" offset="18B498" mode="ASM" offsetMode="RAM">
                lbu     s2, 0x5cb4(t2)
                li      v0, 7
                bne     s2, v0, 0x8018b4b4
        </Location>
        <Location file="BATTLE_BIN" offset="181D30" mode="ASM" offsetMode="RAM">
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="181D3C" mode="ASM" offsetMode="RAM">
                move    a1, s0
        </Location>
        <Location file="BATTLE_BIN" offset="181EBC" mode="ASM" offsetMode="RAM">
                move    v0, s5
        </Location>
        <Variable name="Using TLW" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Defend and Equip Change treated as Default skillset">
        <Description>
            This patch should be applied along with Skillset Menu Hardcoding Fix if changing Defend and Equip Change into Default skillsets in FFTPatcher.
            AI doesn't use abilities in Defend or Equip Change skillsets.
        </Description>
        <Location file="BATTLE_BIN" offset="67594,67598" mode="DATA" offsetMode="RAM">
            D8510780
        </Location>
        <Location file="BATTLE_BIN" offset="675F4,675F8" mode="DATA" offsetMode="RAM">
            58550780
        </Location>
        <Location file="BATTLE_BIN" offset="13628C" mode="ASM" offsetMode="RAM">
            b   0x801362a4
        </Location>
        <Location file="BATTLE_BIN" offset="1692B9" mode="DATA" offsetMode="RAM">
            01 01
        </Location>
    </Patch>
    <Patch name="Save between battles after formation screen">
        <Description>
            Allows saving between battles AFTER the formation screen.  
            Loading a save made this way will still load the formation screen, but with the latest changes saved. 
            Saving before the formation screen still functions as normal.
        </Description>
        <Location file="WORLD_WLDCORE_BIN" offset="6858C" mode="ASM" offsetMode="RAM">
                addiu   sp, sp, -24
                sw      s0, 12(sp)
                sw      ra, 16(sp)
                lui     s0, 0x8005
                lw      v0, 0x7870(s0)
                lw      t2, -0x26b0(s0)
                beq     v0, zero, end
                lui     t3, 0xfffe
        
                ori     t3, t3, 0xffff
                and     t2, t2, t3
                jal     0x80106660
                sw      t2, -0x26b0(s0)
                jal     0x8012f0f8
                li      a0, 2
                sw      zero, 0x7870(s0)
                li      v0, 1
                
            end:
                lw      ra, 16(sp)
                lw      s0, 12(sp)
                addiu   sp, sp, 24                
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1067B8" mode="ASM" offsetMode="RAM">
                nop
                nop
                nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12F7EC" mode="ASM" offsetMode="RAM">
                li      t0, 1
                beq     v0, t0, 0x8012f810
                sltiu   v0, v0, 1
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="12F170" mode="ASM" offsetMode="RAM">
                sh      zero, -0x2e6c(at)
                sh      zero, -0x27b4(at)
                sh      zero, -0x27b8(at)
                sh      zero, -0x2e64(at)
                sh      zero, -0x27b0(at)
                sh      zero, -0x2e54(at)
                sh      zero, -0x2e88(at)
                sh      zero, -0x2e84(at)
                sh      zero, -0x2e78(at)
                sh      zero, -0x2e80(at)
                sh      zero, -0x2e7c(at)
                sh      zero, -0x2e74(at)
                sh      t0, -0x2bc8(at)
                sh      zero, -0x2aac(at)
                sh      zero, -0x2a24(at)
                sh      zero, -0x2918(at)
                sh      zero, -0x26d0(at)
                sh      zero, -0x2e2c(at)
                sh      zero, -0x2df0(at)
                sh      t0, -0x2dd8(at)
        
                li      t2, 2
                bne     s0, t2, 0x8012f210
                li      t3, 0xc01e
                lui     t2, 0x8019
                j       0x8012f210
                sh      t3, 0x3e18(t2)
        </Location>
    </Patch>
    <Patch name="Gained JP functions as if Gained JP UP was always active">
        <Description>
            All gained JP gets the boost that Gained JP UP would have given.  Gained JP UP has no effect.
        </Description>
        <Location file="BATTLE_BIN" offset="17E9A4" mode="ASM" offsetMode="RAM">
            nop
	    </Location>
        <Location file="BATTLE_BIN" offset="18DEC0" mode="ASM" offsetMode="RAM">
		    nop
	    </Location>
    </Patch>
    <Patch name="Double JP Gain">
        <Location file="BATTLE_BIN" offset="17E944" mode="ASM" offsetMode="RAM">
                lbu     v0, 5(s2)
        </Location>
        <Location file="BATTLE_BIN" offset="17E954" mode="ASM" offsetMode="RAM">
                sll     s1, s1, 1
        </Location>
    </Patch>
    <Patch name="Equippable R/S/M only limited by job innates">
        <Description> 
            Similar to Inherent R/S/M limitation hack, but checks full ability IDs.
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="122D6C" mode="ASM" offsetMode="RAM">
                lui     t3, 0x8006
                sll     t2, a3, 1
                addu    t2, t2, a3
                sll     t2, t2, 4
                addu    t2, t2, t3

                li      t4, 0
            loop:
                lbu     t3, 0x10ba(t2)
                lbu     t5, 0x10b9(t2)
                sll     t3, t3, 8
                or      t3, t3, t5
    
                xor     t5, t3, a2
                sltiu   t5, t5, 1
                sll     t5, t5, 14
                or      a2, a2, t5
    
                addiu   t2, t2, 2
                sltiu   t5, t4, 4
                bne     t5, zero, loop
                addiu   t4, t4, 1
    
                j       0x80122dd0
                addiu   s0, s0, 1
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="124B08" mode="ASM" offsetMode="RAM">
                lui     t1, 0x8006
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="124B28" mode="ASM" offsetMode="RAM">
                lui     t1, 0x8006

                sll     t0, v1, 1
                addu    t0, t0, v1
                sll     t0, t0, 4
                addu    t0, t0, t1

                li      t2, 0
            loop:
                lbu     t1, 0x10ba(t0)
                lbu     t3, 0x10b9(t0)
                sll     t1, t1, 8
                or      t1, t1, t3

                move    t3, a0
                li      t4, -1
            inner_loop:
                lhu     t5, 0x62(t3)
                addiu   t4, t4, 1
                xor     t6, t5, t1
                sltu    t6, zero, t6
                sll     t6, t6, 31
                sra     t6, t6, 31
                and     t5, t5, t6
                sh      t5, 0x62(t3)

                sltiu   t5, t4, 3
                bne     t5, zero, inner_loop
                addiu   t3, t3, 2

                addiu   t0, t0, 2
                sltiu   t3, t2, 4
                bne     t3, zero, loop
                addiu   t2, t2, 1

                j       0x80124bf8
                sll     v0, s4, 2
        </Location>
    </Patch>
    <Patch name="All (and only) player human units can find items on moving">
        <Description>
            All player human units can find items on moving without needing Move-Find Item (which now has no function).  Enemy units cannot find items.
        </Description>
        <Location file="BATTLE_BIN" offset="1800A8" mode="ASM" offsetMode="RAM">
                jal     0x801802c8
                srl     a2, a2, 0x0f
        
                lbu     t0, 6(s2)
                lbu     t1, 0x1ba(s2)
                lbu     t3, 0(v0)
                andi    t0, t0, 0x20
                andi    t1, t1, 0x30
                andi    t2, t3, 0x01
                sltiu   t2, t2, 1
                or      t0, t0, t1
                or      t0, t0, t2

                beq     t0, zero, end
                li      t4, 4

                andi    t2, t3, 0x02
                bne     t2, zero, end
                li      t4, 8
                
                li      t4, 0
                
            end:
                or      s1, s1, t4
                nop
        </Location>
    </Patch>
    <Patch name="Blade Grasp dodge percentage is (Brave * Multiplier) / 1024 and only affects certain weapons">
        <Description>
            Blade grasp only affects weapons with ID from 0x01 up to Max Weapon ID.  
            By default, this includes all edged weapons: daggers and swords.
            Example multiplier values:
                0x400 (vanilla) -> 1024 / 1024 (full)
                0x200 (half)    -> 512 / 1024 (1/2)
                0x180 (default) -> 384 / 1024 (3/8)
                0x100 (quarter) -> 256 / 1024 (1/4)
        </Description>
        <Location file="BATTLE_BIN" offset="18D050" mode="ASM" offsetMode="RAM">
                lui     t0, 0x8019
                lbu     t1, 0x38f6(t0)
                lbu     t2, 0x38d8(t0)
                addiu   sp, sp, -24
                andi    t1, t1, 0x10
                addiu   t2, t2, -1
                sltiu   t2, t2, %MaxWeaponID
                sltu    t1, zero, t1
                sltu    t2, zero, t2
                and     t1, t1, t2
                beq     t1, zero, end
                sw      ra, 16(sp)
                lw      a0, 0x2d98(t0)
                li      t3, 100
                lbu     t1, 0x24(a0)
                lw      t2, 0x2d90(t0)
                li      a1, %Multiplier
                multu   t1, a1
                mflo    t1
                addiu   t1, t1, 512
                srl     t1, t1, 10
                subu    t1, t3, t1
                jal     0x8018d388
                sh      t1, 0x2a(t2)
                bne     v0, zero, end
                lui     t0, 0x8019
                lw      t1, -0x0a04(t0)
                lw      t2, 0x2d90(t0)
                bne     t1, zero, end
                li      t3, 11
                sb      zero, 0(t2)
                sb      t3, 2(t2)
                li      t3, 0x01c3
                sh      t3, 14(t2)
        
            end:
                lw      ra, 16(sp)
                addiu   sp, sp, 24
                jr      ra
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="18D384" mode="ASM" offsetMode="RAM">
                li      a1, 1024
                lui     v0, 0x8019
                lw      v0, -0x0a04(v0)
                lbu     t0, 0x24(a0)
                bne     v0, zero, end
                multu   t0, a1
                mflo    t0
                addiu   t0, t0, 512
                srl     a1, t0, 10
                j       0x8005e0cc
                li      a0, 100

            end:
                jr      ra
                nop
        </Location>
        <Variable name="Multiplier" bytes="2" default="180" symbol="true" />
        <Variable name="Max Weapon ID" bytes="1" default="2F" symbol="true" />
    </Patch>
    <Patch name="Abandon multiplies evasion by 1024 / Divisor">
        <Description>
            Normally evasion is doubled.  Example divisor values:
                0x400 = 1024 -> (Evasion * 1.0)
                0x333 = 819 -> (Evasion * 1.25)
                0x2AB = 683 -> (Evasion * 1.5)
                0x249 = 585 -> (Evasion * 1.75)
                0x200 = 512 -> (Evasion * 2.0)
                0x100 = 256 -> (Evasion * 4.0)
        </Description>
        <Location file="BATTLE_BIN" offset="18537C" mode="ASM" offsetMode="RAM">
                addiu   sp, sp, -24
                sw      ra, 16(sp)

                lw      a0, 0x80192d98
                jal     0x8018130c
                nop

                bne     v0, zero, end
                lui     t0, 0x8019

                lw      t1, 0x2d98(t0)
                lw      t2, 0x2d90(t0)
                lbu     t1, 0x8e(t1)
                lbu     t3, 0x38dc(t0)
                andi    t1, t1, 0x10
                beq     t1, zero, end
                li      t4, 0x01c1
    
                #   Base hit * (Divisor / 1024) to cause Evasion * (1024 / Divisor)
                li      t5, %Divisor
                multu   t3, t5
                mflo    t3
                addiu   t3, t3, 512
                srl     t3, t3, 10
    
                sb      t3, 0x38dc(t0)
                sh      t4, 14(t2)
    
            end:    
                lw      ra, 16(sp)
                addiu   sp, sp, 24
                jr      ra
                nop         
        </Location>
        <Variable name="Divisor" bytes="2" default="200" symbol="true" />
    </Patch>
    <Patch name="Require Sword and Require Materia Blade check only first weapon">
        <Location file="SCUS_942_21" offset="5C5DC" mode="ASM" offsetMode="RAM">
            sw      ra, 0x1c(sp)
            addiu   a0, s1, 0x33
            jal     0x8005e644
            li      a1, 3
            move    a0, s1
            jal     0x8005b880
            addiu   a1, s0, 1
            li      t3, 0
            sb      zero, 0x184(s1)
            addiu   a0, s1, 0x33
            li      t2, 0
            addu    v0, s1, t2

            lbu     a1, 0x1a(v0)
            bne     t3, zero, 0x8005c688
            sltiu   t4, a1, 0x80
            beq     t4, zero, 0x8005c688
            li      v0, 0x20
            li      t3, 1
        </Location>
        <Location file="SCUS_942_21" offset="5C7D4" mode="ASM" offsetMode="RAM">
            li      s0, 999
        </Location>
        <Location file="SCUS_942_21" offset="5C824" mode="ASM" offsetMode="RAM">
            bne     v0, zero, 0x8005c60c
        </Location>
        <Location file="SCUS_942_21" offset="5C8D4" mode="ASM" offsetMode="RAM">
            nop
        </Location>
    </Patch>
    <Patch name="ENTD Job Level also applies to Job and secondary skillset job">
        <Description>
            ENTD Job Level (next to Job Unlocked) also applies to current job and the job containing the secondary skillset, if applicable.
        </Description>
        <Include patch="Rewrite Init Party Battle Data Routine" />
        <Location file="SCUS_942_21" offset="5B1C0" mode="ASM" offsetMode="RAM">
            @job_unlocked_loop:
                    addiu   sp, sp, -56
                    sw      s0, 16(sp)
                    sw      s1, 20(sp)
                    sw      s2, 24(sp)
                    sw      s3, 28(sp)
                    sw      s4, 32(sp)
                    sw      s5, 36(sp)
                    sw      s6, 40(sp)
                    sw      s7, 44(sp)
                    sw      ra, 48(sp)
        
                    move    s0, a0
                    move    s1, a2
        
                    lbu     s3, 8(a1)               #   Job Unlocked
                    lbu     s4, 9(a1)               
                    li      s2, 0                   #   Loop Counter
                    andi    s4, s4, 0x0f            #   Job Level

                outer_loop:    
                    sltiu   t1, s3, 20
                    beq     t1, zero, outer_loop_bottom
                    andi    t1, s3, 1
        
                    srl     s7, s3, 1
                    addu    s7, s0, s7
                    lbu     a0, 0xd2(s7)
        
                    sltiu   t1, t1, 1
                    sll     t1, t1, 2
                    sllv    a1, s4, t1

                    #   Save job level
                    #or      v0, a0, a1
                    jal     @calc_job_level
                    nop
                    sb      v0, 0xd2(s7)
        
                    li      s5, 0
                    lui     s6, 0x8006
         
                    sll     t0, s3, 2
                    addu    t0, t0, s3
                    sll     t0, t0, 1
                    addu    s6, t0, s6

                inner_loop:
                    lbu     a1, 0x60ba(s6)
                    bne     s3, zero, handle_job_level
                    addu    t1, s0, s5
                    li      a1, 0
        
                handle_job_level:
                    lbu     a0, 0xd2(t1)
        
                    jal     @calc_job_level
                    nop
        
                    addiu   s6, s6, 1
                    addu    t1, s0, s5
                    addiu   s5, s5, 1
                    sltiu   t0, s5, 10
                    bne     t0, zero, inner_loop
                    sb      v0, 0xd2(t1)
        
                outer_loop_bottom:
                    sltiu   t0, s2, 2
                    addiu   s2, s2, 1
                    addu    s3, s1, s2
                    lbu     s3, 0(s3)
                    bne     t0, zero, outer_loop
                    nop
        
                    j       0x800173f4
                    nop
        
                    #lw      ra, 48(sp)
                    #lw      s7, 44(sp)
                    #lw      s6, 40(sp)
                    #lw      s5, 36(sp)
                    #lw      s4, 32(sp)
                    #lw      s3, 28(sp)
                    #lw      s2, 24(sp)
                    #lw      s1, 20(sp)
                    #lw      s0, 16(sp)
                    #jr      ra
                    #addiu   sp, sp, 56
        </Location>
        <Location file="SCUS_942_21" offset="5B2B4" mode="ASM" offsetMode="RAM">
            @calc_jobs_mod: 
                    addiu   sp, sp, -32
                    sw      s0, 16(sp)
                    sw      s1, 20(sp)
                    sw      s2, 24(sp)
                    sw      ra, 28(sp)
        
                    move    s0, a0
                    move    s1, a1
        
                    addiu   a0, s0, 0xd2
                    jal     0x8005e644
                    li      a1, 10

                    bne     s1, zero, handle_job_data
                    li      a1, 0
        
                    jal     0x8005b5dc
                    move    a0, s0
        
                    addiu   a0, s0, 0x96
                    jal     0x8005ded8
                    li      a1, 0
        
                    li      t0, 0x20
                    sb      t0, 6(s0)
                    j       end
                    sb      zero, 0x13(s0)
        
                handle_job_data:
                    lbu     t0, 10(s1)
                    lbu     t1, 0(s0)
                    move    a0, s0
        
                    beq     t0, t1, store_current_job_index
                    li      t2, 0
                    addiu   t2, t0, -0x4a
        
                store_current_job_index:
                    sb      t2, 13(sp)
        
                    jal     0x8005b5dc
                    sb      t0, 3(s0)
        
                    lbu     t0, 30(s1)
                    li      t1, 0xff
                    beq     t0, t1, handle_secondary_skillset
                    li      s2, 0
                    beq     t0, zero, handle_secondary_skillset
                    lui     t4, 0x8006
        
                    sb      t0, 0x12(s0)
                    sb      t1, 0x189(s0)
        
                handle_secondary_skillset:
                    li      t3, -1
                    lbu     t0, 11(s1)
                    li      t1, 0xfe
                    lbu     t2, 6(s0)
                    bne     t0, t1, find_secondary_job
                    andi    t2, t2, 0x20
                    #li      s2, 0
                    #bne     t2, zero, store_secondary_skillset
                    #li      t0, 0
                    bne     t2, zero, store_secondary_skillset
                    li      t0, 0
                    j       store_secondary_skillset
                    li      s2, 1
        
                find_secondary_job:
                    lbu     t2, 0(s0)               #   Base class
                    li      t1, 0x4a                #   Job ID
                    sltiu   t5, t2, 0x80
                    beq     t5, zero, job_loop
                    sll     t5, t2, 1
                    addu    t5, t5, t2
                    sll     t5, t5, 4
                    addu    t5, t5, t4
                    lbu     t2, 0x10b8(t5)          #   Base class skillset
                    nop
                    beq     t2, t0, store_secondary_skillset
                    li      t3, 0
          
                job_loop:
                    lbu     t2, 0x1e98(t4)          #   Job skillset
                    addiu   t4, t4, 0x30
                    beq     t2, t0, store_secondary_skillset
                    addiu   t3, t1, -0x4a
                    addiu   t1, t1, 1
                    sltiu   t2, t1, 0x5d
                    bne     t2, zero, job_loop
                    li      t3, -1
        
                store_secondary_skillset:
                    sb      t0, 0x13(s0)
                    sb      t3, 14(sp)
    
                    #   Jobs unlocked
                    lbu     a3, 1(s1)               #   ENTD Flags
                    nop
        
                    andi    t1, a3, 0x20
                    bne     t1, zero, store_jobs_unlocked
                    li      a1, 0
        
                    move    a0, s0
                    move    a1, s1
                    jal     @job_unlocked_loop
                    addiu   a2, sp, 12
    
                    #   Clear bard/dancer job levels if necessary
                    lbu     a3, 1(s1)               #   ENTD Flags
                    lbu     t2, 0xda(s0)
                    lbu     t3, 0xdb(s0)
                    andi    t0, a3, 0x40
                    beq     t0, zero, check_dancer
                    andi    t2, t2, 0xf0
                    sb      t2, 0xda(s0)
        
                check_dancer:
                    andi    t0, a3, 0x80
                    beq     t0, zero, calc_jobs_unlocked
                    andi    t3, t3, 0x0f
                    sb      t3, 0xdb(s0)
    
                calc_jobs_unlocked:
                    addiu   a0, s0, 0xd2
                    jal     0x8005dc14
                    move    a1, a3
                    move    a1, v0
    
                store_jobs_unlocked:
                    jal     0x8005ded8
                    addiu   a0, s0, 0x96
    
                handle_random_secondary_skillset:
                    beq     s2, zero, end
                    lui     s2, 0x8006
                    jal     0x8005b500
                    move    a0, s0
                    beq     v0, zero, store_secondary_skillset_redux
                    li      t0, 0
                    sll     t1, v0, 1
                    addu    t1, t1, v0
                    sll     t1, t1, 4
                    addu    t1, t1, s2
                    lbu     t1, 0x10b8(t1)
                    lbu     t2, 0x12(s0)
                    nop
                    beq     t1, t2, store_secondary_skillset_redux
                    li      t0, 0
        
                    move    t0, t1
    
                store_secondary_skillset_redux:
                    beq     t0, zero, end
                    sb      t0, 0x13(s0)
        
                    addiu   t3, v0, -0x4a
                    sb      t3, 14(sp)
                    move    a0, s0
                    move    a1, s1
                    jal     @job_unlocked_loop
                    addiu   a2, sp, 12
    
                end:
                    j       0x8001231c
                    nop
        
                    #lw      ra, 28(sp)
                    #lw      s2, 24(sp)
                    #lw      s1, 20(sp)
                    #lw      s0, 16(sp)
                    #jr      ra
                    #addiu   sp, sp, 32

            #   a0, a1 -> Job levels to max   
            @calc_job_level:
                    andi    t3, a1, 0x0f
                    andi    t4, a0, 0x0f
        
                    sltu    t5, t3, t4
                    beq     t5, zero, calc_high_job_level
                    move    t5, t3
                    move    t5, t4
      
                calc_high_job_level:      
                    sltiu   t3, t5, 1
                    or      t5, t5, t3
    
                    andi    t3, a1, 0xf0
                    andi    t4, a0, 0xf0
                    sltu    t6, t3, t4
                    beq     t6, zero, calc_final_job_level
                    move    t6, t3
                    move    t6, t4
    
                calc_final_job_level:    
                    sltiu   t3, t6, 1
                    sll     t3, t3, 4
                    or      t6, t6, t3
                    jr      ra
                    or      v0, t5, t6
        </Location>
    </Patch>
    <Patch name="Call if battle" hidden="true">
        <Location file="SCUS_942_21" offset="5E8E8" mode="ASM" offsetMode="RAM">
            jr      ra
            
            # v1 = Function pointer, a0 to a3 = args
            @call_if_battle:
                    lui     t0, 0x8006
                    lw      t1, 0x7000(t0)
                    ori     t2, t0, 0x8888
                    bne     t1, t2, call_if_battle_end
                    move    t0, ra
                    move    t0, v1
    
                call_if_battle_end:
                    jr      t0
                    nop
        </Location>
    </Patch>
    <Patch name="Skillset index functions" hidden="true">
        <Location file="BATTLE_BIN" offset="159BB0" mode="ASM" offsetMode="RAM">
            #   a0 = Unit, a1 = Skillset ID
            @find_skillset_index:
                    lbu     t2, 6(a0)               #   Flags
                    li      t5, 0x4a                #   Job ID
                    andi    t2, t2, 0x20
                    bne     t2, zero, find_skillset_index_end
                    li      v0, -1

                    la      t4, 0x80061e98
                find_skillset_index_job_loop:
                    lbu     t2, 0(t4)               #   Job skillset
                    addiu   t4, t4, 0x30
                    beq     t2, a1, find_skillset_index_past_job_loop
                    li      t3, 1
                    addiu   t5, t5, 1
                    sltiu   t2, t5, 0x5d
                    bne     t2, zero, find_skillset_index_job_loop
                    li      t3, 0

                find_skillset_index_past_job_loop:
                    bne     t3, zero, find_skillset_index_end
                    addiu   v0, t5, -0x4a

                    lbu     t2, 0x0012(a0)          #   Unit primary skillset
                    lbu     t3, 0x0162(a0)          #   Unit special skillset
                    beq     t2, v0, find_skillset_index_end
                    li      v0, 0
                    beq     t3, v0, find_skillset_index_end
                    nop
                    #j       find_skillset_index_end
                    li      v0, -1
        
                find_skillset_index_end:
                    jr      ra
                    nop
        

            #   a0 = Unit, a1 = Skillset index, a2 to a3 = Learned abilities bytes
            @store_active_learned_abilities:
                    sll     v0, a1, 1
                    addu    v0, v0, a1
                    addu    v0, v0, a0
                    sb      a2, 0x99(v0)
                    jr      ra
                    sb      a3, 0x9a(v0)


            #   a0 = Unit, a1 = Skillset ID, a2 to a3 = Learned abilities bytes
            @store_active_learned_abilities_by_skillset_id:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)

                    #   Does not change a0, a1, a2, a3.
                    jal     @find_skillset_index
                    nop
        
                    #   Skip if skillset has no learned abilities bytes
                    slti    t2, v0, 0
                    bne     t2, zero, store_active_learned_abilities_unit_end
                    nop
        
                    jal     @store_active_learned_abilities
                    move    a1, v0
        
                store_active_learned_abilities_unit_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop
        </Location>
    </Patch>
    <Patch name="Enhanced ENTD">
        <Description>
            ENTD can now specify extra parameters for units.
            
            Experience: Multiplier for raw stats (HP, MP, SP, PA, MA) or calculated stats (C-EV, Move, Jump) (X / 128)
            First (left) unknown: Inflict status ID to apply to unit.  0x80 flag being set makes it Innate.  Cancel creates status immunity.
            Second (right) unknown: Flags for stat multiplier (HP, MP, SP, PA, MA, C-EV, Move, Jump)
            
            Extra (empty) ENTD unit slots can be used to specify additional parameters.
            The extra slot will have Unit set to 00 and Unit ID to be equal to an earlier unit's Unit ID.
            Then the following properties on the extra slot will modify the original unit:
            
            Name and Job: Extra inflict status IDs
            
            Skills: Innates (overwrites job innates) (Primary and Secondary combine as first Innate with Primary as low byte and Secondary as high byte)
            Equipment: Elemental Weak, Strengthen, Absorb, Nullify, Half
            
            Bonus Money: HP Raw Stat Bonus
            War Trophy: MP Raw Stat Bonus
            AI Target Unit ID: SP Raw Stat Bonus (fourths)
            Target X: PA Raw Stat Bonus (fourths)
            Target Y: MA Raw Stat Bonus (fourths)
            
            Experience: C-EV Bonus
            Left Unknown: Move Bonus
            Right Unknown: Jump Bonus
            
            Faith: CT (if not set to Random)
            Top-right flags (including team): Primary skillset known abilities (if non-zero)
            Bottom-right flags: Secondary skillset known abilities (if non-zero)
        </Description>
        <Include patch="Call if battle" />
        <Include patch="Skillset index functions" />
        <Include patch="Rewrite ENTD Data Calculation Routine" />
        <Location file="BATTLE_BIN" offset="159640" mode="DATA" offsetMode="RAM" label="address_unit_mult">
            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        </Location>
        <Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="address_unit_elem">
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
            00 00 00 00 00
        </Location>
        <Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="address_unit_extra_stat_addends">
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
            00 00 00
        </Location>
        <Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="address_unit_extra_inflict_status">
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
            00 00
        </Location>
        <Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="address_unit_starting_ct">
            00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        </Location>
        <Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="address_unit_raw_stat_addends">
            00 00 00 00 00
        </Location>
        <Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="address_unit_stat_offset">
            04 43 02 3A 01 3B 00 00
        </Location>
        <Location file="BATTLE_BIN" mode="ASM" offsetMode="RAM">
            .label      @copy_bytes, 0x8005e254
            .label      @clear_data, 0x8005e644
            
            #   s0 = Unit, s1 = ENTD Unit
            @stat_hook:
                    #lbu     t0, 0x25(s1)        #   InflictStatusID
                    lbu     t5, 0x27(s1)        #   Flags
        
                    addiu   t1, s0, 0x72        #   Unit Raw Stats
                    lbu     t3, 0x1c(s1)        #   Stat Multiplier
                    li      t2, 0x80
                    li      t7, 0x08
                    lui     t9, %hi(@address_unit_raw_stat_addends)
                    lbu     t4, 1(s0)
                    lui     t8, %hi(@address_unit_mult)
                    sltiu   t6, t4, 21
                    beq     t6, zero, stat_hook_stat_loop
                    addu    t8, t8, t4
                    sb      t3, %lo(@address_unit_mult)(t8)
        
                stat_hook_stat_loop:    
                    #   Load Raw stat value
                    lbu     t4, 0(t1)
                    lbu     t0, 1(t1)
                    lbu     t6, 2(t1)
                    sll     t0, t0, 8
                    sll     t6, t6, 16
                    or      t4, t4, t0
                    or      t4, t4, t6
        
                    lbu     t0, %lo(@address_unit_raw_stat_addends)(t9)
                    sltiu   t8, t2, 0x40
                    bne     t8, zero, stat_hook_stat_add
                    sll     t0, t0, 12      #   0.25 increments (PA, MA, SP)
                    sll     t0, t0, 2       #   1 increments (HP, MP)
                stat_hook_stat_add:
                    addu    t4, t4, t0
        
                    #   Skip multiplier if flag not set
                    and     t0, t5, t2
                    beq     t0, zero, stat_hook_stat_loop_store
                    nop
        
                    #   Raw stat value * Stat Multiplier / 128 (Rounded)
                    multu   t4, t3
                    mflo    t4
                    #addiu   t4, t4, 64
                    srl     t4, t4, 7
      
                stat_hook_stat_loop_store:
                    #   Store Raw stat value
                    sb      t4, 0(t1)
                    srl     t4, t4, 8
                    sb      t4, 1(t1)
                    srl     t4, t4, 8
                    sb      t4, 2(t1)
       
                stat_hook_stat_loop_bottom:
                    addiu   t1, t1, 3
                    addiu   t9, t9, 1
                    bne     t2, t7, stat_hook_stat_loop
                    srl     t2, t2, 1

                    #   Clear raw stat addends
                    la      a0, @address_unit_raw_stat_addends
                    #jal     @clear_data
                    j       @clear_data
                    li      a1, 5

                    #jr      ra
                    #nop


            #   s1 = Unit
            @equip_hook:        
                    addiu   sp, sp, -8
                    sw      ra, 4(sp)

                    lbu     t0, 0x169(s1)        #   InflictStatusID
                    lbu     t5, 0x16b(s1)        #   Flags
        
                    lbu     t1, 1(s1)
                    lui     t6, 0x8006        
                    sll     t1, t1, 1
                    lui     t7, %hi(@address_unit_extra_inflict_status)
                    addu    t7, t7, t1
                    li      t8, 0
    
                equip_hook_status_outer_loop:
                    andi    t4, t0, 0x80
                    andi    t0, t0, 0x7f
    
                    beq     t0, zero, equip_hook_status_outer_loop_bottom
                    sll     t2, t0, 2           #   InflictStatusID * 4
                    addu    t2, t2, t0          #   InflictStatusID * 5
                    addu    t0, t2, t0          #   InflictStatusID * 6
                    addu    t1, t6, t0
        
                    lbu     t0, 0x3fc4(t1)
                    li      t2, 0
                    andi    t0, t0, 0x10
        
                    bne     t4, zero, equip_hook_status_loop
                    addiu   t3, s1, 0x4e        #   Unit Innate Statuses
                    bne     t0, zero, equip_hook_status_loop
                    addiu   t3, s1, 0x53        #   Unit Immune Statuses
                    addiu   t3, s1, 0x58        #   Unit Current Statuses
        
                equip_hook_status_loop:
                    lbu     t0, 0(t3)           #   Unit Status value
                    lbu     t4, 0x3fc5(t1)      #   Inflict Status value
                    addiu   t1, t1, 1
                    or      t0, t0, t4          #   Combine values
                    sb      t0, 0(t3)           #   Store as Unit Status value
                    addiu   t2, t2, 1
                    sltiu   t0, t2, 5
                    bne     t0, zero, equip_hook_status_loop
                    addiu   t3, t3, 1
        
                equip_hook_status_outer_loop_bottom:
                    lbu     t0, %lo(@address_unit_extra_inflict_status)(t7)
                    addiu   t8, t8, 1
                    sltiu   t9, t8, 3
                    bne     t9, zero, equip_hook_status_outer_loop
                    addiu   t7, t7, 1
    
                equip_hook_stat:
                    lbu     t0, 1(s1)
                    lui     t1, %hi(@address_unit_mult)
                    sltiu   t2, t0, 21
                    beq     t2, zero, equip_hook_end
                    addu    t1, t1, t0
                    lbu     t3, %lo(@address_unit_mult)(t1)
        
                    lui     t6, %hi(@address_unit_extra_stat_addends)
                    sll     t7, t0, 1
                    addu    t7, t7, t0
                    addu    t6, t6, t7
    
                #equip_hook_evade:
                    #andi    t0, t5, 0x04
                    #lbu     t4, 0x43(s1)
                    #beq     t0, zero, equip_hook_move  
                    #nop
                    #multu   t4, t3
                    #mflo    t4
                    ##addiu   t4, t4, 64
                    #srl     t4, t4, 7
                    #sb      t4, 0x43(s1)
    
                #equip_hook_move:
                    #andi    t0, t5, 0x02
                    #lbu     t4, 0x3a(s1)
                    #beq     t0, zero, equip_hook_end
                    #nop
                    #multu   t4, t3
                    #mflo    t4
                    ##addiu   t4, t4, 64
                    #srl     t4, t4, 7
                    #sb      t4, 0x3a(s1)
        
                    la      t2, @address_unit_stat_offset
                    lbu     t0, 0(t2)
                    lbu     t1, 1(t2)
                equip_hook_extra_stat_loop:
                    lbu     t7, %lo(@address_unit_extra_stat_addends)(t6)
                    addu    t1, s1, t1
                    lbu     t4, 0(t1)
                    and     t0, t5, t0
                    beq     t0, zero, equip_hook_extra_stat_loop_store
                    addu    t4, t4, t7
                    multu   t4, t3
                    mflo    t4
                    #addiu   t4, t4, 64
                    srl     t4, t4, 7
                equip_hook_extra_stat_loop_store:
                    sb      t4, 0(t1)
        
                equip_hook_extra_stat_loop_bottom:
                    lbu     t0, 2(t2)
                    lbu     t1, 3(t2)
                    addiu   t6, t6, 1
                    bne     t0, zero, equip_hook_extra_stat_loop
                    addiu   t2, t2, 2
        
                equip_hook_elem:
                    lbu     t0, 1(s1)
                    la      t1, @address_unit_elem
                    sll     t2, t0, 2
                    addu    t0, t2, t0
                    addu    a0, t1, t0
        
                    #lbu     t1, 0(a0)
                    #lbu     t2, 1(a0)
                    #lbu     t3, 2(a0)
                    #lbu     t4, 3(a0)
                    #lbu     t5, 4(a0)
                    #sb      t1, 0x6d(s1)
                    #sb      t2, 0x6e(s1)
                    #sb      t3, 0x6f(s1)
                    #sb      t4, 0x70(s1)
                    #sb      t5, 0x71(s1)
        
                    addiu   a1, s1, 0x6d
                    jal     @copy_bytes
                    li      a2, 5
       
                equip_hook_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    nop


            #   s2 = Unit index; s7 = ENTD Unit; Return v0 = 1, a2 = 0
            @load_entd_pre_hook:
    
                    move    t6, sp
                    addiu   sp, sp, -8
                    sw      ra, 4(sp)
        
                    lbu     t4, 0x20(s7)        #   Original UnitID
                    lbu     t5, 0x0a(s7)        #   JobID
                    sw      zero, 0(t6)         #   (Default) Job pointer = 0 (no change to be made)
        
                    li      t2, 0xff
                    beq     t4, t2, load_entd_pre_hook_end
                    addiu   t0, s2, 1           #   Unit index
                    sltiu   t2, t0, 16
                    beq     t2, zero, load_entd_pre_hook_end
                    addiu   t1, s7, 0x28        #   ENTD Unit
        
                load_entd_pre_hook_loop:
                    lbu     t2, 0(t1)           #   BaseClass
                    lbu     t3, 0x20(t1)        #   UnitID
                    bne     t2, zero, load_entd_pre_hook_loop_bottom
                    lui     t2, 0x8006
                    bne     t3, t4, load_entd_pre_hook_loop_bottom
                    addiu   t2, t2, 0x10b8      #   Job data pointer
        
                    sll     t3, t5, 1           #   JobID * 2
                    addu    t3, t3, t5          #   JobID * 3
                    sll     t3, t3, 4           #   JobID * 48
                    addu    t3, t3, t2          #   Job pointer
                    sw      t3, 0(t6)
        
                    #   Copy innates - does not modify temp registers
                    addiu   a0, t3, 1
                    addiu   a1, t6, 4
                    jal     @copy_bytes
                    li      a2, 8
        
                    #   Copy elemental mods - does not modify temp registers
                    #addiu   a0, t3, 0x29
                    #addiu   a1, t6, 12
                    #jal     @copy_bytes
                    #li      a2, 4
        
                    #   Copy primary skillset
                    lbu     t7, 0x1d(t1)
                    addiu   a0, t1, 0x0b
                    sb      t7, 1(t3)
        
                    #   Copy innates - does not modify temp registers
                    addiu   a1, t3, 2
                    jal     @copy_bytes
                    li      a2, 7
        
                    #   Copy elemental mods - does not modify temp registers
                    #addiu   a0, t1, 0x12
                    #addiu   a1, t3, 0x29
                    #jal     @copy_bytes
                    #li      a2, 4
        
                    la      a1, @address_unit_elem
                    sll     t7, s2, 2
                    addu    t7, t7, s2
                    addu    a1, a1, t7
        
                    #   Copy elemental mods - does not modify temp registers
                    addiu   a0, t1, 0x12
                    jal     @copy_bytes
                    li      a2, 5
        
                    #   Copy raw stat addends
                    #   0x1f, 0x1e, 0x24, 0x21, 0x22
                    #addiu   a0, t1, 0x1e
                    #la      a1, @address_unit_raw_stat_addends
                    #jal     @copy_bytes
                    #li      a2, 5
                    la      t0, @address_unit_raw_stat_addends
                    lbu     t2, 0x1f(t1)
                    lbu     t3, 0x1e(t1)
                    lbu     t4, 0x24(t1)
                    lbu     t5, 0x21(t1)
                    lbu     t6, 0x22(t1)
                    sb      t2, 0(t0)
                    sb      t3, 1(t0)
                    sb      t4, 2(t0)
                    sb      t5, 3(t0)
                    sb      t6, 4(t0)
        
                    #   Copy extra addends (C-EV, Move, Jump)
                    la      t0, @address_unit_extra_stat_addends
                    sll     t2, s2, 1
                    addu    t2, t2, s2
                    addu    t0, t0, t2
        
                    lbu     t2, 0x1c(t1)
                    lbu     t3, 0x25(t1)
                    lbu     t4, 0x27(t1)
                    sb      t2, 0(t0)
                    sb      t3, 1(t0)
                    sb      t4, 2(t0)
        
                    #   Copy extra inflict statuses
                    la      t0, @address_unit_extra_inflict_status
                    sll     t2, s2, 1
                    addu    t0, t0, t2
        
                    lbu     t2, 2(t1)
                    lbu     t3, 10(t1)
                    sb      t2, 0(t0)
                    sb      t3, 1(t0)
        
                    #   Copy starting CT
                    lbu     t2, 7(t1)
                    la      t0, @address_unit_starting_ct
                    addu    t0, t0, s2
        
                    sltiu   t3, t2, 101
                    sub     t3, zero, t3
                    and     t2, t2, t3
        
                    sb      t2, 0(t0)
        
                    #   Break
                    j       load_entd_pre_hook_end
                    nop
        
                load_entd_pre_hook_loop_bottom:
                    addiu   t0, t0, 1
                    sltiu   t2, t0, 16
                    bne     t2, zero, load_entd_pre_hook_loop
                    addiu   t1, t1, 0x28

                load_entd_pre_hook_end:
                    li      a2, 0
                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    li      v0, 1


            #   s0 = Unit; s2 = Unit index; s7 = ENTD Unit
            @load_entd_post_hook:
                    move    t6, sp
                    addiu   sp, sp, -8
                    sw      ra, 4(sp)

                    lw      t3, 0(t6)       #   Job pointer
                    addiu   a0, t6, 4
                    beq     t3, zero, load_entd_post_hook_end
                    addiu   a1, t3, 1
        
                    #   Copy innates - does not modify temp registers
                    jal     @copy_bytes
                    li      a2, 8
        
                    #   Copy elemental mods - does not modify temp registers
                    #addiu   a0, t6, 12
                    #addiu   a1, t3, 0x29
                    #jal     @copy_bytes
                    #li      a2, 4
        
                    lbu     t4, 0x20(s7)        #   Original UnitID
                    li      t2, 0xff
                    beq     t4, t2, load_entd_post_hook_end
                    addiu   t0, s2, 1           #   Unit index
                    sltiu   t2, t0, 16
                    beq     t2, zero, load_entd_post_hook_end
                    addiu   t1, s7, 0x28        #   ENTD Unit
        
                load_entd_post_hook_loop:
                    lbu     t2, 0(t1)           #   BaseClass
                    lbu     t3, 0x20(t1)        #   UnitID
                    bne     t2, zero, load_entd_post_hook_loop_bottom
                    nop
                    bne     t3, t4, load_entd_post_hook_loop_bottom
                    nop
        
                    #   Faith - CT
                    #lbu     t2, 7(t1)
                    #nop
                    #sltiu   t3, t2, 101
        
                    #sub     t3, zero, t3
                    #and     t2, t2, t3
        
                    #beq     t3, zero, load_entd_post_hook_abilities
                    #nop
        
                    #sb      t2, 0x39(s0)
    
                load_entd_post_hook_abilities:
                    #   Learned abilities (primary)
                    lbu     a2, 0x01(t1)
                    lbu     a3, 0x18(t1)
                    move    a0, s0        
                    or      t2, a2, a3
                    beq     t2, zero, load_entd_post_hook_abilities_2
                    nop
        
                    lbu     a1, 0x12(s0)    #   Primary skillset
                    jal     @store_active_learned_abilities_by_skillset_id
                    nop
        
                load_entd_post_hook_abilities_2: 
                    #   Learned abilities (secondary)
                    lbu     a2, 0x23(t1)
                    lbu     a3, 0x26(t1)
                    move    a0, s0
                    or      t2, a2, a3
                    beq     t2, zero, load_entd_post_hook_end
                    nop
        
                    lbu     a1, 0x13(s0)    #   Secondary skillset
                    jal     @store_active_learned_abilities_by_skillset_id
                    nop
        
                    #   Break
                    j       load_entd_post_hook_end
                    nop
        
                load_entd_post_hook_loop_bottom:
                    addiu   t0, t0, 1
                    sltiu   t2, t0, 16
                    bne     t2, zero, load_entd_post_hook_loop
                    addiu   t1, t1, 0x28
        
                load_entd_post_hook_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 8
                    jr      ra
                    nop


            #   s2 = Unit index
            @starting_ct_hook:
                    la      t0, @address_unit_starting_ct
                    addu    t0, t0, s2
                    lbu     t0, 0(t0)
                    jr      ra
                    sb      t0, 0x39(v1)


            #   Return s2 = 0
            @clear_unit_extra_data:
                    li      s2, 0
                    la      a0, @address_unit_mult
                    j       @clear_data
                    li      a1, 257

                    #addiu   sp, sp, -8
                    #sw      ra, 4(sp)
               
                    #la      a0, @address_unit_mult
                    #jal     @clear_data
                    #li      a1, 21
        
                    #la      a0, @address_unit_elem
                    #jal     @clear_data
                    #li      a1, 105
        
                    #la      a0, @address_unit_raw_stat_addends
                    #jal     @clear_data
                    #li      a1, 5
        
                    #la      a0, @address_unit_extra_stat_addends
                    #jal     @clear_data
                    #li      a1, 63
        
                    #la      a0, @address_unit_extra_inflict_status
                    #jal     @clear_data
                    #li      a1, 42
        
                    #la      a0, @address_unit_starting_ct
                    #jal     @clear_data
                    #li      a1, 21
        
                    #lw      ra, 4(sp)
                    #addiu   sp, sp, 8
                    #jr      ra
                    #li      s2, 0
        </Location>
        <Location file="BATTLE_BIN" offset="17F944" mode="ASM" offsetMode="RAM">
                    jal     @clear_unit_extra_data
        </Location>
        <Location file="BATTLE_BIN" offset="17F988" mode="ASM" offsetMode="RAM">
                    jal     @load_entd_pre_hook
                    sb      s2, 1(s0)
                    move    a0, s0
        </Location>
        <Location file="BATTLE_BIN" offset="17F9A8" mode="ASM" offsetMode="RAM">
                    jal     @load_entd_post_hook
                    nop
                    nop
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="182874" mode="ASM" offsetMode="RAM">
                    jal     @starting_ct_hook
        </Location>
        <Location file="SCUS_942_21" offset="5A9B4" mode="ASM" offsetMode="RAM">
            @unit_battle_init:
                    addiu   sp, sp, -0x20
                    sw      s0, 0x10(sp)
                    sw      s1, 0x14(sp)
                    sw      s2, 0x18(sp)
                    sw      ra, 0x1c(sp)
        
                    move    s0, a0
                    move    s1, a1
                    move    s2, a3
        
                    lui     t1, 0x8006
                    li      t0, 0x82
                    beq     s2, t0, past_init
                    sw      a2, 0x6200(t1)
        
                    jal     0x8005dfac
                    nop
                    move    a0, s0
                    jal     0x8005ac1c
                    move    a1, s1
                    bne     v0, zero, end
                    li      v0, -1
        
                past_init:
                    lbu     t0, 1(s1)
                    lbu     t1, 0(s1)
                    lbu     t2, 4(s1)
       
                    bne     s2, zero, calc
                    andi    t0, t0, 0x08
                    bne     t0, zero, end
                    li      v0, 0
                    sltiu   t1, t1, 4
                    beq     t1, zero, calc
                    nop
                    beq     t2, zero, end
                    li      v0, 0
       
                calc:
                    move    a0, s0
                    jal     0x8005b2b4
                    move    a1, s1
        
                    move    a0, s0
                    jal     0x8005ba70
                    move    a1, s1
        
                    jal     0x8005b7a0
                    move    a0, s0
        
                    jal     0x8005a400
                    move    a0, s0
        
                    jal     0x8005a520
                    move    a0, s0
        
                    lbu     t0, 2(s0)
                    li      t1, 0xff
                    sb      t0, 0x0c(sp)
                    bne     t0, t1, stat
                    li      t0, 0xfe
                    sb      t0, 2(s0)
        
                stat:
                    lui     v1, %hi(@stat_hook)
                    jal     @call_if_battle
                    addiu   v1, v1, %lo(@stat_hook)
    
                stat_orig:
                    move    a0, s0
                    jal     0x8005b880
                    li      a1, 0
        
                    lbu     t0, 0x0c(sp)
                    jal     0x8005c27c
                    sb      t0, 2(s0)
        
                    lbu     t0, 2(s0)
                    li      t1, 0x82
                    beq     s2, t1, past_entd_equip
                    sltiu   t0, t0, 20
                    bne     t0, zero, past_entd_equip
                    move    a0, s0
        
                    jal     0x8005bdf0
                    move    a1, s1
        
                past_entd_equip:
                    jal     0x8005ab00
                    move    a0, s0
        
                    jal     0x8005ab48
                    move    a0, s0
        
                    li      v0, 0

                end:
                    j       0x80012268
                    nop
        
                    #lw      ra, 0x1c(sp)
                    #lw      s2, 0x18(sp)
                    #lw      s1, 0x14(sp)
                    #lw      s0, 0x10(sp)
                    #jr      ra
                    #addiu   sp, sp, 0x20
        </Location>
        <Location file="SCUS_942_21" offset="5AFC0" mode="ASM" offsetMode="RAM">
                    #li      s0, 0
        </Location>
        <Location file="SCUS_942_21" offset="5B010" mode="ASM" offsetMode="RAM">
                    #j   0x80016d3c
                    #nop
        </Location>
        <Location file="SCUS_942_21" offset="5B018" mode="ASM" offsetMode="RAM">
            @equip_outer_hook:
                    move    s1, a0
                    sw      s0, 0x10(sp)
                    move    s0, a1
                    
                    lui     v1, %hi(@equip_hook)
                    j       @call_if_battle
                    addiu   v1, v1, %lo(@equip_hook)
        </Location>
        <Location file="SCUS_942_21" offset="5C5CC" mode="ASM" offsetMode="RAM">
                    sw      ra, 0x1c(sp)
                    jal     @equip_outer_hook
                    sw      s1, 0x14(sp)
                    lw      ra, 0x1c(sp)
        </Location>
    </Patch>
    <Patch name="Defense Up and Defend status multiply damage by Multiplier / 1024">
        <Description>
            Example multiplier values:
            0x400 (full)    -> 1024 / 1024 (1)
            0x2AB (default) -> 683 / 1024 (~2/3)
            0x200 (half)    -> 512 / 1024 (1/2)
            0x100 (quarter) -> 256 / 1024 (1/4)
        </Description>
        <Location file="BATTLE_BIN" offset="1862CC" mode="ASM" offsetMode="RAM">
                    lui     t0, 0x8019
                    lw      t1, 0x2d98(t0)
                    li      t2, %Multiplier
                    lbu     t3, 0x90(t1)
                    lbu     t4, 0x58(t1)
                    andi    t3, t3, 0x08
                    andi    t4, t4, 0x02
                    or      t3, t3, t4
                    beq     t3, zero, end
                    nop
        
                    lh      t4, 0x38ce(t0)
                    nop
                    mult    t4, t2
                    mflo    t4
                    addiu   t4, t4, 512
                    srl     t4, t4, 10
                    sh      t4, 0x38ce(t0)
    
                end:
                    jr      ra
                    nop
        </Location>
        <Variable name="Multiplier" bytes="2" default="2AB" symbol="true" />
    </Patch>
    <Patch name="Stat variation">
        <Description>
            Base stats for PA and HP vary based on Brave, while MA and MP vary based on Faith.  Starting job stat multipliers also cause further variation.
            Also includes "Rewrite ENTD Data Calculation Routine", with the same options.
        </Description>
        <Include patch="Rewrite ENTD Data Calculation Routine" />
        <Location file="SCUS_942_21" offset="5A520" mode="ASM" offsetMode="RAM">
                    addiu   sp, sp, -24
                    sw      s0, 16(sp)
                    sw      ra, 20(sp)

                    move    s0, a0              #   Unit

                    lbu     t0, 3(a0)           #   JobID
                    addiu   a1, a0, 0x81        #   UnitGrowthPtr
                    li      a2, 10              #   Size

                    sll     t1, t0, 1           #   JobID * 2
                    addu    t1, t1, t0          #   JobID * 3
                    sll     t1, t1, 4           #   JobID * 48

                    lui     t0, 0x8006
                    addu    t0, t0, t1
                    jal     0x8005e254
                    addiu   a0, t0, 0x10c5      #   JobPtr + 13 (Growth offset)
    
                    jal     @stat_variation
                    move    a0, s0
    
                    j       0x80017d90
                    nop
        </Location>
        <Location file="SCUS_942_21" offset="5AF50" mode="ASM" offsetMode="RAM">
            #   a0 = Unit
            @stat_variation:        
                    addiu   sp, sp, -24
        
                    addiu   t3, a0, 0x72        #   Raw stat pointer
                    addiu   t4, a0, 0x82        #   Stat Multiplier pointer
        
                    addiu   t5, sp, 8
                    lbu     t0, 0x24(a0)        #   Brave
                    lbu     t1, 0x26(a0)        #   Faith
                    li      t2, %NegativeAddend
                    sll     t7, t0, 1
                    sll     t8, t1, 1
                    sh      t7, 0(t5)
                    sh      t8, 2(t5)
                    sh      t2, 4(t5)
                    sh      t0, 6(t5)
                    sh      t1, 8(t5)
        
                    li      t6, 0               #   Index
        
                stat_variation_loop:   
                    lhu     t7, 0(t5)
                    lbu     t8, 0(t4)

                    #   Load Raw stat value
                    lbu     t0, 0(t3)
                    lbu     t1, 1(t3)
                    lbu     t2, 2(t3)
                    sll     t1, t1, 8
                    sll     t2, t2, 16
                    or      t0, t0, t1
                    or      t0, t0, t2
        
                    addiu   t7, t7, -%NegativeAddend    #   (Mod - NegativeAddend)
        
                    mult    t7, t8
                    mflo    t1                  #   (Mod - NegativeAddend) * StatMultiplier
        
                    li      t2, %Multiplier 
                    nop
                    mult    t1, t2
                    mflo    t1                  #   Addend = ((Mod - NegativeAddend) * StatMultiplier) * Multiplier

                    addu    t0, t0, t1          #   Stat + Addend
        
                    #   Store Raw stat value
                    sb      t0, 0(t3)
                    srl     t0, t0, 8
                    sb      t0, 1(t3)
                    srl     t0, t0, 8
                    sb      t0, 2(t3)
        
                    addiu   t3, t3, 3           #   Next Raw stat
                    addiu   t4, t4, 2           #   Next Stat Multiplier
        
                    addiu   t6, t6, 1
                    sltiu   t0, t6, 5
                    bne     t0, zero, stat_variation_loop
                    addiu   t5, t5, 2           #   Stat offset

                    jr      ra
                    addiu   sp, sp, 24
        </Location>
        <Variable name="Negative Addend" bytes="2" default="003C" symbol="true" />
        <Variable name="Multiplier" bytes="2" default="0008" symbol="true" />
    </Patch>
    <Patch name="EXP and JP only at end of battle">
        <Description>
            EXP and JP are only awarded at end of battle.
            EXP amount (per enemy) = MIN((Base Exp Gain variable + Enemy Level - Unit Level), 1)
            Variables:
                BaseExpGain: Used in above Experience formula (default 20).
                UseEnemyExp variable: Set to True to use the enemy experience ENTD value instead of 20 in the above calculation.
        </Description>
        <Location file="BATTLE_BIN" offset="15D520" mode="ASM" offsetMode="RAM">
            #   Parameters:
            #       a0 = Unit
            #       a1 = IsGuest

            @award_exp_hook:
                    addiu   sp, sp, -32
                    sw      s0, 4(sp)
                    sw      s1, 8(sp)
                    sw      s2, 12(sp)
                    sw      s3, 16(sp)
                    sw      s4, 20(sp)
                    sw      ra, 24(sp)

                    move    s0, a0
                    move    s4, a1
        
                    lbu     a0, 0x18a(s0)
                    jal     0x8008ce20
                    nop
                    jal     0x8007a6e4
                    move    a0, v0
                    move    s3, v0
        
                    li      s1, 0
                    la      s2, 0x801908cc
                award_exp_hook_loop:
                    #lbu     t0, 1(s2)           #   Unit index
                    #li      t1, 0xff
                    #beq     t0, t1, award_exp_hook_loop_bottom
                    move    a0, s2
                    jal     0x8005e1b0
                    li      a1, 0
                    lbu     t0, 0x1ba(s2)
                    beq     v0, zero, award_exp_hook_loop_bottom
                    andi    t0, t0, 0x30
                    beq     t0, zero, award_exp_hook_loop_bottom
                    nop
        
                    lbu     t1, 0x22(s2)        #   Enemy Level
                    lbu     t2, 0x22(s0)        #   Unit Level
                    #lbu     t3, 0x21(s0)        #   Unit Experience
        
                .if %UseEnemyExp
                    lbu     t0, 0x21(s2)        #   Enemy Experience
                    nop
                    beq     t0, zero, award_exp_hook_loop_check
                    nop
                .endif
    
                    li      t0, %BaseExpGain
        
                award_exp_hook_loop_check:
                    addu    t0, t0, t2
                    subu    t0, t0, t1
        
                    sltu    t1, zero, t0
                    bne     t1, zero, award_exp_hook_loop_gain
                    li      t1, 1
                    li      t0, 1
        
                award_exp_hook_loop_gain:
                    #addu    t3, t3, t0
                    #sb      t3, 0x21(s0)
        
                    #   Award EXP / #   Award JP?
                    #jal     0x8005d880
                    #move    a0, s0
        
                    lui     t2, 0x8019
                    sb      t1, 0x38e8(t2)
                    sb      t0, 0x38e7(t2)
        
                    #   Award EXP and JP
                    lbu     a0, 0x18a(s0)
                    jal     0x8017e7e4
                    addiu   a1, s3, 0x1b0
        
                    lui     t0, 0x8019
                    sb      zero, 0x38e8(t0)
        
                award_exp_hook_loop_bottom:
                    addiu   s1, s1, 1
                    sltiu   t0, s1, 21
                    bne     t0, zero, award_exp_hook_loop
                    addiu   s2, s2, 0x1c0

                award_exp_hook_past_loop:
                    move    a0, s0
                    jal     0x80059bb0
                    move    a1, s4
        
                    lw      ra, 24(sp)
                    lw      s4, 20(sp)
                    lw      s3, 16(sp)
                    lw      s2, 12(sp)
                    lw      s1, 8(sp)
                    lw      s0, 4(sp)
                    addiu   sp, sp, 32
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="17D114" mode="ASM" offsetMode="RAM">
                    sb      zero, 0x38e8(at)
        </Location>
        <Location file="EVENT_REQUIRE_OUT" offset="1C48D0" mode="ASM" offsetMode="RAM">
                    jal     @award_exp_hook
        </Location>
        <Variable name="BaseExpGain" bytes="1" default="14" symbol="true" />
        <Variable name="UseEnemyExp" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="EXP gained on level up rolls over into next level">
        <Description>
            Experience gained on level up rolls over into next level.
        </Description>
        <Location file="SCUS_942_21" offset="5D888" mode="ASM" offsetMode="RAM">
            sw      s2, 0x0c(sp)
        </Location>
        <Location file="SCUS_942_21" offset="5D894" mode="ASM" offsetMode="RAM">
            lbu     s2, 0x21(a0)
            move    s0, a0
            sltiu   v0, s2, 100
            bne     v0, zero, 0x8005d8e0
            addiu   s2, s2, -100
        </Location>
        <Location file="SCUS_942_21" offset="5D8CC" mode="ASM" offsetMode="RAM">
            sb      s2, 0x21(s0)
            j       0x8005d89c
        </Location>
        <Location file="SCUS_942_21" offset="5D8F0" mode="ASM" offsetMode="RAM">
            lw      s2, 0x0c(sp)
            jr      ra
            addiu   sp, sp, 32
        </Location>
    </Patch>
    <Patch name="Random Fire only hits panels with units">
        <Description>
            Abilities flagged with Random Fire only hit panels with units.
            By default, affects Truth and Un-truth.
            
            Variables:
                ExcludeDefeatedUnits: Avoid hitting units that already count as defeated (KO, Petrify, etc.).  Set to False to disable.
        </Description>
        <Location file="BATTLE_BIN" offset="15D630" mode="ASM" offsetMode="RAM">
            @random_fire_hook:
                    addiu   sp, sp, -40
                    sw      a0, 4(sp)
                    sw      a1, 8(sp)
                    sw      a2, 12(sp)
                    sw      a3, 16(sp)
                    sw      t0, 20(sp)
                    sw      t1, 24(sp)
                    sw      ra, 28(sp)
        
                    beq     v0, zero, _random_fire_hook_change      
                    lui     t3, 0x800e
        
                    lbu     t3, 0x4e9c(t3)      #   mapMaxX
                    andi    t2, a1, 0x00ff      #   (tileIndex AND 0xff)
                    div     t2, t3                        
                    sra     a2, a1, 0x08        #   tileZ = tileIndex / 256
                    mflo    a1                  #   tileY = (tileIndex AND 0xff) / mapMaxX
                    mfhi    a0                  #   tileX = (tileIndex AND 0xff) % mapMaxX
                    jal     0x8007a2b8
                    nop

                    lw      ra, 28(sp)
                    beq     v0, zero, _random_fire_hook_change
                    nop
        
                    .if     %ExcludeDefeatedUnits        
                        lw      a0, 0x134(v0)
                        jal     0x8005e1b0
                        li      a1, 0
            
                        lw      ra, 28(sp)
                        beq     v0, zero, _random_fire_hook_end
                        nop
                    .else
                        j       _random_fire_hook_end
                        nop
                    .endif
        
                _random_fire_hook_change:
                    lui     ra, %hi(0x8017d76c)
                    addiu   ra, ra, %lo(0x8017d76c)
        
                _random_fire_hook_end:
                    lw      t1, 24(sp)
                    lw      t0, 20(sp)
                    lw      a3, 16(sp)
                    lw      a2, 12(sp)
                    lw      a1, 8(sp)
                    lw      a0, 4(sp)
                    
                    addu    v1, a3, t0
                    jr      ra
                    addiu   sp, sp, 40         
        </Location>
        <Location file="BATTLE_BIN" offset="17D750" mode="ASM" offsetMode="RAM">
                    andi    v1, a0, 0x7f
                    sb      v1, 5(a2)
                    jal     @random_fire_hook
                    addu    v1, a3, t0
                    addiu   a3, a3, 5
                    addiu   s0, s0, 1
        </Location>
        <Location file="BATTLE_BIN" offset="17D77C" mode="ASM" offsetMode="RAM">
                    beq     s0, zero, 0x8017d830
                    nop
                    jal     0x8002230c
                    nop
                    multu   v0, s0
                    mflo    v1
                    nop
        </Location>
        <Variable name="ExcludeDefeatedUnits" bytes="1" default="1" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Base stat decrease">
        <Description>
            Base speed is 5 for humans and 4 for monsters (instead of 6 and 5, respectively).  Base PA and MA use values of 3.25 and 4 instead of 4 and 5.
            Male and female soldier office recruits both have Broad Swords.
        </Description>
        <Location file="SCUS_942_21" offset="5A49C" mode="ASM" offsetMode="RAM">
            sll     s0, s0, 12
        </Location>
        <Location file="SCUS_942_21" offset="5E90C" mode="DATA" offsetMode="RAM">
            78 38 14 10 0D 9D BA FF 13 FF FF FF
            70 3C 14 0D 10 9D BA FF 13 FF FF FF
            78 3C 14 10 10 9D BA D0 13 FF FF FF
            8C 20 10 10 10 FF FF FF FF FF FF FF
        </Location>
    </Patch>
    <Patch name="Disable Train and Secret Hunt">
        <Description>
            Frees entire routine at 0x80187ca0.
        </Description>
        <Location file="BATTLE_BIN" offset="18B988" mode="ASM" offsetMode="RAM">
            nop
        </Location>
    </Patch>
    <Patch name="Axes/Flails/Bags maximum damage is doubled">
        <Location file="BATTLE_BIN" offset="185C34" mode="ASM" offsetMode="RAM">
            sll     s0, s0, 1
        </Location>
    </Patch>
    <Patch name="Axes/Flails/Bags have XA = (3/4)*PA to (5/4)*PA">
        <Location file="BATTLE_BIN" offset="185A9C" mode="ASM" offsetMode="RAM">
            lui     t0, 0x8019
            lbu     v0, 0x38d8(t0)
        </Location>
        <Location file="BATTLE_BIN" offset="185AC8" mode="ASM" offsetMode="RAM">
            sw      s1, 0x0c(sp)
            lw      v0, 0x2d94(t0)
        </Location>
        <Location file="BATTLE_BIN" offset="185C34" mode="ASM" offsetMode="RAM">
            sll     s1, s0, 1
            addu    s1, s1, s0
            srl     s1, s1, 2
            srl     t0, s0, 1
            multu   t0, v0
            mflo    v0
            srl     v0, v0, 15
            j       0x80185c78
            addu    v0, v0, s1
        </Location>
        <Location file="BATTLE_BIN" offset="185C88" mode="ASM" offsetMode="RAM">
            lw      s1, 0x0c(sp)
            jr      ra
            addiu   sp, sp, 0x18
        </Location>
    </Patch>
    <Patch name="Swords use XA = (PA + SP) / 2">
        <Location file="BATTLE_BIN" offset="185B48" mode="ASM" offsetMode="RAM">
            beq     v1, v0, 0x80185b94
        </Location>
    </Patch>
    <Patch name="Potions and Ethers use fractions of MaxHP or MaxMP">
        <Description>
            Formula = Max(Z * 10, (MaxHP or MaxMP) * (Multiplier) / 128)
            Examples: 100% is 0x80, 75% is 0x60, 50% is 0x40
        </Description>
        <Location file="BATTLE_BIN" offset="15AE04" offsetMode="RAM" mode="DATA" label="item_healing_multipliers">
            %PotionMultiplier
            %Hi-PotionMultiplier
            %X-PotionMultiplier
            %EtherMultiplier
            %Hi-EtherMultiplier
        </Location>
        <Location file="BATTLE_BIN" offset="15AE0C" offsetMode="RAM" mode="ASM">
            @calc_heal_amount:
                #   (a0 = Amount, a1 = Unit offset for Max value (0x2a = MaxHP, 0x2e = MaxMP), a2 = Store offset for Action (0x04 = HP Damage, 0x0a = MP Healing)
                    lui     t0, 0x8019
                    lbu     t1, 0x38db(t0)                  #   ItemID
                    lw      t2, 0x2d98(t0)                  #   Target
                    lw      t6, 0x2d90(t0)                  #   Action
                    sltiu   t3, t1, 5                       #   if (ItemID is less than 5) {
                    addu    t6, t6, a2
                    beq     t3, zero, calc_heal_amount_end
                    addu    t5, t2, a1
                    lhu     t5, 0(t5)                       #       MaxValue (Target.MaxHP or Target.MaxMP)
                    lui     t4, %hi(@item_healing_multipliers)
                    addu    t4, t4, t1
                    lbu     t4, %lo(@item_healing_multipliers) (t4)  
                    nop                                     #       Multiplier = *(Base pointer + ItemID)
                    multu   t4, t5
                    mflo    t4                      
                    srl     t4, t4, 7                       #       FractionAmount = (Multiplier * MaxValue) / 128
                    sltu    t5, a0, t4
                    beq     t5, zero, calc_heal_amount_end  #       if (Amount is less than FractionAmount)
                    nop
                    move    a0, t4                          #           Amount = FractionAmount
                                                            #   }
                calc_heal_amount_end:
                    move    v0, a0
                    jr      ra                              #   Store and return Amount
                    sh      v0, 0(t6)                       
                
                
            @item_hp_heal_hook:
                    li      a1, 0x2a
                    j       @calc_heal_amount
                    li      a2, 0x04
                
                
            @item_mp_heal_hook:
                    li      a1, 0x2e
                    j       @calc_heal_amount
                    li      a2, 0x0a
        </Location>
        <Location file="BATTLE_BIN" offset="18A284" offsetMode="RAM" mode="ASM">
                    jal     @item_hp_heal_hook
                    sll     a0, v0, 1
                    jal     0x80187350
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="1882BC" offsetMode="RAM" mode="ASM">
                    sll     a0, v0, 1
                    j       @item_mp_heal_hook
        </Location>
        <Variable symbol="true" bytes="1" default="14" name="Potion Multiplier" />
        <Variable symbol="true" bytes="1" default="28" name="Hi-Potion Multiplier" />
        <Variable symbol="true" bytes="1" default="3C" name="X-Potion Multiplier" />
        <Variable symbol="true" bytes="1" default="1E" name="Ether Multiplier" />
        <Variable symbol="true" bytes="1" default="3C" name="Hi-Ether Multiplier" />
    </Patch>
    <Patch name="Units survive KO countdown">
        <Description>
            KO units don't become crystal or treasure when the counter expires.  
            Instead, they are KO for the rest of the battle.  
            These units use differently colored KO stars.
            Applies to all units, player or enemy.
        </Description>
        <Location file="BATTLE_BIN" offset="18311C" mode="ASM" offsetMode="RAM">
            lbu     a0, 7(s0)
            bne     v0, zero, 0x80183204
            xori    a1, a0, 0xfe
            lbu     v0, 5(s0)
            lbu     a2, 6(s0)
            sltiu   a1, a1, 1
            andi    v0, v0, 0x04
            or      v0, v0, a1
            bne     v0, zero, 0x801832b4
            li      v0, 0
            andi    v0, a2, 0x09
        </Location>
        <Location file="BATTLE_BIN" offset="1831C0" mode="ASM" offsetMode="RAM">
            lbu     t0, 0x4e(s0)
            li      t1, -2
            ori     t0, t0, 0x20
            sb      t0, 0x4e(s0)
            
            lbu     a0, 0x18a(s0)
            jal     0x8007a724
            sb      t1, 7(s0)
            
            #sh      zero, 0x1d8(v0)
            
            jal     @misc_unit_order_change
            move    a0, v0
            
            j       0x801832b4
            li      v0, 1
        </Location>
        
        <Location file="BATTLE_BIN" offset="7EF40" mode="ASM" offsetMode="RAM">
            lw      t5, 0x0134(s1)
            lui     t6, 0x8009
            lb      a0, 7(t5)
        </Location>
        <Location file="BATTLE_BIN" offset="7EF98" mode="ASM" offsetMode="RAM">
            bltz    a0, 0x8007efc8
        </Location>
        <Location file="BATTLE_BIN" offset="7EFC8" mode="ASM" offsetMode="RAM">
            lbu     t0, 5(t5)
            lbu     t1, 0x49dc(t6)
            lbu     v1, 0x49f4(t6)
            lhu     v0, 0x02e2(s1)
            sb      t1, 0x12(s0)
            sb      v1, 0x13(s0)
            andi    t0, t0, 0x04
            sll     t0, t0, 5
            sb      t0, 0x410(s1)
        </Location>
        
        <Location file="BATTLE_BIN" offset="174E28" mode="ASM" offsetMode="RAM">
            lbu     t0, 7(s0)
        </Location>
        <Location file="BATTLE_BIN" offset="174E48" mode="ASM" offsetMode="RAM">
            li      t1, 0xfe
        </Location>
        <Location file="BATTLE_BIN" offset="174E54" mode="ASM" offsetMode="RAM">
            beq     t0, t1, 0x80174e60
        </Location>
        
        <Location file="BATTLE_BIN" offset="7A318" mode="ASM" offsetMode="RAM">
            lbu     t2, 1(v0)
            lbu     t3, 7(v0)
            beq     t2, t1, 0x8007a348
            li      t4, 0xfe
            lw      v0, 0x144(v1)
            beq     t3, t4, 0x8007a348
        </Location>
        
        <Location file="BATTLE_BIN" offset="17C21C" mode="ASM" offsetMode="RAM">
            lbu     t3, 7(a2)
            beq     v0, t2, 0x8017c270
            li      t4, 0xfe
        </Location>
        <Location file="BATTLE_BIN" offset="17C24C" mode="ASM" offsetMode="RAM">
            beq     t3, t4, 0x8017c270
        </Location>
        
        <Location file="BATTLE_BIN" offset="19D2A8" mode="ASM" offsetMode="RAM">
            lbu     t0, 7(a1)
            lbu     v1, 0x47(a1)
            lbu     t2, 0(a0)
            beq     v0, a3, 0x8019d2f0
            li      t1, 0xfe
            bne     v1, t2, 0x8019d2f0
            nop
            lbu     v1, 0x48(a1)
            lbu     v0, 2(a0)
            beq     t0, t1, 0x8019d2f0
        </Location>
        
        <Location file="BATTLE_BIN" offset="17BE14" mode="ASM" offsetMode="RAM">
            li      t0, 1
        </Location>
        <Location file="BATTLE_BIN" offset="17BE1C" mode="ASM" offsetMode="RAM">
            lbu     t1, 7(s1)
        </Location>
        <Location file="BATTLE_BIN" offset="17BE28" mode="ASM" offsetMode="RAM">
            li      t2, 0xfe
        </Location>
        <Location file="BATTLE_BIN" offset="17BE30" mode="ASM" offsetMode="RAM">
            beq     t1, t2, 0x8017be50
        </Location>
        <Location file="BATTLE_BIN" offset="17BE4C" mode="ASM" offsetMode="RAM">
            sltu    t0, zero, v0
        </Location>
        <Location file="BATTLE_BIN" offset="17BE64" mode="ASM" offsetMode="RAM">
            move    v0, t0
        </Location>
        
        <Location file="BATTLE_BIN" offset="865B0" mode="ASM" offsetMode="RAM">
            lw      t0, 0x134(a0)
        </Location>
        <Location file="BATTLE_BIN" offset="865DC" mode="ASM" offsetMode="RAM">
            li      t2, 0xfe
        </Location>
        <Location file="BATTLE_BIN" offset="865E4" mode="ASM" offsetMode="RAM">
            lbu     t1, 7(t0)
        </Location>
        <Location file="BATTLE_BIN" offset="8660C" mode="ASM" offsetMode="RAM">
            lbu     t3, 0x2dc(a0)
        </Location>
        <Location file="BATTLE_BIN" offset="86618" mode="ASM" offsetMode="RAM">
            beq     t1, t2, 0x80086630
        </Location>
        <Location file="BATTLE_BIN" offset="86620" mode="ASM" offsetMode="RAM">
            beq     t3, zero, 0x80086630
        </Location>
    
        <Location file="BATTLE_BIN" offset="15AEA0" mode="ASM" offsetMode="RAM">
            @misc_unit_order_change:
            #   a0 = miscUnit

                    lui     t0, %hi(0x80098a54)
                    addiu   t0, t0, %lo(0x80098a54)
                    li      t6, 0

                loop:   
                    lw      t1, 0(t0)
                    move    t7, t0

                    bne     t1, a0, loop_unit_check
                    nop
        
                    lw      t2, 0(t1)
                    b       loop_bottom
                    sw      t2, 0(t0)
        
                loop_unit_check:
                    beq     t1, zero, past
                    nop
        
                    lw      t3, 0x134(t1)
                    nop

                    lbu     t4, 7(t3)
                    li      t5, 0xfe
                    bne     t4, t5, loop_bottom
                    nop
        
                    sw      a0, 0(t0)
                    sw      t1, 0(a0)
        
                    b       past
                    li      t6, 1
        
                loop_bottom:
                    bne     t1, zero, loop
                    move    t0, t1
            
                past:
                    bne     t6, zero, end
                    nop
        
                    sw      a0, 0(t7)
                    sw      zero, 0(a0)
        
                end:
                    jr      ra
                    nop
        </Location>
    </Patch>
    <Patch name="Learn on Hit applies for any unlocked job">
        <Description>
            Units can learn abilities on hit so long as they have the appropriate job(s) unlocked.
            Units do not have to actively be in the job with the ability to learn it.
        </Description>
        <Location file="BATTLE_BIN" offset="18E6B8" mode="ASM" offsetMode="RAM">
            .label  @load_ability_from_skillset, 0x8005a568
            .label  @pass_fail_roll, 0x8005e0cc
            .label  @does_unit_have_status_in_set, 0x8005e1b0
            
            .label  @ability_array, 0x8005ebf0
            .label  @job_array, 0x800610b8
            .label  @used_ability_id, 0x80193d44

            @process_learn_on_hit:

                    addiu   sp, sp, -0x40
                    sw      s0, 0x18(sp)
                    sw      s1, 0x1c(sp)
                    #sw      s2, 0x20(sp)
                    sw      s3, 0x24(sp)
                    sw      s4, 0x28(sp)
                    sw      s5, 0x2c(sp)
                    sw      s6, 0x30(sp)
                    sw      s7, 0x34(sp)
                    sw      ra, 0x38(sp)

                    move    s6, a0          #   actingUnitIndex
                    move    s7, a1          #   learnedAbilityStorePtr
                    
                    .if     %RequireDifferentTeams
                        #   Find acting unit flags
                        jal     0x80180afc
                        nop
                        lbu     s3, 5(v0)
                    .endif

                    lui     t0, 0x8019
                    lw      t1, 0x38bc(t0)
                    lh      t2, %lo(@used_ability_id) (t0)

                    beq     t1, zero, process_learn_on_hit_end
                    li      v0, -1
                    
                    la      t0, @ability_array
                    sll     t2, t1, 3
                    addu    s5, t2, t0
                    lbu     t0, 3(s5)
                    li      s1, 0
                    
                    andi    t0, t0, 0x20
                    beq     t0, zero, process_learn_on_hit_end
                    li      v0, -1
                    
                    li      s4, 0
                    
                process_learn_on_hit_unit_loop:
                
                    beq     s6, s1, process_learn_on_hit_unit_loop_end
                    lui     t0, 0x8019
                    addiu   t0, t0, 0x08cc
                    addu    s0, s4, t0
                    lbu     t0, 0x189(s0)
                    lbu     t1, 6(s0)
                    andi    t0, t0, 0x02
                    beq     t0, zero, process_learn_on_hit_unit_loop_end
                    li      t0, 4
                    andi    t1, t1, 0x20
                    bne     t1, zero, process_learn_on_hit_unit_loop_end
                    sb      t0, 0x189(s0)
                    
                    move    a0, s0
                    jal     @does_unit_have_status_in_set
                    li      a1, 4
                    bne     v0, zero, process_learn_on_hit_unit_loop_end
                    move    a0, s0
                    
                    .if     %RequireDifferentTeams
                        lbu     t0, 5(s0)
                        andi    t1, s3, 0x30
                        andi    t0, t0, 0x30
                        beq     t0, t1, process_learn_on_hit_unit_loop_end
                        nop
                    .endif
                    
                    jal     @process_unit_learn_on_hit
                    li      a1, 0
                    
                    bltz    v0, process_learn_on_hit_unit_loop_end
                    lui     t0, %hi(@used_ability_id)
                    
                    lh      t2, %lo(@used_ability_id) (t0)
                    move    v0, s1
                    b       process_learn_on_hit_end
                    sh      t2, 0(s7)
                    
                process_learn_on_hit_unit_loop_end:
                
                    addiu   s1, s1, 1
                    sltiu   t0, s1, 21
                    bne     t0, zero, process_learn_on_hit_unit_loop
                    addiu   s4, s4, 0x1c0
                    
                    #   Default case - ability not learned
                    li      v0, -1
                    
                process_learn_on_hit_end:
                
                    lw      ra, 0x38(sp)
                    lw      s7, 0x34(sp)
                    lw      s6, 0x30(sp)
                    lw      s5, 0x2c(sp)
                    lw      s4, 0x28(sp)
                    lw      s3, 0x24(sp)
                    #lw      s2, 0x20(sp)
                    lw      s1, 0x1c(sp)
                    lw      s0, 0x18(sp)
                    jr      ra
                    addiu   sp, sp, 0x40


            #   a0 = unit, a1 = should learn ability (0 or 1)
            @process_unit_learn_on_hit:    
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
                    
                    move    t4, a0          #   unit
                    move    t5, a1          #   should learn ability
                    
                    lbu     t8, 0(t4)       #   job = unit.baseClass
                    li      t6, 0           #   jobWheelIndex = 0
                    sltiu   t0, t8, 0x4a    
                    bne     t0, zero, process_unit_learn_on_hit_job_loop
                    nop
                    
                    li      t8, 0x4a
                    
                process_unit_learn_on_hit_job_loop:
                    # t6 = jobWheelIndex

                    srl     t0, t6, 3       #   jobWheelIndex / 8
                    andi    t1, t6, 0x07    #   jobWheelIndex % 8
                    addu    t0, t4, t0      
                    lbu     t0, 0x96(t0)    #   unit job unlocked byte
                    li      t2, 0x80
                    srlv    t1, t2, t1      #   flag to check
                    and     t0, t0, t1
                    beq     t0, zero, process_unit_learn_on_hit_job_loop_end
                    li      v0, -1
                    
                    sll     t2, t8, 1       #   jobID * 2
                    addu    t2, t2, t8      #   jobID * 3
                    sll     t2, t2, 4       #   jobID * 48
                    lui     t1, %hi(@job_array)
                    addu    t1, t1, t2
                    lbu     t9, %lo(@job_array) (t1)    #  skillsetID
                    li      t7, 0           #   abilityIndex
                    
                process_unit_learn_on_hit_ability_loop:
                    srl     t0, t7, 3       #   abilityIndex / 8
                    andi    t1, t7, 0x07    #   abilityIndex % 8
                    addu    t0, t4, t0      
                    lbu     t3, 0x99(t0)    #   unit ability learned byte
                    li      t2, 0x80
                    srlv    t2, t2, t1      #   flag to check
                    and     t0, t3, t2
                    beq     t0, zero, process_unit_learn_on_hit_ability_loop_end
                    move    a0, t9
                    
                    #   This routine does not change registers $t0 to $t9
                    jal     @load_ability_from_skillset
                    move    a1, t7
                    
                    lui     t0, %hi(@used_ability_id)
                    lh      t0, %lo(@used_ability_id) (t0)     
                    srl     t1, t7, 3
                    bne     t0, v0, process_unit_learn_on_hit_ability_loop_end
                    addu    t1, t4, t1
                    
                    #   Check if should learn ability
                    beq     t5, zero, process_unit_learn_on_hit_end
                    move    v0, t0

                    or      t0, t3, t2
                    #b       process_unit_learn_on_hit_end
                    sb      t0, 0x99(t1)
                    
                process_unit_learn_on_hit_ability_loop_end:
                    sltiu   t0, t7, 25
                    bne     t0, zero, process_unit_learn_on_hit_ability_loop
                    addiu   t7, t7, 1

                process_unit_learn_on_hit_job_loop_end:
                    sltiu   t0, t6, 20
                    addiu   t6, t6, 1
                    bne     t0, zero, process_unit_learn_on_hit_job_loop
                    addiu   t8, t6, 0x4a
                    
                    #   Default case - ability not learned
                    li      v0, -1
                    
                process_unit_learn_on_hit_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="77A48" mode="ASM" offsetMode="RAM">
                    jal     @process_unit_learn_on_hit
                    li      a1, 1
        </Location>
        <Variable name="Require Different Teams" bytes="1" default="01" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="RNG Seed Manipulation" hidden="true">
        <Description>
            Contains functions for RNG seed manipulation.
        </Description>
        <Location file="SCUS_942_21" offset="27B00" mode="ASM" offsetMode="RAM">
            @get_timer:
                    li      t2, 0xb0
                    jr      t2
                    li      t1, 0x03
                    
            @get_new_random_seed:
                    addiu   sp, sp, -16
                    sw      s0, 4(sp)
                    sw      ra, 8(sp)
                    
                    jal     @get_timer
                    li      a0, 0
                    
                    move    s0, v0
                    
                    jal     @get_timer
                    li      a0, 1
                    
                    sll     v0, v0, 16
                    or      v0, v0, s0
                    
                    lw      ra, 8(sp)
                    lw      s0, 4(sp)
                    jr      ra
                    addiu   sp, sp, 16
        </Location>
    </Patch>
    <Patch name="Story battles have fixed unit generation">
        <Description>
            Story battles use fixed unit generation (per playthrough) by using a static RNG seed per battle.
            This will apply to ENTD entries from "Starting ENTD" variable and upward.
        </Description>
        <Include patch="RNG Seed Manipulation" />
        <Location file="BATTLE_BIN" offset="15D180" mode="ASM" offsetMode="RAM">
            .label  @address_entd_entry_id, 0x80047600
            .label  @address_entd_rng_seed, 0x80057964
            
            .label  @srand, 0x8002231c
        

            @handle_entd_rng_seed:
                    addiu   sp, sp, -24
                    sw      s0, 4(sp)
                    sw      s1, 8(sp)
                    sw      ra, 12(sp)
                    
                    lw      s1, @address_entd_entry_id
                    nop
                    sltiu   t0, s1, %StartingENTD
                    bne     t0, zero, handle_entd_rng_seed_end
                    li      v0, 0
                    
                    jal     @get_new_random_seed
                    li      a0, 0
                    
                    lui     t2, %hi(@address_entd_rng_seed)
                    lhu     t0, %lo(@address_entd_rng_seed) (t2)
                    move    s0, v0
                    bne     t0, zero, handle_entd_rng_seed_store
                    andi    t1, s0, 0xffff
                    
                    sh      t1, %lo(@address_entd_rng_seed) (t2)
                    move    t0, t1
                    
                handle_entd_rng_seed_store:
                    multu   t0, s1
                    mflo    a0
                    jal     @srand
                    nop
                    move    v0, s0
                    
                handle_entd_rng_seed_end:
                    lw      ra, 12(sp)
                    lw      s1, 8(sp)
                    lw      s0, 4(sp)
                    addiu   sp, sp, 24
                    jr      ra
                    sw      v0, 0x0c(sp)
        </Location>
        <Location file="BATTLE_BIN" offset="17F8DC" mode="ASM" offsetMode="RAM">
                    lui     t0, 0x8019
                    sb      zero, 0x3898(t0)
                    sh      zero, 0x3844(t0)
                    sb      zero, 0x3920(t0)
                    jal     @handle_entd_rng_seed
                    move    s0, a0
                    jal     0x8005cbd0
                    nop
        </Location>
        <Location file="BATTLE_BIN" offset="17FBB8" mode="ASM" offsetMode="RAM">
                    lw      t0, 0x0c(sp)
                    nop
                    beq     t0, zero, load_entd_units_end
                    nop
                    
                    jal     @srand
                    move    a0, t0
                    
                load_entd_units_end:
                    j       0x8007e974
                    nop
        </Location>
        <Variable name="Starting ENTD" bytes="2" default="0180" symbol="true" />
    </Patch>
    <Patch name="Soldier office keeps same soldiers until one is hired">
        <Include patch="RNG Seed Manipulation" />
        <Description>
            Soldier office retains the same soldiers (with the same stats) until one of them is hired, and then new soldiers are available for hire. 
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="138448" mode="ASM" offsetMode="RAM">
            jal     @soldier_office_generate_unit_hook
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="13898C" mode="ASM" offsetMode="RAM">
            jal     @soldier_office_war_funds_hook
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="148500" mode="ASM" offsetMode="RAM">
            .label  @address_soldier_office_rng_seed, 0x80057960
            
            .label  @srand, 0x8002231c
            .label  @generate_party_unit_in_formation, 0x801209c4
            .label  @obtain_gil, 0x801207bc
        
                        
            @soldier_office_generate_unit_hook:
                    addiu   sp, sp, -16
                    sw      s0, 4(sp)
                    sw      ra, 8(sp)
                    
                    jal     @soldier_office_restore_rng_seed
                    move    s0, a0
                    jal     @generate_party_unit_in_formation
                    move    a0, s0
                    
                    move    s0, v0
                    
                    jal     @get_new_random_seed
                    li      a0, 0
                    jal     @srand
                    move    a0, v0
                    
                    move    v0, s0
                    
                    lw      ra, 8(sp)
                    lw      s0, 4(sp)
                    jr      ra
                    addiu   sp, sp, 16
        
        
            @soldier_office_war_funds_hook:
                    addiu   sp, sp, -16
                    sw      s0, 4(sp)
                    sw      ra, 8(sp)
                
                    move    s0, a0
                    
                    jal     @get_new_random_seed
                    li      a0, 0
                    jal     @soldier_office_store_rng_seed
                    move    a0, v0
                    jal     @obtain_gil
                    move    a0, s0
                    
                    lw      ra, 8(sp)
                    lw      s0, 4(sp)
                    jr      ra
                    addiu   sp, sp, 16
        
        
            @soldier_office_store_rng_seed:
                    lui     t0, %hi(@address_soldier_office_rng_seed)
                    jr      ra
                    sw      a0, %lo(@address_soldier_office_rng_seed) (t0)
                
            @soldier_office_restore_rng_seed:
                    addiu   sp, sp, -24
                    sw      s0, 4(sp)
                    sw      s1, 8(sp)
                    sw      ra, 12(sp)
            
                    lw      s1, @address_soldier_office_rng_seed
                    move    s0, a0
                    bne     s1, zero, soldier_office_restore_rng_seed_type
                    nop
                    
                soldier_office_restore_rng_seed_store:
                    jal     @get_new_random_seed
                    li      a0, 0
                    move    s1, v0
                    jal     @soldier_office_store_rng_seed
                    move    a0, v0
                 
                soldier_office_restore_rng_seed_type:
                    bne     s0, zero, soldier_office_restore_rng_seed_call
                    srl     a0, s1, 16
                    
                    andi    a0, s1, 0xffff
                    
                soldier_office_restore_rng_seed_call:
                    jal     @srand
                    nop
                    
                soldier_office_restore_rng_seed_end:
                    lw      ra, 12(sp)
                    lw      s1, 8(sp)
                    lw      s0, 4(sp)
                    jr      ra
                    addiu   sp, sp, 24
        </Location>
    </Patch>
    <Patch name="Soldier office calculates display price">
        <Description>
            Soldier office display price is calculated based on equipment cost: (Base hire price) + (Base unit equipment cost).
            Base hire price default is 1000 gil (same as normal).
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="138458" mode="ASM" offsetMode="RAM">
                    li      v0, %BaseHirePrice
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="138E74" mode="ASM" offsetMode="RAM">
                    lh      t0, 0x8019520c
                    nop

                    sltiu   t1, t0, 2
                    beq     t1, zero, find_soldier_office_price_end
                    li      v0, 0

                    j       @find_overall_soldier_office_hire_price
                    move    a0, t0

                find_soldier_office_price_end:
                    jr      ra
                    nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="148600" mode="ASM" offsetMode="RAM">
            .label  @get_item_price, 0x80123708
            .label  @address_base_unit_equip_data, 0x8005e911

            #   a0 = Menu option index (0 = Male, 1 = Female)
            @find_overall_soldier_office_hire_price:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)
            
                    sll     t1, a0, 1
                    addu    t1, t1, a0
                    sll     t1, t1, 2
                    
                    lui     t0, %hi(@address_base_unit_equip_data)
                    addu    t0, t0, t1
                    
                    li      t2, %BaseHirePrice
                    addiu   t1, t0, 7
                find_overall_soldier_office_hire_price_loop:
                    lbu     a0, %lo(@address_base_unit_equip_data) (t0)
                    jal     @get_item_price
                    nop
                    
                    addiu   t0, t0, 1
                    bne     t0, t1, find_overall_soldier_office_hire_price_loop
                    addu    t2, t2, v0
                    
                find_overall_soldier_office_hire_price_end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    move    v0, t2
        </Location>
        <Location file="WORLD_WORLD_BIN" mode="DATA" offset="195A79" offsetMode="RAM">
            78
        </Location>
        <Location file="WORLD_WORLD_BIN" mode="DATA" offset="195A83" offsetMode="RAM">
            06
        </Location>
        <Location file="WORLD_WORLD_BIN" mode="DATA" offset="195A86" offsetMode="RAM">
            7C
        </Location>
        <Variable name="Base Hire Price" bytes="2" default="03E8" symbol="true" />
    </Patch>
    <Patch name="Soldier office doesn't rename units">
        <Description>
            Soldier office doesn't rename units.
            
            The third menu option in the Soldier office should only contain three options, and the third option exits.
            
            Set the Patch Menu Text variable to True to also patch the soldier office menu text. This should only be set 
            if there are no Tactext changes in the WORLD.BIN 11 section.  
            Otherwise, the menu text should be changed via Tactext in WORLD.BIN 11 (Entries 6 and 8).
        </Description>
        <Location file="WORLD_WORLD_BIN" offset="1383DC" mode="ASM" offsetMode="RAM">
            b       0x801383a0
            li      a1, 0x19
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="138464" mode="ASM" offsetMode="RAM">
            addiu   v1, at, -0x2a14
            sll     v0, s1, 2
            jal     0x80108920
            addu    s2, v0, v1
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1387F0" mode="ASM" offsetMode="RAM">
            j   0x8013889c
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1388BC" mode="ASM" offsetMode="RAM">
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1388E4" mode="ASM" offsetMode="RAM">
            j   0x8013880c
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1389A4" mode="ASM" offsetMode="RAM">
            nop
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="18A408" mode="DATA" offsetMode="RAM">
            7A
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1951DA,1951EA" mode="DATA" offsetMode="RAM">
            40
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="195069" mode="DATA" offsetMode="RAM">
            .if %PatchMenuText
                16 24 2F 28 FA 36 32 2F 27 2C 28 35 F8 0F 28 30 24 2F 28 FA 36 32 2F 27 2C 28 35 F8 15 28 24 39 28 FA 32 29 29 2C 26 28 FA DA 73 DA 73 DA 73 DA 73 DA 73 FE
            .endif
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1951F2" mode="DATA" offsetMode="RAM">
            02
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="195A2A,195A3A" mode="DATA" offsetMode="RAM">
            30
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="1950B4" mode="DATA" offsetMode="RAM">
            .if %PatchMenuText
                22 28 36 F8 17 32 FA DA 73 DA 73 DA 73 DA 73 DA 73 DA 73 DA 73 FE
            .endif
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="195A42" mode="DATA" offsetMode="RAM">
            01
        </Location>
        <Variable name="Patch Menu Text" bytes="1" default="01" preset="boolean" symbol="true" />
    </Patch>
    <Patch name="Disable permanent brave and faith alteration">
        <Description>
            Also disables units leaving due to brave and faith and associated warnings.
        </Description>
        <Location file="EVENT_REQUIRE_OUT" offset="1C43E8,1C3FA4" mode="ASM" offsetMode="RAM">
            jr      ra
            li      v0, 0
        </Location>
    </Patch>
    <Patch name="Lower Brave and Faith grant more evasion">
        <Description>
            Lower brave grants more physical evasion and lower faith grants more magical evasion.
            Evasion modifier is subtracted by (Base - (Brave or Faith)) * (Multiplier / power(2, Shift)).
            Evasion effectiveness is 100 / (Evasion modifier)
        </Description>
        <Location file="BATTLE_BIN" offset="1853F4" mode="ASM" offsetMode="RAM">
            lui     t2, 0x8019
            lw      t3, 0x2d98(t2)
        </Location>
        <Location file="BATTLE_BIN" offset="185404" mode="ASM" offsetMode="RAM">
            lbu     v0, 0x5c(t3)
            lbu     v1, 0x5b(t3)
        </Location>
        <Location file="BATTLE_BIN" offset="185424" mode="ASM" offsetMode="RAM">
            lbu     v0, 0x59(t3)
            addu    t0, t3, a2
        </Location>
        <Location file="BATTLE_BIN" offset="185434" mode="ASM" offsetMode="RAM">
            li      t1, %Base
            li      a0, 1
            lbu     v0, 0x58(t3)
            lbu     t0, 0(t0)
            andi    v0, v0, 0x09
            beq     v0, zero, 0x80185454
            subu    t0, t1, t0
        </Location>
        <Location file="BATTLE_BIN" offset="185458" mode="ASM" offsetMode="RAM">
            lbu     t1, 0x38dc(t2)
            li      t4, %Multiplier
            beq     v0, zero, 0x80185470
            addiu   a0, t2, 0x38de
        </Location>
        <Location file="BATTLE_BIN" offset="185470" mode="ASM" offsetMode="RAM">
            multu   t0, t4
            mflo    t0
            lbu     v0, 0x0058(t3)
            srl     t0, t0, %Shift
            subu    t0, t1, t0
        </Location>
        <Location file="BATTLE_BIN" offset="18548C" mode="ASM" offsetMode="RAM">
            sb      t0, 0x38dc(t2)
        </Location>
        <Location file="BATTLE_BIN" offset="18853C,188594" mode="ASM" offsetMode="RAM">
            li      a2, 0x24
        </Location>
        <Location file="BATTLE_BIN" offset="1885DC" mode="ASM" offsetMode="RAM">
            li      a2, 0x26
        </Location>
        <Variable name="Base" bytes="1" default="46" symbol="true" />
        <Variable name="Multiplier" bytes="1" default="20" symbol="true" />
        <Variable name="Shift" bytes="1" default="7" symbol="true" />
    </Patch>
    <Patch name="Brave and Faith values grant extra C-EV">
        <Description>
            Low Brave grants more physical C-EV and low Faith grants more magical C-EV.
            C-EV granted is: (Base - (Brave or Faith)) * (Multiplier / power(2, Shift)) (If above zero)
            Use Invert to grant C-EV for higher Brave and Faith instead.
        </Description>
        <Location file="BATTLE_BIN" offset="184F9C" mode="ASM" offsetMode="RAM">
                lui     t4, 0x8019
                lw      t3, 0x2d98(t4)
                addiu   sp, sp, -0x18
                sw      ra, 0x10(sp)
                lbu     v0, 0x8e(t3)
                lbu     t1, 0x24(t3)
                andi    v0, v0, 0x40
                beq     v0, zero, past_weapon_guard_check
                li      a3, 0
                jal     0x8018130c
                move    a0, t3
                sltiu   a3, v0, 1
                
            past_weapon_guard_check:
                li      v0, 100
                sb      v0, 0x38dc(t4)
                sb      zero, 0x38de(t4)
                sb      zero, 0x38df(t4)
                sb      zero, 0x38e0(t4)
                
                lbu     t2, 0x43(t3)
                li      t0, %PhysicalBase
                
                .if %PhysicalInvert
                    subu    t0, t1, t0
                .else
                    subu    t0, t0, t1
                .endif
                
                bltz    t0, past_p_cev
                li      t1, %PhysicalMultiplier
                multu   t0, t1
                mflo    t0
                srl     t0, t0, %PhysicalShift
                addu    t2, t2, t0
                
            past_p_cev:
                lbu     v0, 6(t3)
                sb      t2, 0x38e1(t4)
                andi    v0, v0, 0x20
                bne     v0, zero, 0x801851b4
                move    a0, t3
        </Location>
        <Location file="BATTLE_BIN" offset="1851C4" mode="ASM" offsetMode="RAM">
                lui     t4, 0x8019
                lw      a0, 0x2d98(t4)
                li      v0, 100
                sb      v0, 0x38dc(t4)
                lbu     v0, 6(a0)
                sb      zero, 0x38de(t4)
                sb      zero, 0x38df(t4)
                sb      zero, 0x38e0(t4)
                andi    t2, v0, 0x20
                
                lbu     t1, 0x26(a0)
                li      t0, %MagicalBase
                
                .if %MagicalInvert
                    subu    t0, t1, t0
                .else
                    subu    t0, t0, t1
                .endif
                
                bltz    t0, past_m_cev
                li      t3, 0
                li      t1, %MagicalMultiplier
                multu   t0, t1
                mflo    t0
                srl     t3, t0, %MagicalShift
            
            past_m_cev: 
                sb      t3, 0x38e1(t4)
                bne     t2, zero, 0x801852dc
                lui     a1, 0x8006
                lbu     v0, 0x1c(a0)
                addiu   a1, a1, 0x2eb8
                sll     v1, v0, 1
                addu    v1, v1, v0
                sll     v1, v1, 2
                addu    v1, v1, a1
                lbu     v0, 3(v1)
                lbu     t0, 4(v1)
                andi    v0, v0, 0x08
                beq     v0, zero, 0x8018525c
                sll     v0, t0, 1
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="1337D0" mode="ASM" offsetMode="RAM">
                lui     t4, 0x8015
                sh      v0, -0x2f7e(t4)
                lbu     t2, 0x24(s4)
                lbu     t3, 0x26(s4)
                sh      t2, -0x2f7c(t4)
                sh      t3, -0x2f7a(t4)

                lhu     t0, 8(s4)
                lbu     t1, 0x3a(s4)
                srl     t0, t0, 12
                sh      t0, -0x2f78(t4)
                sh      t1, 0(s1)

                lbu     t0, 0x38(s4)
                lbu     t1, 0x3b(s4)
                sh      t0, -0x2f5e(t4)
                sh      t1, -0x2f5c(t4)

                lbu     t0, 0x3e(s4)
                lbu     t1, 0x3f(s4)
                sh      t0, -0x2f56(t4)
                sh      t1, -0x2f54(t4)

                lbu     t0, 0x3c(s4)
                lbu     t1, 0x3d(s4)
                sh      t0, -0x2f5a(t4)
                sh      t1, -0x2f58(t4)

                lbu     t0, 0x36(s4)
                lbu     t5, 0x43(s4)
                sh      t0, -0x2f4e(t4)

                lbu     t0, 0x41(s4)
                lbu     t1, 0x42(s4)
                sh      t0, -0x2f4a(t4)
                sltu    t6, t1, t0
                bne     t6, zero, past_shield_evade
                li      t6, %PhysicalBase
                sh      t1, -0x2f4a(t4)
                
            past_shield_evade:
                lbu     t0, 0x37(s4)
                li      t7, %PhysicalMultiplier
                sh      t0, -0x2f44(t4)
                
                .if %PhysicalInvert
                    subu    t0, t2, t6
                .else
                    subu    t0, t6, t2
                .endif
                
                bltz    t0, past_p_cev
                multu   t0, t7
                mflo    t0
                srl     t0, t0, %PhysicalShift
                addu    t5, t5, t0

            past_p_cev:
                sh      t5, -0x2f4c(t4)

                li      t0, %MagicalBase
                
                .if %MagicalInvert
                    subu    t0, t3, t0
                .else
                    subu    t0, t0, t3
                .endif
                
                bltz    t0, past_m_cev
                li      t2, 0
                li      t1, %MagicalMultiplier
                multu   t0, t1
                mflo    t0
                srl     t2, t0, %MagicalShift

            past_m_cev: 
                b       0x801338c0
                sh      t2, -0x2f42(t4)
        </Location>
        <Location file="WORLD_WORLD_BIN" offset="120C1C" mode="ASM" offsetMode="RAM">
                lbu     t0, 0x15(s2)
                lbu     t4, 2(s1)
                sltiu   t2, t0, 100
                bne     t2, zero, past_exp_cap
                sh      t4, 0x0a(s0)
                li      t0, 99
                
            past_exp_cap:
                sh      t0, 8(s0)
                
                lhu     t0, 0x2a(s1)
                lhu     t1, 0x2e(s1)
                sltiu   t2, t0, 1000
                bne     t2, zero, past_hp_cap
                sltiu   t3, t1, 1000
                li      t0, 999
                
            past_hp_cap:
                sh      t0, 0x0c(s0)
                bne     t3, zero, past_mp_cap
                sh      t0, 0x10(s0)
                li      t1, 999
                
            past_mp_cap:
                sh      t1, 0x12(s0)
                sh      t1, 0x16(s0)
                
                lbu     t0, 0x39(s1)
                sh      t4, 0x22(s0)
                sltiu   t2, t0, 101
                bne     t2, zero, past_ct_cap
                li      t1, 100
                li      t0, 100
             
            past_ct_cap:
                sh      t0, 0x18(s0)
                sh      t1, 0x1c(s0)
                
                lbu     t0, 2(s2)
                lbu     t2, 0x24(s1)
                lbu     t3, 0x26(s1)
                sh      t0, 0x24(s0)
                sh      t2, 0x26(s0)
                sh      t3, 0x28(s0)
                
                lbu     t5, 0x43(s1)
                li      t6, %PhysicalBase
                li      t7, %PhysicalMultiplier

                .if %PhysicalInvert
                    subu    t0, t2, t6
                .else
                    subu    t0, t6, t2
                .endif
                
                bltz    t0, past_p_cev
                multu   t0, t7
                mflo    t0
                srl     t0, t0, %PhysicalShift
                addu    t5, t5, t0

            past_p_cev:
                li      t0, %MagicalBase
                
                .if %MagicalInvert
                    subu    t0, t3, t0
                .else
                    subu    t0, t0, t3
                .endif
                
                bltz    t0, past_m_cev
                li      t6, 0
                li      t1, %MagicalMultiplier
                multu   t0, t1
                mflo    t0
                srl     t6, t0, %MagicalShift
        
            past_m_cev:
                b       0x80120d1c
                nop
        </Location>                
        <Location file="WORLD_WORLD_BIN" offset="120DB8" mode="ASM" offsetMode="RAM">
                sh      t5, 0x44(s0)
        </Location>    
        <Location file="WORLD_WORLD_BIN" offset="120DEC" mode="ASM" offsetMode="RAM">
                sh      t6, 0x4e(s0)
        </Location>
        <Location file="EVENT_BUNIT_OUT" offset="1C6910" mode="ASM" offsetMode="RAM">
                lbu     t0, 0x21(s1)
                lbu     t4, 1(s1)
                sltiu   t2, t0, 100
                bne     t2, zero, past_exp_cap
                sh      t4, 0x0a(s2)
                li      t0, 99
                
            past_exp_cap:
                sh      t0, 8(s0)
                
                lhu     t0, 0x2a(s1)
                lhu     t1, 0x2e(s1)
                sltiu   t2, t0, 1000
                bne     t2, zero, past_max_hp_cap
                sltiu   t3, t1, 1000
                li      t0, 999
                
            past_max_hp_cap:
                bne     t3, zero, past_max_mp_cap
                sh      t0, 0x10(s2)
                li      t1, 999
                
            past_max_mp_cap:
                sh      t1, 0x16(s2)
                
                lhu     t0, 0x28(s1)
                lhu     t1, 0x2c(s1)
                sltiu   t2, t0, 1000
                bne     t2, zero, past_hp_cap
                sltiu   t3, t1, 1000
                li      t0, 999
                
            past_hp_cap:
                bne     t3, zero, past_mp_cap
                sh      t0, 0x0c(s2)
                li      t1, 999
                
            past_mp_cap:
                sh      t1, 0x12(s2)
                
                lbu     t0, 0x186(s1)
                li      t1, 1
                li      t2, 100
                beq     t0, t1, past_active_turn
                li      t3, 100
                
                lbu     t2, 0x39(s1)
                
            past_active_turn:
                lbu     t1, 2(s1)
                sltiu   t0, t2, 101
                bne     t0, zero, past_ct_cap
                sh      t1, 0x1e(s2)
                li      t2, 100
                
            past_ct_cap:
                sh      t2, 0x18(s2)
                sh      t3, 0x1c(s2)
                sh      t4, 0x22(s2)
            
                lbu     t0, 3(s1)
                lbu     t2, 0x24(s1)
                lbu     t3, 0x26(s1)
                sh      t0, 0x24(s2)
                sh      t2, 0x26(s2)
                sh      t3, 0x28(s2)
                                
                lbu     t5, 0x43(s1)
                li      t6, %PhysicalBase
                li      t7, %PhysicalMultiplier

                .if %PhysicalInvert
                    subu    t0, t2, t6
                .else
                    subu    t0, t6, t2
                .endif
                
                bltz    t0, past_p_cev
                multu   t0, t7
                mflo    t0
                srl     t0, t0, %PhysicalShift
                addu    t5, t5, t0

            past_p_cev:
                li      t0, %MagicalBase
                
                .if %MagicalInvert
                    subu    t0, t3, t0
                .else
                    subu    t0, t0, t3
                .endif
                
                bltz    t0, past_m_cev
                li      t6, 0
                li      t1, %MagicalMultiplier
                multu   t0, t1
                mflo    t0
                srl     t6, t0, %MagicalShift
        
            past_m_cev:
                b       0x801c6a2c
                nop
        </Location>
        <Location file="EVENT_BUNIT_OUT" offset="1C6AC8" mode="ASM" offsetMode="RAM">
                sh      t5, 0x44(s2)
        </Location>
        <Location file="EVENT_BUNIT_OUT" offset="1C6AFC" mode="ASM" offsetMode="RAM">
                sh      t6, 0x4e(s2)
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C5C18" mode="ASM" offsetMode="RAM">
                lui     t8, 0x801d
                lui     t9, 0x801e

                lbu     v1, -0x3201(t9)
                lbu     a0, -0x31e0(t9)

                lbu     a1, -0x31de(t9)
                lhu     v0, -0x31fc(t9)

                sh      s1, -0x5f38(t8)
                sh      s1, -0x5f2e(t8)
                sh      zero, -0x5f7e(t8)
                sh      v1, -0x5f36(t8)

                lbu     v1, -0x304a(t9)

                srl     v0, v0, 12

                sh      a0, -0x5f34(t8)
                sh      a1, -0x5f32(t8)
                sh      v0, -0x5f30(t8)

                andi    v0, v1, 0x0030

                beq     v0, zero, past_1
                move    s3, s0

                li      v0, 1
                sh      v0, -0x5f7e(t8)

            past_1:
                andi    v0, v1, 0x0038
                bne     v0, zero, past_2
                addiu   v1, s1, 0x0200
             
                li      v0, 2
                sh      v0, -0x5f7e(t8)
                
            past_2:
                lbu     v0, -0x31e2(t9)
                lbu     a0, -0x31e3(t9)
                lhu     a1, -0x31da(t9)

                sh      zero, -0x5f7c(t8)
                sh      zero, -0x5f7a(t8)
                sh      v1, -0x5f76(t8)
                sh      v0, -0x5f80(t8)
                sh      a0, -0x5f78(t8)
                sh      a1, -0x5f70(t8)
                
                
                bne     a1, zero, past_3
                addiu   v0, a1, 1
                sh      v0, -0x5f70(t8)
             
            past_3:
                lhu     v0, -0x5f70(t8)
                lhu     v1, -0x31d6(t9)
                sh      v0, -0x5f74(t8)
                sh      v1, -0x5f6a(t8)
                bne     v1, zero, past_4
                addiu   v0, v1, 1
             
                sh      v0, -0x5f6a(t8)
             
            past_4:
                lhu     a0, -0x5f6a(t8)

                lbu     a1, -0x31ca(t9)
                lbu     a2, -0x31cc(t9)
                lbu     a3, -0x31c9(t9)
                lbu     t0, -0x31c6(t9)
                lbu     t1, -0x31c5(t9)
                lbu     t2, -0x31c8(t9)
                lbu     t3, -0x31c7(t9)
                lbu     t4, -0x31ce(t9)
                lbu     t5, -0x31c1(t9)                #   Load P C-EV
                lbu     t6, -0x31c3(t9)
                lbu     t7, -0x31c3(t9)

                lbu     v1, -0x31c2(t9)
                li      v0, 100
                sh      v0, -0x5f64(t8)
                sh      v0, -0x5f68(t8)
                sltu    v1, v1, t7
                sh      a0, -0x5f6e(t8)
                sh      a1, 0x0000(s2)
                sh      a2, -0x5f16(t8)
                sh      a3, -0x5f14(t8)
                sh      t0, -0x5f0e(t8)
                sh      t1, -0x5f0c(t8)
                sh      t2, -0x5f12(t8)
                sh      t3, -0x5f10(t8)
                sh      t4, -0x5f06(t8)


                lbu     t2, -0x31e0(t9)     # Brave
                lbu     t3, -0x31de(t9)     # Faith

                li      a0, %PhysicalBase
                li      a1, %PhysicalMultiplier

                .if %PhysicalInvert
                    subu    t0, t2, a0
                .else
                    subu    t0, a0, t2
                .endif
                
                bltz    t0, past_p_cev
                multu   t0, a1
                mflo    t0
                srl     t0, t0, %PhysicalShift
                addu    t5, t5, t0

            past_p_cev:
                li      t0, %MagicalBase
                
                .if %MagicalInvert
                    subu    t0, t3, t0
                .else
                    subu    t0, t0, t3
                .endif
                
                bltz    t0, past_m_cev
                li      a0, 0
                li      t1, %MagicalMultiplier
                multu   t0, t1
                mflo    t0
                srl     t4, t0, %MagicalShift
        
            past_m_cev:
                b       0x801c5df8
                nop
        </Location>
        <Location file="EVENT_ATTACK_OUT" offset="1C5E4C" mode="ASM" offsetMode="RAM"> 
                sh      t4, -0x5efa(r1)
        </Location>
        <Variable name="Physical Base" bytes="1" default="46" symbol="true" />
        <Variable name="Physical Multiplier" bytes="1" default="20" symbol="true" />
        <Variable name="Physical Shift" bytes="1" default="7" symbol="true" />
        <Variable name="Physical Invert" bytes="1" default="00" preset="boolean" symbol="true" />
        <Variable name="Magical Base" bytes="1" default="46" symbol="true" />
        <Variable name="Magical Multiplier" bytes="1" default="20" symbol="true" />
        <Variable name="Magical Shift" bytes="1" default="7" symbol="true" />
        <Variable name="Magical Invert" bytes="1" default="00" preset="boolean" symbol="true" />
    </Patch>
    <Patch name="Enemies autolearn entire skillsets" file="SCUS_942_21">
        <Description>Enemies autolearn their entire skill sets.</Description>
        <Location offset="5CEA8" mode="ASM" offsetMode="RAM">
            jal     @check_auto_learn
        </Location>
        <Location offset="5CEB4" mode="ASM" offsetMode="RAM">
            bne     a3, v0, 0x8005cef0
        </Location>
        <Location offset="5D090" mode="ASM" offsetMode="RAM">
            j       0x8001edc0
            nop
        </Location>
        <Location offset="5D098" label="check_auto_learn" mode="ASM" offsetMode="RAM">
            lbu     t2, 5(t0)
            nop
            andi    t2, t2, 0x30
            sltu    t2, zero, t2
            jr      ra
            or      s6, s6, t2
        </Location>
    </Patch>
    <Patch name="Abandon gives flat evasion bonus">
        <Location file="BATTLE_BIN" offset="1853C0" mode="ASM" offsetMode="RAM">
            lbu     t0, 0x38de(v1)
            nop
            addiu   t0, t0, %Bonus
            sb      t0, 0x38de(v1)
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="188520" mode="ASM" offsetMode="RAM">
            .if %IgnoreConcentrate
            .else
                jal     0x8018537c
                nop
                jal     0x801852e4
                nop
                jal     0x80185328
                nop
            .endif
        </Location>
        <Variable name="Bonus" bytes="1" default="14" symbol="true" />
        <Variable name="IgnoreConcentrate" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Formula - Revive as Undead">
        <Description>
            Creates a formula that revives units as undead, cancelling dead and also applying Undead and either Charm or Invite, based on variables, in a single cast.
            To change which formula it uses, change the Formula ID variable.
        </Description>
        <Location file="BATTLE_BIN" offset="18F610" offsetMode="RAM" mode="DATA" replaceLabels="true" offsetVariable="multFormulaID">
            @formula
        </Location>
        <Location file="BATTLE_BIN" offset="184CCC" offsetMode="RAM" mode="ASM">
                    j       @status_hook_check_formula
                    lui     t1, 0x8006
        </Location>
        <Location file="BATTLE_BIN" offset="15AFC0" mode="ASM" offsetMode="RAM">
            @formula:
                    addiu   sp, sp, -16
                    sw      ra, 4(sp)

                    lui     t0, 0x8019
                    lw      t2, 0x2d98(t0)
                    nop
                    
                    lbu     t4, 0x58(t2)
                    nop

                    #  Miss if target is not KO
                    andi    t4, t4, 0x20
                    beq     t4, zero, miss
                    nop

                continue:
                    #   Heal Y% HP
                    jal     0x80186624
                    nop
                    lui     t0, 0x8019
                    lw	    t1, 0x2d90(t0)
                    li      t3, 0x20
                    lbu     t2, 4(t1)
                    lbu     t4, 6(t1)
                    sb      t2, 6(t1)
                    sb      t4, 4(t1)

                    #   Remove KO
                    sb      t3, 0x20(t1)
                    sb      t3, 0x3860(t0)

                    #   Add Undead
                    li      t3, 0x10
                    sb      t3, 0x1b(t1)

                    .if     %InflictInvite
                        #   Add Invite
                        li      t3, 0x40
                        sb      t3, 0x1c(t1)
                    .endif

                    .if     %InflictCharm
                        #   Add Charm
                        li      t3, 0x20
                        sb      t3, 0x1f(t1)
                    .endif

                    #   Set type = Status + HP Healing
                    li      t3, 0x48
                    jal     0x80187eb4
                    sb      t3, 0x25(t1)

                    #   Hit_F(MA + X)%
                    jal     0x801889cc
                    nop

                    beq     v0, zero, end
                    nop

                miss:
                    jal     0x8018430c
                    nop
                    j       end
                    nop

                end:
                    lw      ra, 4(sp)
                    addiu   sp, sp, 16
                    jr      ra
                    nop


            @status_hook_check_formula:
                    lui     t4, 0x8019
                    lbu     t4, 0x38f8(t4)
                    li      t5, %FormulaID
                    bne     t4, t5, normal_return
                    addiu   t1, t1, 0x5def

                    j   0x80184d78
                    nop

                normal_return:
                    j   0x80184cd4
                    nop
        </Location>
        <Variable name="Formula ID" bytes="1" default="18" symbol="true" />
        <Variable name="Inflict Invite" bytes="1" default="01" symbol="true" preset="boolean" />
        <Variable name="Inflict Charm" bytes="1" default="00" symbol="true" preset="boolean" />
        <Variable name="multFormulaID" bytes="2" reference="Formula ID" operator="*" operand="4" symbol="true" />
    </Patch>
    <Patch name="HP% formulas use MIN(999,MaxHP)">
        <Description>
            Does not use free space.
        </Description>
        <Location file="BATTLE_BIN" offset="186624" mode="ASM" offsetMode="RAM">
                lui     t0, 0x8019
                lw      t1, 0x2d98(t0)
                lbu     t2, 0x38fa(t0)
                lhu     t3, 0x2a(t1)
                lui     t4, 0x51eb

                sltiu   t5, t3, 1000
                bne     t5, zero, past_hp_cap
                ori     t4, t4, 0x851f

                li      t3, 999

            past_hp_cap:
                mult    t3, t2
                mflo    t5

                lw      v1, 0x2d90(t0)
                addiu   t5, t5, 99
                mult    t5, t4
                nop
        </Location>
    </Patch>
    <Patch name="Remove main character bio entry hardcoding">
        <Location file="WORLD_WLDCORE_BIN" offset="83CFC" mode="ASM" offsetMode="RAM">
            b   0x80083d2c
        </Location>
    </Patch>
    <Patch name="Formula 3B: Mana Burn / Feedback (MA * Y) (v3)">
        <Description>
            Changes formula 3B to a mana burn/feedback ability using MA * Y damage to both MP and HP.
            To overwrite a different formula, change the offset of the second Location tag in the XML.
            Variables:
                UseMPAsDamage: Set to 1 to always use target current MP as damage to both MP and HP.
                UseMagicEvade: Set to 1 to use magic evade instead of physical evade.
        </Description>
        <Location file="BATTLE_BIN" offset="15D100" mode="ASM" offsetMode="RAM">
            @formula_feedback:
      
                addiu   sp, sp, -24
                sw      ra, 16(sp)
        
                .if     %UseMagicEvade
                    jal     0x801885b8                  #   Magic Evade Calculation
                    nop 
                .else   
                    jal     0x80188510                  #   Physical Evade Calculation
                    nop 
                .endif
                                    
                bne     v0, zero, feedback_end          #   If Evaded, Skip           
                nop
        
                .if     %UseMPAsDamage
                .else
                    jal     0x80185c94                  #   Get Ability Power
                    nop
                    jal     0x80188964                  #   Calculate MA * Y Damage
                    nop
                .endif
        
                lui     t0, 0x8019 
                lw      v0, 0x2d98(t0)
                lw      v1, 0x2d90(t0)
        
                .if     %UseMPAsDamage
                    lhu     t0, 0x2c(v0)                #   Load target MP
                    li      v0, 0xa0
                .else
                    lhu     a0, 0x2c(v0)                #   Load target MP
                    lhu     t0, 4(v1)                   #   Load HP Damage
                    li      v0, 0xa0
            
                    sltu    t1, a0, t0
                    beq     t1, zero, feedback_store
                    nop
            
                    move    t0, a0                      #   Cap damage at target MP
                .endif
    
            feedback_store:
                sb      v0, 0x25(v1)                    #   Save Action Type = HP Damage + MP Damage
                sh      t0, 0x08(v1)                    #   Save MP Damage = Capped damage
                sh      t0, 0x04(v1)                    #   Save HP Damage = Capped damage
      
            feedback_end:  
                lw      ra, 16(sp)
                addiu   sp, sp, 24
                jr      ra
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="11FD58" mode="ASM">
                j       @formula_feedback
                nop
        </Location>
        <Variable name="UseMPAsDamage" bytes="1" default="00" symbol="true" preset="boolean" />
        <Variable name="UseMagicEvade" bytes="1" default="00" symbol="true" preset="boolean" />
    </Patch>
    <Patch name="Formula 11: Magic Damage = MA * (WP+Y)">
        <Description>
            Changes formula 11 to magic damage, MA * (WP+Y), physical evade.
            For magic evade, change '0x80188510' to '0x801885b8'. To overwrite
            a different formula, change the first offset.
        </Description>
        <Location file="BATTLE_BIN" offset="F5B00" mode="ASM">
            @formula_11:
                addiu   sp, sp, -0x18
                sw      ra, 0x0010(sp)
                jal     0x80188510              #   Physical Evade
                nop
                bne     v0, zero, END           #   Branch to END if evaded
                nop
                jal     0x8015ca50              #   Call new routine
                nop
                jal     0x80188964              #   Calculate MA * Y Damage
                nop
            END:  
                lw      ra, 0x10(sp)
                addiu   sp, sp, 0x18
                jr      ra
                nop
        </Location>
        <Location file="BATTLE_BIN" offset="F5A50" mode="ASM">
            lui     at, 0x8019
            lw      a0, 0x2d94(at)
            lbu     v0, 0x3902(at)          # WP
            lbu     v1, 0x38fa(at)          # Y
            lbu     a0, 0x0037(a0)          # MA
            addu    v0, v0, v1              # WP + Y
            sh      v0, 0x38d0(at)          # YA = WP + Y
            sh      a0, 0x38ce(at)          # XA = MA
            jr      ra
            nop
        </Location>
        <Location file="BATTLE_BIN" offset="122124" mode="ASM">
            j       @formula_11             #   Jump to new section
        </Location>
    </Patch>
    <Patch name="Formulas [17], [3e], and [44] can be elementally canceled">
        <Description>
            Formulas [17], [3e], and [44] can be elementally canceled
        </Description>
        <Location file="BATTLE_BIN" offset="11FE54" mode="ASM">
            lui     a0, 0x8019
            lw      v0, 0x2d98(a0)
            lw      v1, 0x2d90(a0)
            lhu     a0, 0x002c(v0)          #   Target MP
            li      v0, 0x80
            sb      v0, 0x25(v1)            #   Action type = HP Damage
            j       0x80186ff8              #   Apply Elemental
            sh      a0, 0x04(v1)            #   Action HP Damage = Target MP
        </Location>
        <Location file="BATTLE_BIN" offset="11F6EC" mode="ASM">
            lui     v1, 0x8019
            lw      v1, 0x2d98(v1)         
            li      a0, 0x80               
            lhu     v0, 0x0028(v1)          #   Target HP
            nop
            addiu   v0, v0, -1              #   HP - 1
            slt     a1, v0,zero
            lui     v1, 0x8019
            lw      v1, 0x2d90(v1)
            addu    v0, v0, a1              
            sh      v0, 0x04(v1)            #   Action HP Damage = MAX(HP - 1, 0)
            j       0x80186ff8              #   Apply Elemental
            sb      a0, 0x25(v1)            #   Action type = HP Damage
        </Location>
    </Patch>
    <Patch name="Formula 54 becomes HealMP_(Y%)">
        <Description>
            Formula 54 becomes HealMP_(Y%)
        </Description>
        <Location file="BATTLE_BIN" offset="F20DC" mode="ASM">
            @formula_54:
                lui     v0, 0x8019
                lw      v1, 0x2d98(v0)
                lb      a0, 0x38fa(v0)      #   Ability Y
                lh      v1, 0x002e(v1)      #   Target MP
                li      a1, 100
                mult    a0, v1
                mflo    a0                  #   MP * Y
                lw      a2, 0x2d90(v0)
                li      a3, 0x10
                div     a0, a1
                mflo    a0                  #   MP * Y / 100
                sh      a0, 0x0a(a2)        #   Set as MP Healing
                jr      ra
                sb      a3, 0x25(a2)        #   Action type = MP Healing
        </Location>
        <Location file="BATTLE_BIN" offset="123668" mode="ASM">
                j       @formula_54         #   Jump to new section
                nop
        </Location>
    </Patch>
    <Patch name="Formula 44: Use HP instead of MP">
        <Description>Formula 44: Use HP instead of MP</Description>
        <Location file="BATTLE_BIN" offset="11FE64" mode="ASM">
            lhu     a0, 0x28(v0)            # Load HP (instead of MP)
        </Location>
    </Patch>
</Patches>
