<?xml version="1.0" encoding="utf-8" ?>
<Patches>

	<Patch name="R/S/M: Damage Manipulation Supports">
	<Description>Creates 6 new supports to add into the game. If you don't want one to work, leave the data as 0 and it will disable the new functions.
	
  Vampire - Heals the Attacker by 50% of damage dealt.
  Vampire Guard - Attacker damages itself by 50% of HP Recovered. 
  Mana Burn - Attacker also deals MP Damage equal to MP Cost of the attack.
  Mana Gift - Attacker also Heals MP equal to MP Cost of the healing spell.
  CT Burn - Attacker also removes CT to the Target equal to the attacker Speed.
  CT Gift - Attacker also adds CT to the Target equal to the attacker Speed.</Description>
	<Location file="BATTLE_BIN" offset="18b97c" mode="ASM" offsetMode="RAM">
                       jal   @AfterDamageCalculations   #
					   sltiu r13, r17,  7               #r13 = Weapon Formula check
					   nop                              #
					   nop                              #
	</Location>
	
	<Location file="BATTLE_BIN" offset="15ead4" mode="ASM" offsetMode="RAM">
					@AfterDamageCalculations:
                       addiu r29, r29, -24              #
					   sw    r31, 16  (r29)             #
					   jal   @NewSupports               #New Supports Routine
					   nop                              #
					   beq   r13, r0,  ADC.end          #Branch to end if not a weapon formula
					   nop                              #
					   jal   0x80187ca0                 #Poach and Train routine
					   nop                              #
ADC.end:			   lw    r31, 16  (r29)             #
					   addiu r29, r29, 24               #
					   jr    r31                        #
					   nop                              #

                    @NewSupports:
					   addiu r29, r29, -24                   #
					   sw    r31, 20  (r29)
                       lui   r9,0x8019                       #
                       lw    r12,0x2d94(r9)                  #
                       lw    r11,0x2d8c(r9)                  #
                       lw    r10,0x2d98(r9)                  #
                       lw    r9,0x2d90(r9)                   #
                       lbu   r8,%VampireSupportSet(r12)      #Attacker's Vampire support set
                       lbu   r7,%VampireGuardSupportSet(r10) #Defender's Vampire Guard support set
                       andi  r2,r8,%VampireSupportBit        #Vampire's Bit
                       beq   r2,r0, SkipVampire              #Branch if Vampire not active
                       lbu   r6,%ManaBurnSupportSet(r12)     #Attacker's Mana Burn support set
                       jal   @Vampire                        #Vampire
                       nop	                                 #
SkipVampire:	       andi  r2,r7,%VampireGuardSupportBit   #Vampire Guard's Bit
                       beq   r2,r0, SkipVampireGuard         #Branch if Vampire Guard not active
                       lbu   r8,%ManaGiftSupportSet(r12)     #Mana Gift support set
                       jal   @VampireGuard                   #Vampire Guard Support
                       nop	                                 #
SkipVampireGuard:      andi  r2,r6,%ManaBurnSupportBit       #
                       beq   r2,r0, SkipManaBurn             #Branch if Mana Burn not active
                       lbu   r7,%CTBurnSupportSet(r12)       #CT Burn support set
                       jal   @ManaBurn                       #Mana Burn
                       nop	                                 #
SkipManaBurn:          andi  r2,r8,%ManaGiftSupportBit       #
                       beq   r2,r0, SkipManaGift             #Branch if Mana Gift not active
                       lbu   r6,%CTGiftSupportSet(r12)       #CT Gift support set
                       jal   @ManaGift                       #Mana Gift
                       nop	                                 #
SkipManaGift:          andi  r2,r7,%CTBurnSupportBit         #
        	           beq   r2,r0, SkipCTBurn               #Branch if CT Burn not active
        	           nop	                                 #
        	           jal   @CTBurn                         #CT Burn
        	           nop	                                 #
SkipCTBurn:            andi  r2,r6,%CTGiftSupportBit         #
         	           beq   r2,r0, SkipCTGift               #Branch if CT Gift not active
         	           nop	                                 #
         	           jal   @CTGift                         #CT Gift
         	           nop	                                 #
SkipCTGift:			   lw    r31, 20  (r29)                  #
					   addiu r29, r29, 24                    #
					   jr    r31	                         #
                       nop                                   #

					@Vampire:
					   lhu   r3,0x0004(r9)	            #Load Target HP Damage
                       lhu   r5,0x0006(r11)	            #Load Attacker's HP Recovery
                       beq   r3,r0, V_NotHPDamage       #Branch if not dealing HP Damage to Target
                       nop	                            #
                       srl   r3,r3,0x01	                #HP Damage / 2
                       lbu   r2,0x0025(r11)	            #Load Hit type flag
                       addu  r3,r3,r5	                #HP Recovery + Result
                       ori   r2,r2,0x0040               #
                       sb    r2,0x0025(r11)	            #Store new hit type
                       ori   r2,r0,0x0001               #
                       sb    r2,0x0000(r11)	            #Store attack as hit on attacker
                       sh    r3,0x0006(r11)	            #Store new HP Recovery
V_NotHPDamage:         jr    r31                        #
                       nop	                            #

					@VampireGuard:
                       lhu   r3,0x0006(r11)	            #Load Attacker's HP Recovery
                       nop	                            #
                       beq   r3,r0, VG_NotHPRecovery    #Branch if there is no HP Recovery
                       srl   r3,r3,0x01                 #HP Recovery / 2
                       lbu   r2,0x0025(r11)	            #Load Hit Flag
                       sh    r0,0x0006(r11)	            #Store Attacker HP Recovery as 0
                       andi  r2,r2,0x00BF	            #Remove HP Recovery
                       ori   r2,r2,0x0080               #Add HP Damage to attack type
                       sb    r2,0x0025(r11)	            #Store new hit flag
                       ori   r2,r0,0x0001               #
                       sb    r2,0x0000(r11)	            #Store attack as Hit on Attacker
                       sh    r3,0x0004(r11)	            #Store HP Recovery as HP Damage
VG_NotHPRecovery:      jr    r31                        #
         	           nop	                            #

					@ManaBurn:
        	           lhu   r2,0x0004(r9)	            #Load HP Damage
                       lui   r3,0x8019	                #
                       lbu   r3,0x38fd(r3)	            #Load Ability MP Cost
                       beq   r2,r0, MB_end              #Branch if 0 HP Damage
                       lhu   r4,0x0008(r9)	            #Load Target MP Damage
                       beq   r3,r0, MB_end              #Branch if Ability doesn't cost MP
                       addu  r3,r3,r4	                #MP Cost + MP Damage
                       lbu   r2,0x0025(r9)	            #Load Target Hit Flag
                       sh    r3,0x0008(r9)	            #Store new MP Damage
                       ori   r2,r2,0x0020               #
                       sb    r2,0x0025(r9)	            #Store New Hit Flag
MB_end:                jr    r31                        #
                       nop	                            #

					@ManaGift:
					   lhu   r2,0x0006(r9)	            #Load Target HP Recovery
                       lui   r3,0x8019	                #
                       lbu   r3,0x38fd(r3)	            #Load Ability MP Cost
                       lhu   r4,0x000a(r9)	            #Load Target MP Recovery
                       beq   r2,r0, MG_end	            #Branch if Target not recovering HP
                       nop	                            #
                       beq   r3,r0, MG_end	            #Branch if Ability has no MP Cost
                       addu  r3,r3,r4                   #MP Cost + MP Recovery
                       lbu   r2,0x0025(r9)	            #Load Target Hit Flag
                       sh    r3,0x000a(r9)              #Store new MP Recovery
                       ori   r2,r2,0x0010               #
                       sb    r2,0x0025(r9)              #Store MP Recovery
MG_end:		           jr    r31                        #
                       nop	                            #


					@CTBurn:
					   lhu   r3,0x0004(r9)	            #Load Target HP Damage
                       lhu   r4,0x0008(r9)	            #Load Target MP Damage
                       beq   r3,r0, CTB_end	            #Run support if HP Damage is being dealt
                       nop                              #
                       lbu   r2,0x0038(r12)	            #Load Attacker Speed
                       lbu   r3,0x0025(r9)	            #Load Hit Type
                       sb    r2,0x0013(r9)              #Store Attacker Speed as negative CT Change
                       ori   r3,r3,1	                #
                       sb    r3,0x0025(r9)              #Store as Psuedo Status Change
CTB_end:	           jr    r31                        #
                       nop	                            #


					@CTGift:
					   lhu   r3,0x0006(r9)	            #Load Target HP Recovery
                       nop	                            #
                       beq   r3,r0, CTG_end	            #Run support if HP Recovery is being dealt
                       nop	                            #
                       lbu   r2,0x0038(r12)	            #Load Attacker Speed
                       lbu   r3,0x0025(r9)	            #Load Hit Type
                       ori   r2,r2,0x0080               #
                       sb    r2,0x0013(r9)              #Store Attacker Speed as postive CT Change
                       ori   r3,r3,0x0001               #
                       sb    r3,0x0025(r9)              #Store as Psuedo Status Change
CTG_end:	           jr    r31                        #
                       nop	                            #

	</Location>

	<Variable name="Vampire Support Set" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Vampire Support Bit" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Vampire Guard Support Set" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Vampire Guard Support Bit" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Mana Burn Support Set" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Mana Burn Support Bit" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Mana Gift Support Set" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="Mana Gift Support Bit" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="CT Burn Support Set" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="CT Burn Support Bit" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="CT Gift Support Set" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />
	<Variable name="CT Gift Support Bit" file="BATTLE_BIN" bytes="1" default="0000" symbol="true" />	
	</Patch>

	<Patch name="Job Unlock Requirements v1">
	<Description>Adds in extra job requirements for Unit Level, Required Gender, and Story Progression. Use the Data field below to set the new requirements. 
The 1st byte sets a level restriction. The 2nd is the gender requirement: 80 for male, 40 for female. Default set as Male for Bard and Female for Dancer. The 3rd is for Story Progression (variable x6e).
	
Still in testing. Please message me on the forums (Pride) or on discord (@Pride) if you find any bugs. This does not remove the gender restriction on Bard/Dancer.</Description>
			<Location file="SCUS_942_21" offset="5c504" mode="DATA" offsetMode="RAM" label="JobUnlockRequirements">
			<!-- 
			     1st byte = Minimum Unit Level
			     2nd byte = Required Gender (x80 - Male; x40 - Female; x20 - Monster)
				 3rd byte = Minimum Story Progression 
			-->
									00 00 00 	<!-- Squire -->
									00 00 00 	<!-- Chemist -->
									00 00 00 	<!-- Knight -->
									00 00 00 	<!-- Archer -->
									00 00 00 	<!-- Monk -->
									00 00 00 	<!-- Priest -->
									00 00 00 	<!-- Wizard -->
									00 00 00 	<!-- Time Mage -->
									00 00 00 	<!-- Summoner -->
									00 00 00 	<!-- Thief -->
									00 00 00 	<!-- Mediator -->
									00 00 00 	<!-- Oracle -->
									00 00 00 	<!-- Geomancer -->
									00 00 00 	<!-- Lancer -->
									00 00 00 	<!-- Samurai -->
									00 00 00 	<!-- Ninja -->
									00 00 00 	<!-- Calculator -->
									00 80 00 	<!-- Bard -->
									00 40 00 	<!-- Dancer -->
									00 00 00 	<!-- Mime -->
			</Location>
			<Location file="WORLD_WORLD_BIN" offset="12257c" mode="ASM" offsetMode="RAM">
							.label @Store_Data_Pointer,         0x8012b1b4
							.label @Get_Base_Job,               0x8012243c
							.label @Special_Monster_Check,      0x80120b90
							.label @Check_Flags,                0x8012b1ec
							.label @Allied_Job_Unlock,          0x80122488
							.label @Get_Script_Variable_WORLD,  0x800ef1a8
							.label @Get_Script_Variable_BATTLE, 0x8013b590 

							.label @Formation_Data_Pointer,    0x801cd5ec
							.label @Story_Progression,         0x800578D4

                                @JobWheel:
                                     addiu r29, r29, -0x0030                                #
                                     sw    r31, 0x002c (r29)                                #
                                     sw    r22, 0x0028 (r29)                                #
                                     sw    r21, 0x0024 (r29)                                #
                                     sw    r20, 0x0020 (r29)                                #
									 sw    r19, 0x001c (r29)                                #
									 sw    r18, 0x0018 (r29)                                #
                                     sw    r17, 0x0014 (r29)                                #
                                     sw    r16, 0x0010 (r29)                                #
                                     move  r17, r4                                          #Unit Party ID
                                     la    r3,  @Formation_Data_Pointer                     #r3 = 0x801cd5ec (pointer to formation data... pointer)
                                     sll   r2,  r17,  2                                     #ID * 4           
                                     addu  r19, r2,  r3                                     #r19 = Pointer to Formation Data
                                     move  r22, r5                                          #r22 = Job Wheel Data Pointer (801c83f8)
									 move  r21, r6                                          #r21 = (valid inputs are 0, 1, 2; 1 = Skillset display, 2 = Job Wheel display (grayed out sprite))
                                     lw    r20, 0x0000  (r19)                               #r20 = Unit Formation Data
                                     li    r18, 0                                           #Clear r18 (Counter)
                                     jal   @Store_Data_Pointer                              #Store Unit Job Unlock Pointer to 0x801CA6F0 and x01 to 0x8018E47C
                                     addiu r4,r20,0x0077                                    #r4 = Pointer to Job Unlocks
                                     jal   @Get_Base_Job                                    #Get Base Job
                                     andi  r4,r17,0x00ff                                    #r4 = Party Data ID
                                     addu  r16,r2,r0                                        #r16 = Base Job
                                     ori   r2,r0,0x0002                                     #r2 = x02 (on the Job Wheel)
                                     bne   r21,r2, @NotOnTheJobWheel                        #Skip if we're not on the job wheel
                                     sll   r2,r18,0x01                                      #Counter * 2
                                     lh    r2,0x0024(r20)                                   #Load Unit's Job
                                     nop						                            #
                                     bne   r16,r2, @NotOnTheJobWheel                        #Branch if Current Job is not Base Job
                                     sll   r2,r18,0x01			                            #Counter * 2
                                     ori   r16,r16,0x4000                                   #grey out job (Flag x4000)
@NotOnTheJobWheel:                   addu  r2,r2,r22                                        #r2 = Position in Job Wheel Data
                                     sh    r16,0x0000(r2)		                            #Store Base Job into Job Wheel
                                     lh    r4,0x0024(r20)                                   #Load Unit's Job
                                     jal   @Special_Monster_Check                           #Special monster check	
                                     addiu r18,r18,0x0001                                   #Counter ++
                                     bne   r2,r0, @EndPrep                                  #Branch if unit is a special monster
                                     sll   r2,r18,0x01                                      #r2 = Counter * 2
                                     lh    r2,0x003e(r20)                                   #Lucavi Skillset Check (Skillset ID x50 - x80)
                                     nop                                                    #
                                     bne   r2,r0, @EndPrep                                  #Branch if using a Monster Skillset
                                     sll   r2,r18,0x01                                      #
                                     jal   @Check_Flags                                     #Check Job Unlock (Only pushes pointer forward, doesn't check for job unlock)
                                     ori   r4,r0,0x0001                                     #r4 = 0x01
                                     ori   r19,r0,0x0001                                    #r19 = 0x1 (counter)
                                     sll   r2,r18,0x01                                      #r2 = Counter * 2
                                     addu  r17,r2,r22                                       #r17 = Current Pointer to Job Wheel
									 
								@JobWheelLoop:
									 addiu r16,r19,0x004a                                   #Counter + 0x4a (Generic Jobs)
                                     jal   @Check_Flags                                     #Check Job Unlock	
                                     li    r4,  1                                           #r4 = 0x1
                                     move  r3,  r2                                          #r3 = 1 if job is unlocked
									 
									 la    r4,  @JobUnlockRequirements                      #r4 = Pointer to Job Unlock Requirements
									 sll   r2,  r19, 1                                      #Counter * 2
									 addu  r2,  r2,  r19                                    #Counter * 3
									 addu  r5,  r4,  r2                                     #r5 = Job Unlock Requirements
									 lbu   r4,  1  (r5)                                     #Load Gender Requirement
									 lbu   r2,  0x0070  (r20)                               #Load Unit Gender
									 beq   r4,  r0,  @GenderSkip                            #Skip Requirements if = 0
									 andi  r2,  r2,  0x00e0                                 #Remove extra bits from Gender byte
									 bne   r2,  r4,  @DontStoreJob                          #Don't Store job if Requirements are not met
									 nop                                                    #
									 
@GenderSkip:						 lbu   r2,  0x0000  (r20)                               #r2 = Unit Level
									 lbu   r4,  0  (r5)                                     #Load Required Unit Level
									 nop                                                    #
									 sltu  r4,  r2,  r4                                     #If Unit Level is less than Job Level, r4 = 1; else r4 = 0
									 bne   r4,  r0,  @JobNotUnlocked                        #Branch if Unit doesn't meet Level requirements
									 li    r2,  2                                           #r2 = 2
									 
									 lw    r4,  @Story_Progression                          #Load Story Progression variable
									 lbu   r6,  2 (r5)                                      #Load Required Story Progression
									 nop                                                    #
									 sltu  r4,  r4, r6                                      #If Story Progression is less than Required SP, r4 = 1; else r4 = 0
									 bne   r4,  r0,  @DontStoreJob                          #Branch if Story Progression doesn't meet requirement
									 nop                                                    #
									 
									 bne   r21, r2,  @2ndOnTheJobWheel                      #Skip if we're not on the job wheel
                                     nop                                                    #		
                                     lh    r2,0x0024(r20)                                   #Load Unit's Current Job
                                     nop                                                    #		
                                     beq   r16,r2, @StoreJobInData                          #Branch if currently checked job == unit's current job
                                     ori   r2,r16,0x4000                                    #Gray out Job
@2ndOnTheJobWheel:                   beq   r3,r0, @JobNotUnlocked                           #Branch if Job is not unlocked	
                                     ori   r2,r0,0x0002                                     #	
                                     j     @JobUnlockedSkip                                 #Continue to check next jobs (increase all counters)		
                                     sh    r16,0x0000(r17)                                  #Store r16 into Job Wheel
@JobNotUnlocked:                     bne   r21,r2, @DontStoreJob                            #Skip if we're not on the job wheel (only increase counter)
                                     nop                                                    #	
                                     jal   @Allied_Job_Unlock                               #Check to see if allies have job active
                                     andi  r4,r16,0x00FF                                    #Remove flag x4000 (Gray Out)
                                     bne   r2,r0, @DontStoreJob                             #Branch if no allies have Job unlocked
                                     addiu r2,r16,0x4000                                    #Gray out Job (Flag x4000)
@StoreJobInData:                     sh    r2,0x0000(r17)                                   #Store grayed out job into Job Wheel
@JobUnlockedSkip:                    addiu r17,r17,0x0002                                   #r17 + 2 (used for pointer in RAM data)
                                     addiu r18,r18,0x0001                                   #r18 + 1
@DontStoreJob:                       addiu r19,r19,0x0001                                   #r19 (Counter) + 1
                                     slti  r2,r19,0x0014                                    #
                                     bne   r2,r0, @JobWheelLoop                             #Branch if all jobs haven't been check
                                     sll   r2,r18,0x01                                      #Job counter * 2
									 
@EndPrep:                            addu  r2,r2,r22                                        #Job Wheel Pointer * Job counter * 2	
                                     addiu r3,r0,%lo(0xffff)                                #r3 + 0xffff
                                     sh    r3,0x0000(r2)                                    #Store xFFFF as last entry in Job Wheel (end of job wheel)
                                     addu  r2,r18,r0                                        #r2 = Unlocked Job Counter
                                     lw    r31,0x002c(r29)                                  #
                                     lw    r22,0x0028(r29)                                  #
                                     lw    r21,0x0024(r29)                                  #
                                     lw    r20,0x0020(r29)                                  #
                                     lw    r19,0x001c(r29)                                  #
                                     lw    r18,0x0018(r29)                                  #
                                     lw    r17,0x0014(r29)                                  #
                                     lw    r16,0x0010(r29)                                  #
                                     jr    r31                                              #
                                     addiu r29,r29,0x0030                                   #
			</Location>

		<Location file="EVENT_BUNIT_OUT" offset="1c7378" mode="ASM" offsetMode="RAM">
									#r3 = 1 (if Job met Job Level requirements) or 0 (if it didn't) 
								.label @BUNIT_DontStoreJob,  0x801c73d8
								
									 lw    r7,  0x0000 (r19)                                #
									 lui   r4,  0x8006                                      #
									 sll   r2,  r17, 1                                      #Counter * 2
									 addu  r2,  r2,  r17                                    #Counter * 3
									 addu  r5,  r4,  r2                                     #0x80050000 + Counter * 3
									 lbu   r4,  -0x3AFC  (r5)                               #r4 = Level Requirement
									 lbu   r6,  -0x3AFB  (r5)                               #r6 = Gender Requirement
									 lbu   r8,  0x0000  (r7)                                #
									 lbu   r2,  0x0070  (r7)                                #Load Unit Gender
									 beq   r6,  r0,  @BUNIT_GenderSkip                      #Skip Requirements if = 0
									 andi  r2,  r2,  0x00e0                                 #Remove extra bits from Gender byte
									 bne   r2,  r6,  @BUNIT_DontStoreJob                    #Don't Store job if Requirements are not met
@BUNIT_GenderSkip:					 sltu  r4,  r8,  r4                                     #If Unit Level is less than Job Level, r4 = 1; else r4 = 0
									 bne   r4,  r0,  @BUNIT_DontStoreJob                    #Branch if Unit doesn't meet Level requirements
									 nop                                                    #
									 jal   @BUNIT_StoryProgression                          #
									 nop                                                    #
									 beq   r2,  r0,  @BUNIT_DontStoreJob                    #
									 nop                                                    #
									 beq   r3,  r0,  @BUNIT_DontStoreJob                    #
		</Location>
		
		<Location file="BATTLE_BIN" offset="15eaac" mode="ASM" offsetMode="RAM">
								@BUNIT_StoryProgression:
									 lw    r4,  @Story_Progression                          #Load Story Progression variable
									 lbu   r6,  -0x3AFA (r5)                                #Load Required Story Progression
									 nop                                                    #
									 sltu  r4,  r4, r6                                      #If Story Progression is less than Required SP, r4 = 1; else r4 = 0
									 bne   r4,  r0,  @BUNIT_DontStoreJob                    #Branch if Story Progression doesn't meet requirement
									 li    r2,  0                                           #		
									 li    r2,  1                                           #
@BUNIT_DontStoreJob:				 jr    r31                                              #
									 nop                                                    #
		</Location>
		
		<Location file="SCUS_942_21" offset="5c398" mode="ASM" offsetMode="RAM">
										@Equipment_Stat_Setting:  #ESS #0x0005c398
										
										#Routine Locations
										.label @Get_Item_Data_Pointer,  0x8005a884
										.label @Get_Job_Data_Pointer,   0x8005a8a4 
										
										#Data Locations
										.label @AccessorySecondaryData, 0x80063f58
										.label @ShieldSecondaryData,    0x80063eb8
										.label @WeaponSecondaryData,    0x80063ab8	
										
										#Rewrite of the Equipment Stat Settings
										#Saves 0x8005c504 - 0x8005c5c4
										#More could be saved with a loop
                                               addiu r29, r29, -0x0018                      #
                                               sw    r16, 0x0010  (r29)                     #
											   sw    r31, 0x0014  (r29)                     #
                                               move  r16, r4		                        #r16 = Unit Data Pointer
											   
                                               addiu r4,  r16,  0x003c                      #r4 = Unit's Data Pointer (WP 1)
                                               jal   0x0005e644		                        #Null Equipment Stats (Unit Data 0x3c - 0x46)
                                               li    r5,  11		                        #r5 = 11 (Limit)
											   lbu   r4,  0x0003  (r16)                     #Load Unit's Job
                                               jal   @Get_Job_Data_Pointer                  #r2 = Job Data Pointer
											   nop                                          #
                                               lbu   r3,  0x0019  (r2)                      #Load Job's C-EV
											   
@ESS.Accessory: 							   lbu   r4,  0x001c  (r16)                     #Load Unit's Accessory ID
                                               sb    r3,  0x0043  (r16)                     #Store Job's C-EV into Unit Data						                                  
                                               jal   @Get_Item_Data_Pointer                 #Get Accessory Data
                                               nop          		                        #
                                               lbu   r4,  0x03  (r2)	                    #Load Accessory's Item Type
											   lbu   r3,  0x04  (r2)                        #Load Accessory's Second Table ID
                                               andi  r4,  r4,  0x08                         #
                                               beq   r4,  r0,  @ESS.RH_shield               #Branch if Accessory isn't an Accessory
											   
											   sll   r3,  r3,  1                            #ID * 2
                                               la    r4,  @AccessorySecondaryData           #r4 = Accessory Evade Data
                                               addu  r2,  r4,  r3                           #
                                               lbu   r3,  0x00  (r2)                        #Load Accessory's P-EV
                                               lbu   r2,  0x01  (r2)                        #Load Accessory's M-EV
                                               sb    r3,  0x0040  (r16)	                    #Store Accessory's P-EV into Unit's
                                               sb    r2,  0x0044  (r16)	                    #Store Accessory's M-EV into Unit's
											   
@ESS.RH_shield:                                lbu   r4,  0x001e  (r16)                     #Load Unit's RH Shield
                                               jal   @Get_Item_Data_Pointer                 #Get Accessory Data
                                               nop          		                        #
                                               lbu   r4,  0x03  (r2)	                    #Load Shield's Item Type
											   lbu   r3,  0x04  (r2)                        #Load Shield's Second Table ID
                                               andi  r4,  r4,  0x40                         #
                                               beq   r4,  r0,  @ESS.LH_shield               #Branch if Shield isn't a Shield
											   
											   sll   r3,  r3,  1                            #ID * 2
                                               la    r4,  @ShieldSecondaryData              #r4 = Shield Evade Data
                                               addu  r2,  r4,  r3                           #
                                               lbu   r3,  0x00  (r2)                        #Load Shield's P-EV
                                               lbu   r2,  0x01  (r2)                        #Load Shield's M-EV
                                               sb    r3,  0x0041  (r16)	                    #Store RH Shield's P-EV into Unit's
                                               sb    r2,  0x0045  (r16)                     #Store RH Shield's M-EV into Unit's
											   
@ESS.LH_shield:                                lbu   r4,  0x0020  (r16)                     #Load Unit's LH Shield
                                               jal   @Get_Item_Data_Pointer                 #Get Accessory Data
                                               nop          		                        #
                                               lbu   r4,  0x03  (r2)	                    #Load Shield's Item Type
											   lbu   r3,  0x04  (r2)                        #Load Shield's Second Table ID
                                               andi  r4,  r4,  0x40                         #
                                               beq   r4,  r0,  @ESS.RH_weapon               #Branch if Shield isn't a Shield

											   sll   r3,  r3,  1                            #ID * 2
                                               la    r4,  @ShieldSecondaryData              #r4 = Shield Evade Data
                                               addu  r2,  r4,  r3                           #
                                               lbu   r3,  0x00  (r2)                        #Load Shield's P-EV
                                               lbu   r2,  0x01  (r2  )                      #Load Shield's M-EV
                                               sb    r3,  0x0042  (r16)	                    #Store LH Shield's P-EV into Unit's
                                               sb    r2,  0x0046  (r16)                     #Store LH Shield's M-EV into Unit's
											   
@ESS.RH_weapon:                                lbu   r4,  0x001d  (r16)                     #Load Unit's RH Weapon
                                               jal   @Get_Item_Data_Pointer                 #Get Accessory Data
                                               nop          		                        #
                                               lbu   r4,  0x03  (r2)	                    #Load Weapon's Item Type
											   lbu   r3,  0x04  (r2)                        #Load Weapon's Second Table ID
                                               andi  r4,  r4,  0x80                         #
                                               beq   r4,  r0,  @ESS.LH_weapon               #Branch if Weapon isn't a Weapon
											   
                                               sll   r3,  r3,  3	                        #Original ID * 8
                                               la    r4,  @WeaponSecondaryData              #r4 = Weapon Secondary Data
                                               addu  r2,  r4,  r3                           #
                                               lbu   r3,  0x04  (r2)                        #Load Weapon's WP
                                               lbu   r4,  0x05  (r2)                        #
                                               sb    r3,  0x003c  (r16)                     #Store RH Weapon's WP into Unit's
                                               sb    r4,  0x003e  (r16)	                    #Store RH Weapon's W-EV into Unit's
											   
@ESS.LH_weapon:                                lbu   r4,  0x001f  (r16)                     #Load Unit's LH Weapon
                                               jal   @Get_Item_Data_Pointer                 #Get Accessory Data
                                               nop          		                        #
                                               lbu   r4,  0x03  (r2)	                    #Load Weapon's Item Type
											   lbu   r3,  0x04  (r2)                        #Load Weapon's Second Table ID
                                               andi  r4,  r4,  0x80                         #
                                               beq   r4,  r0,  @ESS.end                     #Branch if Weapon isn't a Weapon
											   
                                               sll   r3,  r3,  3	                        #Original ID * 8
                                               la    r4,  @WeaponSecondaryData              #r4 = Weapon Secondary Data
                                               addu  r2,  r4,  r3                           #
                                               lbu   r3,  0x04  (r2)                        #Load Weapon's WP
                                               lbu   r4,  0x05  (r2)                        #
                                               sb    r3,  0x003d  (r16)                     #Store LH Weapon's WP into Unit's
                                               sb    r4,  0x003f  (r16)	                    #Store LH Weapon's W-EV into Unit's
											   
@ESS.end:                                      lw r31,0x0014(r29)                           #
                                               lw r16,0x0010(r29)                           #
                                               jr r31                                       #
                                               addiu r29,r29,0x0018                         #
			</Location>
	</Patch>
	
    <Patch name="Equipment Evasion Settings">

		<Description>Rewrites the Physical Equipment Evasion Routine (0x80184F9C) and removes the need for the Magical counterpart. Also includes Choto's "Evade Boost" as that increase Accessory evade by 10 if the R/S/M is equiped to avoid obvious conflict issues.

Allows some custom settings for Physical, Physical (Charge), and Magical Equipment. Such as allowing free weapon guard for physical attacks (98 instead of d8) but requiring magical attacks to have weapon guard (68 instead of 20). Or allow Magical attacks to use Class Evade.
Change the setting byte to make the changes. - Vanilla: x80 + x40 + x10 + x08 = D8.
	x80 - Use Class Evade
	x40 - Require Weapon Guard?
	x20 - Use Magical Evade
	x10 - Use Physical Evade
	x08 - Use Weapon Evade
	x04 - Use "Evade Boost"

This routine frees up 0x80185184 - 0x801852E0 (384 bytes), plenty of space if you want write your own stuff.
This conflicts with: 

	Choto - Evade Boost (Is included)
	Emmy - WG Hardcoding Removing (Can do the same thing)
	FDC - Don't Act/Deep Water cancels W/S-EV. (Not replicating this effect but you can! There's plenty of space!)
	FFMaster - Darkness status reduces accuracy by XX% (Not replicating, this ASM checks for darkness status on the attacker and increases accessory invade by 32 so Evade boost can be easily changed to do this as well. I'm also not sure it works? It doesn't look like it.)
	Xifanie - Weapon Guard Innate All (Can do the same thing)
	Xifanie - Weapon Guard Innate All v2 (Can do the same thing)</Description>

			<Location file="BATTLE_BIN" offset="184f9c" mode="ASM" offsetMode="RAM">
                            #Data Locations
                            .label @Item_Data,0x80062eb8
                            
                            #Ram Locations
                            .label @Attacker_Current_Action,0x80192d8c
                            .label @Target_Current_Action,0x80192d90
                            .label @Attacker_Data,0x80192d94
                            .label @Target_Data,0x80192d98
                            
                            #Routine Locations
                            .label @Weapon_Guard_Usability,0x8018130c
                            .label @Get_Item_Data_Pointer,0x8005a884
							.label @Chance_To_React,0x8018D384
							
							@Equipment_Evasion_Setting:			    #
								addiu r29, r29, -0x001c			    #
								sw    r17, 0x0018  (r29)		    #
								sw    r16, 0x0014  (r29)		    #
								lw    r16, @Target_Data             #Load Target Data Pointer
								move  r17, r4					    #Move r4 to r17 (Input)
								sw    r31, 0x0010  (r29)		    #
								andi  r3,  r17, 0x0008			    #
								beq   r3,  r0, @EES.No_Weapon_Guard	#Branch if not using Weapon Evade
								li    r7,  0	                    #Clear r7 (No weapon evade)
								andi  r3,  r17, 0x40                #
								beq   r3,  r0, @EES.No_WG_Req       #Branch if Weapon Guard (reaction) not required
								nop                                 #
								lbu   r2,  %WeaponGuardR/S/MSet(r16)#Load 4th Reaction Set (Default: x008e)
								nop                                 #
								andi  r2,  r2, %WeaponGuardR/S/MBit #(Default: x0040)
								beq   r2,  r0, @EES.No_Weapon_Guard	#Branch if No Weapon Guard
								li    r7,  0						#Fail Weapon Guard
@EES.No_WG_Req:					jal   @Weapon_Guard_Usability		#Weapon Guard Usability
								move  r4,  r16						#r4 = Target Data Pointer
								sltiu r7,  r2, 0x01					#r7 = 1 if able to use WG
@EES.No_Weapon_Guard:			li    r2,  100						#r2 = 100 (Base Hit)
								lui   r1,  0x8019					#
								sb    r2,  0x38dc(r1)				#Base Hit Rate = 100
								sh    r0,  0x38de(r1)				#Accessory Evade and Right Hand Evade = 0
								lbu   r2,  0x0043(r16)				#Load Character's Class Evade
								sh    r0,  0x38e0(r1)				#Left Hand and Class Evade Evade = 0
								andi  r6,  r17, 0x30				#
								srl   r6,  r6,  0x05				#r6 = 1 for Magical Evade; 0 for Physical Evade
								andi  r3,  r17, 0x80				#
								beq   r3,  r0, @EES.Skip_CL_Evade   #Branch if not using Class Evade
								nop									#
								sb    r2,  0x38e1(r1)				#Store Class Evade
@EES.Skip_CL_Evade:				lbu   r4,  0x001c(r16)				#Load Target's Accessory ID
								jal   @Get_Item_Data_Pointer		#Input r4 with Item ID; Return r2 with Item Data Pointer
								nop									#
								lbu   r3,  0x0003(r2)				#Load Item Type
								lbu   r4,  0x0004(r2)				#Load 2nd Table ID
								andi  r3,  r3, 0x08					#
								beq   r2,  r0, @EES.Not_Acc			#Branch if Accessory isn't an  Accessory
								nop									#
								lui   r1,  0x8006					#
								sll   r4,  r4, 0x01					#Acc. ID * 2
								addu  r1,  r1, r4					#
								addu  r1,  r1, r6					#r6 = 1 for Magical or 0 for Physical
								lbu   r2,  0x3f58(r1)				#Load Accessory's Evade
								andi  r3,  r17, 0x04				#
								beq   r3,  r0, @EES.store_acc_evade	#Branch if not using "Evade" Boost
								nop									#
								lbu   r3,  %EvadeBoostR/S/MSet(r16) #Load Target Set (Default: x0095)
								nop									#
								andi r3,  r3, %EvadeBoostR/S/MBit	#(Default: x0002)
								beq  r3,  r0, @EES.store_acc_evade	#Branch if "Evade Boost" not active
								nop									#
								addiu r2,r2, %EvadeBoostIncrease	#Acc. Evade + (Default: x000a)
@EES.store_acc_evade:			lui   r1,  0x8019					#
								sb    r2,  0x38de(r1)				#Store Accessory's Evade
@EES.Not_Acc:					lbu   r4,  0x001d(r16)				#Load Target's RH Weapon
								jal   @Get_Item_Data_Pointer		#Input r4 with Item ID; Return r2 with Item Data Pointer
								nop									#
								lbu   r3,  0x0003(r2)				#Load Equipment Type
								lbu   r4,  0x0004(r2)				#Load 2nd Table ID
								andi  r3,  r3, 0x80					#
								beq   r3,  r0, @EES.Check_RHS		#Branch if not a Weapon
								nop									#
								beq   r7,  r0, @EES.Check_RHS		#Branch if not using Weapon Guard
								nop									#
								sll   r2,  r4, 0x03					#Weapon ID * 8
								lui   r1,  0x8006					#
								addu  r1,  r1, r2					#
								j     @EES.store_RH_evade			#
								lbu   r2,  0x3abd(r1)				#Load Weapon Evade								
@EES.Check_RHS:					lbu   r4,  0x001e(r16)              #Load Target's RH Shield ID
								jal   @Get_Item_Data_Pointer		#Input r4 with Item ID; Return r2 with Item Data Pointer
								nop									#
								lbu   r3,  0x0003(r2)				#Load Equipment Type
								lbu   r4,  0x0004(r2)				#Load 2nd Table ID
								andi  r3,  r3, 0x40					#
								beq   r3,  r0, @EES.Check_LH        #Branch if not a Shield
								nop									#
								sll   r2,  r4,0x01					#Shield ID * 2
								lui   r1,  0x8006					#
								addu  r1,  r1, r2					#
								addu  r1,  r1, r6					#r6 = 1 for Magical or 0 for Physical
								lbu   r2,  0x3eb8(r1)				#Load RH Shield's Evade
@EES.store_RH_evade:			lui   r1,  0x8019					#
								sb    r2,  0x38df(r1)				#Store RH Equipment's Evade
@EES.Check_LH:					lbu   r4,  0x001f(r16)				#Load LH Weapon ID
								jal   @Get_Item_Data_Pointer		#Input r4 with Item ID; Return r2 with Item Data Pointer
								nop									#
								lbu   r3,  0x0003(r2)				#Load Equipment Type
								lbu   r4,  0x0004(r2)				#Load 2nd Table ID
								andi  r3,  r3, 0x80					#
								beq   r3,  r0, @EES.Check_LHS		#
								nop									#
								beq   r7,  r0, @EES.Check_LHS		#								
								nop									#
								sll   r2,  r4, 0x03					#Weapon ID * 8
								lui   r1,  0x8006					#
								addu  r1,  r1, r2					#
								j     @EES.store_LH_evade			#
								lbu   r2,  0x3abd(r1)				#Load Weapon Evade	
@EES.Check_LHS:					lbu   r4,  0x0020(r16)				#Load LH Shield ID
								jal   @Get_Item_Data_Pointer		#Input r4 with Item ID; Return r2 with Item Data Pointer
								nop									#
								lbu   r3,  0x0003(r2)				#Load Equipment Type
								lbu   r4,  0x0004(r2)				#Load 2nd Table ID
								andi  r3,  r3, 0x40					#
								beq   r3,  r0, @EES.END				#Branch if LH Shield is not a Shield								
								nop									#
								sll   r2,  r4, 0x01					#Shield ID * 2
								lui   r1,  0x8006					#
								addu  r1,  r1, r2					#
								addu  r1,  r1, r6					#r6 = 1 for Magical or 0 for Physical
								lbu   r2,  0x3eb8(r1)				#Load LH Sheild Evade
@EES.store_LH_evade:			lui   r1,  0x8019					#
								sb   r2,   0x38e0(r1)				#Store LH Equipment's Evade
@EES.END:						lw   r31,  0x0010(r29)				#
								lw   r16,  0x0014(r29)				#
								lw   r17,  0x0018(r29)				#
								jr   r31							#
								addiu r29, r29, 0x001c				#
			</Location>

			<Location offset="188518" mode="ASM" offsetMode="RAM" label="Physical_Evade">
								jal   @Equipment_Evasion_Setting
								addiu r4,  r0, %P.Evade
			</Location>

			<Location file="BATTLE_BIN" offset="188570" mode="ASM" offsetMode="RAM" label="Physical_Evade_Charge">
								jal   @Equipment_Evasion_Setting
								addiu r4,  r0, %P.Evade(Charge)
			</Location>
			
			<Location file="BATTLE_BIN" offset="1885c0" mode="ASM" offsetMode="RAM" label="Magical_Evade">
								jal   @Equipment_Evasion_Setting
								addiu r4,  r0, %M.Evade
			</Location>

			<Variable name="P. Evade" file="BATTLE_BIN" bytes="1" default="00D8" symbol="true" />
			<Variable name="P. Evade (Charge)" file="BATTLE_BIN" bytes="1" default="00D8" symbol="true" />
			<Variable name="M. Evade" file="BATTLE_BIN" bytes="1" default="0020" symbol="true" />
			<Variable name="Weapon Guard R/S/M Set" bytes="2" default="008e" symbol="true" />
			<Variable name="Weapon Guard R/S/M Bit" bytes="2" default="0095" symbol="true" />
			<Variable name="Evade Boost R/S/M Set" bytes="2" default="0095" symbol="true" />
			<Variable name="Evade Boost R/S/M Bit" bytes="2" default="0002" symbol="true" />
			<Variable name="Evade Boost Increase" bytes="2" default="000a" symbol="true" />
			
	</Patch>

	<Patch name="R/S/M: MP Switch Overflows damage to HP">
		<Description>Any excess damage from MP Switch no longer goes to waste. It will damage the target's HP if there is any excess. The Variable changes the % of damage (xx/128) that the MP portion takes, the default is the vanilla 1:1 ratio. Changing this number to x40 would cause the MP damage to take 50% less damage until MP is reduced into spillover range. xC0 would result in MP Damage being increased by 50%.
		
This conflicts with:
	Emmy - Super Duper Reaction Looper Version 1.2 (Nothing to be done about it either, one or the other)
		</Description>

			<Location file="BATTLE_BIN" offset="18d1b8" mode="ASM" offsetMode="RAM" >
                            #Data Locations
                            .label @Item_Data,0x80062eb8
                            
                            #Ram Locations
                            .label @Attacker_Current_Action,0x80192d8c
                            .label @Target_Current_Action,0x80192d90
                            .label @Attacker_Data,0x80192d94
                            .label @Target_Data,0x80192d98
                            
                            #Routine Locations
                            .label @Weapon_Guard_Usability,0x8018130c
                            .label @Get_Item_Data_Pointer,0x8005a884
							.label @Chance_To_React,0x8018D384
			
						@MP_Switch_Routine:
								la    r4,  @Target_Data			#Target Data
								addiu r29, r29, -0x0018			#
								sw    r31, 0x0010  (r29)		#
								sw    r16, 0x0014  (r19)	  	#
								lhu   r3,  0x0190  (r4)		  	#Load HP Damage
								lhu   r2,  0x002c  (r4)			#Load Current MP
								beq   r3,  r0,  MPSwitch.end 	#Branch if not doing HP Damage
								move  r16, r4			       	#r16 = Target Data
								beq   r2,  r0, MPSwitch.end		#Branch if Target has no MP
								nop								#
								jal   @Chance_To_React			#Reaction Chance Roll
								nop	                            #
								bne   r2,  r0,  MPSwitch.end    #
								lhu   r6,  0x0190  (r16)        #Load HP Damage
								lui   r2,  0x8019	            #
								lw    r2,  -0x0a04 (r2)         #
								lhu   r5,  0x0194  (r16)        #Load MP Damage
								bne   r2,  r0,  MPSwitch.end    #
								nop	                            #
								addu  r5,  r6,  r5              #HP Damage + MP damage
								sltiu r2,  r5,  1000            #
								bne   r2,  r0,  MPSwitch.limit  #Branch if under Damage Cap
								nop	                            #
								li    r5,  999  	            #Cap Damage
MPSwitch.limit: 				lhu   r3,  0x002c  (r16)        #Load Current MP
								ori   r4,  r0,  %xx	            #xx = input
								mult  r5,  r4                   #Damage * input
								mflo  r4                        #
								srl   r4,  r4, 8                #Damage * input / 256
								lui   r2,  0x8019               #
								addiu r2,  r2, -0x2d64          #
								lbu   r2,  0x0000  (r2)         #Load always skip flag
								nop	                            #
								beq   r2,  r0, MPSwitch.MPDamage #Branch if always forcing to only store mp damage
								slt   r2,  r3, r4	            #
								beq   r2,  r0, MPSwitch.MPDamage #Branch if only damaging MP
								nop                             #
								subu  r2,  r6,  r4              #HP Damage - MP Damage
								sh    r2,  0x0190  (r16)        #Store new HP Damage
								sh    r3,  0x0194  (r16)        #Store MP Damage as Current MP
								li    r2,  0x00a0               #
								j     MPSwitch.end              #
								sb    r2,  0x01b1  (r16)        #Store Hit byte as HP/MP Damage
MPSwitch.MPDamage: 				lbu   r2,  0x01b1  (r16)        #
								li    r3,  0x0020               #
								andi  r2,  r2,  0x007f          #
								sb    r2,  0x01b1  (r16)        #Remove HP Damage flag
								sh    r0,  0x0190  (r16)        #Store HP Damage as 0
								sb    r3,  0x01b1  (r16)        #Store Hit byte as MP Damage
								sh    r4,  0x0194  (r16)        #Store MP Damage as MP Damage
								li    r2,  0x01b1               #MP Switch Ability ID
								sh    r2,  0x000e  (r16)        #Store reaction id
MPSwitch.end: 					lw    r31, 0x0010  (r29)        #
								lw    r16, 0x0014  (r29)        #
								jr    r31						#
								addiu r29, r29, 0x0018          #
			</Location>
			<Variable name="xx" bytes="2" default="0100" symbol="true" />	
			<Variable name="Set to 0 have no spill over" file="BATTLE_BIN" offset="18D256" offsetMode="RAM" bytes="1" default="02" />
	</Patch>

	<Patch name="Critical Hit Calculation">
	
    <Location file="BATTLE_BIN" offset="1590dc" mode="DATA" offsetMode="RAM" label="Item_Proc_Chance" > <!-- Item proc rates -->

			04040404		<!-- 00-03 -->
			04040404		<!-- 04-07 -->
			04040404		<!-- 08-0B -->
			04040404		<!-- 0C-0F -->
			04040404		<!-- 10-13 -->
			04040404		<!-- 14-17 -->
			04040404		<!-- 18-1B -->
			04040404		<!-- 1C-1F -->
			04040464		<!-- 20-23 -->
			04040404		<!-- 24-27 -->
			04040404		<!-- 28-2B -->
			04040404		<!-- 2C-2F -->
			04040404		<!-- 30-33 -->
			04040404		<!-- 34-37 -->
			04040404		<!-- 38-3B -->
			04040404		<!-- 3C-3F -->
			04040404		<!-- 40-43 -->
			04040404		<!-- 44-47 -->
			04040404		<!-- 48-4B -->
			04040404		<!-- 4C-4F -->
			04040404		<!-- 50-53 -->
			04040404		<!-- 54-57 -->
			04040404		<!-- 58-5B -->
			04040404		<!-- 5C-5F -->
			04040404		<!-- 60-63 -->
			04040404		<!-- 64-67 -->
			04040404		<!-- 68-6B -->
			04040404		<!-- 6C-6F -->
			04040404		<!-- 70-73 -->
			04040404		<!-- 74-77 -->
			04040404		<!-- 78-7B -->
			04040404		<!-- 7C-7F -->
		</Location>

		<Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="Job_Proc_Chance"> <!-- Job proc rates -->

			04046404		<!-- 00-03 -->
			04040404		<!-- 04-07 -->
			04040404		<!-- 08-0B -->
			04040404		<!-- 0C-0F -->
			04040404		<!-- 10-13 -->
			04040404		<!-- 14-17 -->
			04040404		<!-- 18-1B -->
			04040404		<!-- 1C-1F -->
			04040404		<!-- 20-23 -->
			04040404		<!-- 24-27 -->
			04040404		<!-- 28-2B -->
			04040404		<!-- 2C-2F -->
			04040404		<!-- 30-33 -->
			04040404		<!-- 34-37 -->
			04040404		<!-- 38-3B -->
			04040404		<!-- 3C-3F -->
			04040404		<!-- 40-43 -->
			04040404		<!-- 44-47 -->
			04040404		<!-- 48-4B -->
			04040404		<!-- 4C-4F -->
			04040404		<!-- 50-53 -->
			04040404		<!-- 54-57 -->
			04040404		<!-- 58-5B -->
			04040404		<!-- 5C-5F -->
			04040404		<!-- 60-63 -->
			04040404		<!-- 64-67 -->
			04040404		<!-- 68-6B -->
			04040404		<!-- 6C-6F -->
			04040404		<!-- 70-73 -->
			04040404		<!-- 74-77 -->
			04040404		<!-- 78-7B -->
			04040404		<!-- 7C-7F -->
			04040404		<!-- 80-83 -->
			04040404		<!-- 84-87 -->
			04040404		<!-- 88-8B -->
			04040404		<!-- 8C-8F -->
			04040404		<!-- 90-93 -->
			04040404		<!-- 94-97 -->
			04040404		<!-- 98-9B -->
			04040404		<!-- 9C-9F -->

    </Location>	
	
	<Location file="BATTLE_BIN" mode="DATA" offsetMode="RAM" label="Multiplier">
       20 40 80 00          <!-- Front / Side / Back / Base -->
	</Location>
	
	
	<Location file="BATTLE_BIN" mode="ASM" offsetMode="RAM">
                                    .label @Random_Process,0x8018eed8
									.label @Attackers_Data_Pointer,0x80192d94
									@Get_Crit_Chance:
                                              addiu r29,r29,-0x0018            #
											  sw    r31,0x0010(r29)            #
											  lui   r2,0x8019                  #r2 = 0x8019									
									          lbu   r5,0x38d8(r2)              #Load Used Weapon ID
											  lw    r6,0x2d94(r2)              #Attacker's Data
											  lbu   r3,@Item_Proc_Chance(r5)   #Item Proc Chance
											  lbu   r5,0x0003(r6)              #Load Unit Job
											  lbu   r5,@Job_Proc_Chance(r5)    #Load Job Proc Chance
											  nop                              #
											  addu  r5,r3,r5                   #Item + Job Proc Chance
											  beq   r5,r0,@proc_end            #
											  nop                              #
											  jal   @Random_Process            #
											  nop                              #
@proc_end:                                    lw    r31,0x0010(r29)            #
											  addiu r29,r29,0x0018             #
											  jr    r31                        #
											  nop                              #
											  
									@Calculate_Crit_Damage:		  
											  lui   r5,0x8019                  #
											  lw    r3,0x2d94(r5)              #Load Attacker's Data
											  nop                              #
											  lbu   r3,0x0090(r3)              #
											  nop                              #
											  andi  r3,r3,0x0080               #
											  bne   r3,r0,@Vital_Skip          #
											  nop                              #
											  j     @Non_Vital_Skip            #
											  ori   r2,r0,0x0003               #Use Base Mod
@Vital_Skip:                                  lbu   r2,0x38e2(r5)              #Load Facing Mod
@Non_Vital_Skip:                              lbu   r3,@Multiplier(r2)         #Load Multiplier
                                              lh    r4,0x38ce(r5)              #Load XA
                                              nop                              #
											  mult  r4,r3                      #XA * MOD
                                              mflo  r3                         #
											  srl   r3,r3,0x08                 #XA * MOD / 256
											  bne   r3,r0,@skip                #
											  nop                              #
											  addiu r3,r0,0x0001               #
@skip:                                        addu  r4,r4,r3                   #XA + (XA * MOD / 256)
											  sh    r4,0x38ce(r5)              #Store new XA
											  jr    r31                        #
											  nop                              #
    </Location>
	
	<Location file="BATTLE_BIN" offset="1864f8" mode="ASM" offsetMode="RAM">
                                    .label @Knockback,0x801843ec
                                    .label @FacingMOD,0x801854fc

									@Critical_Hit_Calculation:  #0x801864f8
                                              addiu r29,r29,-0x0020         #
                                              sw    r31,0x0018(r29)         #
											  lw    r2,0x8018f5fc           #
											  ori   r3,r0,0x0002            #
											  beq   r3,r2,@end              #
											  nop                           #
                                              jal   @Get_Crit_Chance        #
											  ori   r4,r0,0x0064            #r4 = Divisor
                                              bne   r2,r0,@end              #Branch if Critical did not occur
                                              ori   r3,r0,0x0001            #r3 = 1
                                              lui   r2,0x8019               #
                                              lw    r2,0x2d90(r2)           #Load Current Action Data Pointer
                                              jal   @FacingMOD              #
                                              sb    r3,0x0001(r2)           #Store Critical Hit Flag
                                              jal   @Calculate_Crit_Damage  #
											  nop                           #
@end:                                         lw    r31,0x0018(r29)         #
                                              addiu r29,r29,0x0020          #
                                              jr    r31                     #
                                              nop                           #
    </Location>	
	</Patch>	

   <Patch name="R/S/M: MP Cost Supports">
   <Description>Creates 3 new Supports: Turbo MP, No MP Cost, Blood Price. Turbo MP defaults to double MP Cost and increase Magic Damage/Accuracy by 1.5 but these values can be changed with the variables. No MP Costs disables the cost of casting spells. And Blood Price uses HP to cast spells when out of MP. Default is 1:1 cost but in FFTA it doubles the cost of the spell to use HP. You're choice how you want this to work.
	The Multiplier works by Value * Cost(or Damage) / 256. So a value of x0080 would be half or x0100 would be value * 256 / 256 (dont change).
	Use the unit data chart below to see what ability you want to tie each to. If you want want to use one, leave the Bit as 00.
	
    0x008f: Support 1                0x0090: Support 2                0x0091: Support 3       
      0x80 - Equip Armor                0x80 - Half of MP               0x80 - Train         
      0x40 - Equip Shield               0x40 - Gained JP-UP             0x40 - Secret Hunt   
      0x20 - Equip Sword                0x20 - Gained EXP-UP            0x20 - Martial Arts  
      0x10 - Equip Katana               0x10 - Attack UP                0x10 - Monster Talk  
      0x08 - Equip Crossbow             0x08 - Defense UP               0x08 - Throw Item    
      0x04 - Equip Spear                0x04 - Magic Attack UP          0x04 - Maintenance   
      0x02 - Equip Axe                  0x02 - Magic Defense UP         0x02 - Two Hands     
      0x01 - Equip Gun                  0x01 - Concentrate              0x01 - Two Swords    

    0x0092: Support 4
        0x80 - Monster Skill
        0x40 - Defend
        0x20 - Equip Change
        0x10 - 
        0x08 - Short Charge
        0x04 - Non-Charge
        0x02 - 
        0x01 - 

    0x0093: Movement 1           0x0094: Movement 2                 0x0095: Movement 3
       0x80 - Move +1              0x80 - Move-MP UP                  0x80 - Walk on Water
       0x40 - Move +2              0x40 - Move-Get EXP                0x40 - Move in Water
       0x20 - Move +3              0x20 - Move-Get JP                 0x20 - Move on Lava
       0x10 - Jump +1              0x10 - Cannot Enter Water          0x10 - Move Underwater
       0x08 - Jump +2              0x08 - Teleport                    0x08 - Float
       0x04 - Jump +3              0x04 - Teleport 2                  0x04 - Fly
       0x02 - Ignore Height        0x02 - Any Weather                 0x02 - Silent Walk
       0x01 - Move-HP UP           0x01 - Any Ground                  0x01 - Move-Find Item

   </Description>
   <Location file="BATTLE_BIN" offset="15e7e4" mode="ASM" offsetMode="RAM">
							@MP_Cost:
									lbu   r2,0x0090(r16)                      #Load Attacker's support set <!-- Variable -->
                                    nop                                       #
									andi  r2,r2,0x0080                        # <!-- Variable -->
									beq   r2,r0, @MP_Cost.no_HoMP             #Branch if Attacker does not have Half of MP
									ori   r2,r0,0x0080                        # <!-- Variable -->
									mult  r2,r4                               #Variable * MP Cost
									mflo  r2                                  #
									srl   r4,r2,0x08                          #MP Cost * Variable / 256
@MP_Cost.no_HoMP:                   lbu   r2,0x0090(r16)                      #Load Attacker's support set <!-- Variable -->
									nop                                       #
									andi  r2,r2,0x0040                        # <!-- Variable -->
                                    beq   r2,r0, @MP_Cost.no_turbo_mp         #Branch if Attacker does not have turbo mp
									ori   r2,r0,0x0200                        # <!-- Variable -->
									mult  r2,r4                               #Variable * MP Cost
									mflo  r2                                  #
									srl   r4,r2,0x08                          #MP Cost * Variable / 256
@MP_Cost.no_turbo_mp:               lbu   r2,0x0090(r16)                      #Load Attacker's Support Set <!-- Variable -->
									nop                                       #
									andi  r2,r2,0x0020                        # <!-- Variable -->
									beq   r2,r0, @MP_Cost.no_mp_support       #Branch if Attacker does not have "no mp"
									nop                                       #
									j     @MP_Cost.end                        #Jump to end
									addu  r4,r0,r0                            #Clear mp cost
@MP_Cost.no_mp_support:             lbu   r2,0x0090(r16)                      #Load Attacker's Support <!-- Variable -->
                                    lh    r3,0x002c(r16)                      #Load Attacker's Current MP 
                                    andi  r2,r2,0x0010                        #									
									beq   r2,r0,@MP_Cost.end                  #Branch if Attacker does not have Blood Price
									ori   r2,r2,0x0100                        # <!-- Variable -->
									bne   r3,r0, @MP_Cost.end                 #Branch to end if attacker has MP (Blood Price only works when out of MP)
									nop                                       #
                                    mult  r2,r4                               #Variable * MP Cost
									mflo  r2                                  #
									srl   r4,r2,0x08                          #MP Cost * Variable / 256
                                    ori   r1,r0,0x0001                        #									
@MP_Cost.end:                       jr    r31                                 #
									nop										  #
							
							@MPDisplayPrep:
                                    lbu   r2,0x0090(r16)                      #Load Attacker Supports
									addu  r8,r0,r0                            #Clear r8
									andi  r2,r2,0x0080                        #
									beq   r2,r0, @MPDisplayPrep.no_HoMP       #Branch if no half of mp
									nop                                       #
									ori   r8,r0,0x0001                        #r8 = 1
@MPDisplayPrep.no_HoMP:             lbu   r2,0x0090(r16)                      #Load Attacker Supports
									nop                                       #
									andi  r2,r2,0x0040                        #
									beq   r2,r0, @MPDisplayPrep.no_turbo_mp   #Branch if no turbo mp support
									nop                                       #
									ori   r8,r8,0x0002                        # Combine r8 flags
@MPDisplayPrep.no_turbo_mp:         lbu   r2,0x0090(r16)                      #Load Attacker Supports
									nop                                       #
									andi  r2,r2,0x0020                        #
									beq   r2,r0, @MPDisplayPrep.no_mp_support #Branch if no "no mp" support
									nop                                       #
									j     @MPDisplayPrep.end                  #Jump to end
									ori   r8,r8,0x0004                        #Combine r8 flags
@MPDisplayPrep.no_mp_support:       lbu   r2,0x0090(r16)                      #Load Attacker Supports
									nop                                       #
									andi  r2,r2,0x0010                        #
									beq   r2,r0, @MPDisplayPrep.end           #Branch if no blood price
									nop                                       #
									ori   r8,r8,0x00008                       # Combine r8 flags
@MPDisplayPrep.end:                 jr    r31                                 #
                                    nop                                       #

							@MPDisplay: 
                                    lw    r8,0x00f8(r29)                      #Load MP Cost Supports
									nop                                       #
									andi  r2,r8,0x0001                        #
                                    beq   r2,r0, @MPDisplay.no_HoMP           #Branch if no half of mp
                                    ori   r2,r0,0x0080                        #
									mult  r2,r17                              #Cost * Variable
									mflo  r2                                  #
									srl   r17,r2,0x08                         #Cost * Variable / 256
@MPDisplay.no_HoMP:                 andi  r2,r8,0x0002                        #
									beq   r2,r0, @MPDisplay.no_turbo_mp       #
									ori   r2,r0,0x0200                        #
                                    mult  r2,r17                              #Cost * Variable
									mflo  r2                                  #
									srl   r17,r2,0x08                         #Cost * Variable / 256
@MPDisplay.no_turbo_mp:             andi  r2,r8,0x0004                        #
									beq   r2,r0, @MPDisplay.no_mp_support     #Branch if no "no mp" support
									nop                                       #
									j     @MPDisplay.end                      #Jump to end
									addu  r17,r0,r0                           #Clear MP Cost
@MPDisplay.no_mp_support:           andi  r2,r8,0x0008                        #
									beq   r2,r0, @MPDisplay.end               #
									ori   r2,r0,0x0100                        #
                                    mult  r2,r17                              #Cost * Variable
									mflo  r2                                  #
									srl   r17,r2,0x08                         #Cost * Variable / 256
@MPDisplay.end:                     jr    r31                                 #
									nop                                       #
								
							@RedDisplay:
                                    lbu   r2,0x0090(r22)                     #Load 2nd set of Support
                                    lbu   r3,0x01ec(r4)                      #Load MP Cost
                                    andi  r2,r2,0x0010                       #
                                    beq   r2,r0, @RedDisplay.load_mp         #Branch if user does not have Blood Price
                                    nop				                         #
                                    lhu   r2,0x002c(r22)                     #Load Current MP
									nop                                      #
									slt   r1,r3,r2                           #if MP Cost less then Current MP, r1 = 1
									bne   r1,r0, @RedDisplay.end             #Branch to end if current mp is greater then mp cost
									nop                                      #
									lhu   r2,0x0028(r22)                     #Load Target Current HP
                                    j     @RedDisplay.end                    #END
                                    nop				                         #
@RedDisplay.load_mp:                lhu   r2,0x002c(r22)                     #Load Current MP
@RedDisplay.end:                    jr    r31			                     #
                                    nop								         #

							@Battle_Message:
                                    lbu   r2,0x0090(r4)                      #Load 2nd set of Support
                                    nop				                         #
                                    andi  r2,r2,0x0010                       # 
                                    beq   r2,r0, @Battle_Message.load_mp     #Branch if user does not have Blood Price
                                    nop                                      #                
                                    lhu   r2,0x002C(r4)                      #Load Current MP
                                    nop                                      #
                                    slt   r1,r19,r2                          #
           						    bne   r1,r0, @Battle_Message.end         #
           						    nop                                      #
           						    lhu   r2,0x0028(r4)                      #
                                    j     @Battle_Message.end                #End
                                    nop				                         #
@Battle_Message.load_mp:            lhu    r2,0x002c(r4)                     #Load Current MP
@Battle_Message.end:                jr     r31			                     #
                                    nop						                 # 	
									
							@fix_hp_spent:
							        addiu r29,r29,-0x0018                    #
									sw    r31,0x0010(r29)                    #
                                    lhu   r16,0x002c(r17)                    #Load Current MP
									lhu   r23,0x0028(r17)                    #Load Current HP
									jal   0x0017da20                         #MP Cost routine
									addu  r4,r17,r0                          #r4 = Unit Data Pointer
									sh    r16,0x002c(r17)                    #
									sh    r23,0x0028(r17)                    #
									lw    r31,0x0010(r29)                    #
									addiu r29,r29,0x0018                     #
									jr    r31                                #
									nop                                      #
							
                            @AI_MP_Supports:
							        addiu r29,r29,-0x0020                    #
									sw    r31,0x0010(r29)                    #
							        sw    r3,0x0014(r29)                     #
									sw    r16,0x0018(r29)                    #
									sw    r17,0x001c(r29)                    #
									addu  r17,r16,r0                         #r17 = Ability Data
									lbu   r4,0x0011(r17)                     #r4 = MP Cost
									jal   @MP_Cost                           #
									addu  r16,r18,r0                         #
									sb    r4,0x0011(r17)                     #Store MP Cost
									lw    r31,0x0010(r29)                    #
									lw    r3,0x0014(r29)                     #
									lw    r16,0x0018(r29)                    #
									lw    r17,0x001c(r29)                    #
									jr    r31                                #
									addiu r29,r29,0x0020                     #
							
                            @AI_Knows_Blood_Price_Uses_HP:
							        lbu   r3,0x0090(r20)                     #Load Attacker's Support
									nop                                      #
									andi  r3,r3,0x0010                       #
									beq   r3,r0, @AI.end                     #Branch to end if not using Blood Price
									nop                                      #
									lbu   r3,0x0011(r22)                     #Load MP Cost
									nop                                      #
									sltu  r3,r3,r2                           #
									bne   r3,r0, @AI.end                     #Branch if enough MP to cast spell
									nop                                      #
									lhu   r2,0x0028(r22)                     #Load HP
@AI.end:                            lbu   r3,0x0011(r22)                     #Load MP Cost									
									jr    r31                                #
									nop                                      #
							
							@Turbo_MP_Damage_Increase:                       #
							        lw    r3,0x2d94(r2)                      #r3 = Attacker Data
									ori   r4,r0,0x0180                       #r4 = Multiplier
									lbu   r5,0x0090(r3)                      #Load Attacker Support Set
									lhu   r6,0x38ce(r2)                      #Load XA
									andi  r5,r5,0x0040                       #
									beq   r5,r0, @Turbo_MP.end               #Branch if Turbo MP not equipped
									nop                                      #
									mult   r4,r6                             #XA * Multiplier
									mflo   r4                                #
									srl    r4,r4,0x08                        #XA * Multiplier / 256
									sh     r4,0x38ce(r2)                     #Store new XA
@Turbo_MP.end:                      lbu    r2,0x0090(r3)                     #Load Attacker 2nd Support Set
                                    jr     r31                               #
                                    nop                                      #									
   </Location>
   
   	<Location file="BATTLE_BIN" offset="17db58" mode="ASM" offsetMode="RAM">
									lbu   r4,0x000d(r4)                     #Load Ability MP Cost
									jal   @MP_Cost                          #Half of MP / Blood Price new routine
									addu  r1,r0,r0                          #r1 = 0
									sb    r4,0x38eb(r1)                     #Store MP Cost
									beq   r1,r0, @skip                      #branch if not using blood price
									nop                                     #
									addiu r16,r16,-0x0004                   #Attacker Offset - x04 (Load Current HP in return routine)
@skip:                              lbu   r4,0x38eb(r1)                     #Load Ability MP Cost
	</Location>		
   
   <Location file="BATTLE_BIN" offset="181850" mode="ASM" offsetMode="RAM">
									jal @MPDisplayPrep                      #Set r8 for supports
									nop										#
									sw   r8,0x00f8(r29)                     #Store r8
									nop										#
									nop										#
									nop										#
									nop										#
   </Location>
   
   <Location file="BATTLE_BIN" offset="181A34" mode="ASM" offsetMode="RAM">
									lbu  r17,0x000d(r4)                     #Load Ability MP Cost
									jal  @MPDisplay                         #
									nop                                     #
									nop                                     #
									nop                                     #
   </Location>
   
   <Location file="BATTLE_BIN" offset="14009c" mode="ASM" offsetMode="RAM">
									jal @RedDisplay
									nop
   </Location>
   
   <Location file="BATTLE_BIN" offset="140f64" mode="ASM" offsetMode="RAM">
									jal @Battle_Message
   </Location>
   
   <Location file="BATTLE_BIN" offset="17defc" mode="ASM" offsetMode="RAM">
                                   addiu r29,r29,-0x004c
   </Location>
   
   <Location file="BATTLE_BIN" offset="17df54" mode="ASM" offsetMode="RAM">
                                    sw   r23,0x0048(r29)
									jal  @fix_hp_spent
									nop
									bne  r2,r0,0x0017e148
									lw   r23,0x0048(r29)
   </Location>
   
   <Location file="BATTLE_BIN" offset="17e16c" mode="ASM" offsetMode="RAM">
                                    addiu r29,r29,0x004c
   </Location>
   
   <Location file="BATTLE_BIN" offset="195c88" mode="ASM" offsetMode="RAM">
                                    jal  @AI_MP_Supports
									nop
									nop
									nop
									nop
									nop
									nop
									nop
									nop
   </Location>
   
   <Location file="BATTLE_BIN" offset="19502c" mode="ASM" offsetMode="RAM">
                                    jal  @AI_Knows_Blood_Price_Uses_HP
   </Location>
   
   <Location file="BATTLE_BIN" offset="186204" mode="ASM" offsetMode="RAM">
                                   jal   @Turbo_MP_Damage_Increase
								   lui   r2,0x8019
   </Location>
   
   <Variable name="Half of MP R/S/M Set" specific="BATTLE_BIN:15e7e4,15e874" offsetMode="RAM" bytes="1" default="90" />
   <Variable name="Half of MP Bit" specific="BATTLE_BIN:15e7ec,15e87c" offsetMode="RAM" bytes="1" default="80" />
   <Variable name="Half of MP Multiplier" specific="BATTLE_BIN:15e7f4,15e8f0" offsetMode="RAM" bytes="2" default="0080" />
   
   <Variable name="Turbo MP R/S/M Set" specific="BATTLE_BIN:15e804,15e88c" offsetMode="RAM" bytes="1" default="90" />
   <Variable name="Turbo MP Bit" specific="BATTLE_BIN:15e80c,15e894" offsetMode="RAM" bytes="1" default="40" />
   <Variable name="Turbo MP Multiplier" specific="BATTLE_BIN:15e814,15e908" offsetMode="RAM" bytes="2" default="0200" />
   
   <Variable name="No Cost MP R/S/M Set" specific="BATTLE_BIN:15e824,15e8a4" offsetMode="RAM" bytes="1" default="90" />
   <Variable name="No Cost MP Bit" specific="BATTLE_BIN:15e82c,15e8ac" offsetMode="RAM" bytes="1" default="20" />
   
   
   <Variable name="Blood Price R/S/M Set" specific="BATTLE_BIN:15e840,15e8c0,15e94c,15e98c,15ea3c" offsetMode="RAM" bytes="1" default="90" />
   <Variable name="Blood Price Bit" specific="BATTLE_BIN:15e848,15e8c8,15e954,15e994,15ea44" offsetMode="RAM" bytes="1" default="00" />
   <Variable name="Blood Price Multiplier" specific="BATTLE_BIN:15e850,15e934" offsetMode="RAM" bytes="2" default="0100" />
   
   
   </Patch>

	<Patch name="Item Attribute Rewrite 1.1">
		<Description>A rewrite of the Item Attribute routine which also sets the 'Required' flags for Materia Blade and Swords (both adjustable with the dropdowns). Also caps Max HP/MP for units. You can also assign negative stat boost (xFF = -1, xFE = -2, etc.) but there's no code to protect against falling under 0 so keep this in mind when assigning negative values.
You can equip a secondary Item Attribute to any item with the first unknown Item Data and even R/S/M with the second unknown. The second unknown adds x100 to the value so to equip Short Charge to an Item, the value would be E2 (x1E2 being Short Charges Ability ID).

Require Sword byte requires weapons with ID X through X + Y - 1. 
      Weapon Type List:
        00 = Fist
        01 = Knife
        02 = Ninja Sword
        03 = Sword
        04 = Knight Sword
        05 = Katana
        06 = Axe
        07 = Rod
        08 = Staff
        09 = Flail
        0A = Gun
        0B = Crossbow
        0C = Bow
        0D = Instrument
        0E = Book
        0F = Spear
        10 = Stick
        11 = Bag
        12 = Cloth
      For example, the default setting for Require Swords are IDs 03 - 04 so X = x03 and Y = x02. 
	  If I want Require Ranged, then I want to accept Gun through Bow (x0A-x0C).  Thus, X = x0A, Y = x03.


This conflicts with: 

	Emmy - Unknown 1 and 2 = new item attributes (similar effects)
	Emmy - Hats give fractional HP/MP bonus or penalty
	Emmy - Only helmets grant hp/mp
	Emmy - Remove HP Cap (This ASM has this setting)
	FDC - Items can now give negative PA/MA/SP/MV/JP (v2) (This ASM has this setting)
	Glain - Require Materia Blade -> Require Item Type X (Default Lance)
	Razele - Require Sword -> Require Weapons (This ASM has this setting)
	Xifanie - Item required to use skills using the "Materia Blade" boolean (This ASM has this setting)
	Xifanie - Require: Materia Blade = Require Item X (This ASM has this setting)
	
		</Description>

		<Location file="SCUS_942_21" offset="5c5c8" mode="ASM" offsetMode="RAM">
								.label @Data_Nullifying,0x8005e644
								.label @Calculate_Actual_Stats,0x8005b880
								.label @Get_Item_Data_Pointer,0x8005a884
						
						@Attribute_Rewrite:
								addiu r29,r29,-0x0020               #
								sw r31,0x001c(r29)                  #
								sw r17,0x0018(r29)                  #
								sw r16,0x0014(r29)					#
								addu r17,r4,r0						#r17 = Unit Data Pointer 
								addu r16,r5,r0                      #r16 = Level Up Check 
								addiu r4,r17,0x0033                 #r4 = Bonus Stats 
								jal @Data_Nullifying                #Zero out bonus stats 
								ori r5,r0,0x0003                    #
								addu r4,r17,r0                      #r4 = Unit Data 
								jal @Calculate_Actual_Stats         #Calculate Actual Stats 
								addiu r5,r16,0x0001                 #r16 + 1 
								lbu r2,0x0006(r17)                  #Load Unit Gender 
								addu r10,r0,r0                      #Clear r10 (Equipment Counter) 
								addu r11,r0,r0                      #Clear r11 (Secondary Attribute Check) 
								andi r2,r2,0x0020                   #
								bne r2,r0, @AR.monster_skip         #Branch if a Monster 
								sb r0,0x0184(r17)                   #Zero out Equipped Flags 
								addu r2,r17,r10                     #Unit's Equipment Pointer 
@AR.main_loop: 					lbu r7,0x001a(r2)                   #r7 =  Equipment ID 
								ori r6,r0,0x0020                    #r6 = 20 (Materia Blade) 
								jal @Get_Item_Data_Pointer			#Result: r2 = Item Data Pointer 
								addu r4,r7,r0                       #r4 = Equipment ID 
								addu r9,r2,r0                       #r9 = Item Data Pointer 
								bne r7,r6, @AR.skip_materia_blade   #Branch if Materia Blade is not item 
								sltiu r4,r7,0x0080                  #   
								lbu r2,0x0184(r17)                  #Load Equiped Flag 
								nop                                 #
								ori r2,r2,0x0004                    #Activate "Materia Blade" 
								sb r2,0x0184(r17)                   #Store new Equiped Flag 
@AR.skip_materia_blade: 		beq r4,r0, @AR.skip_require_sword   #Branch if not a weapon 
								nop                                 #
								lbu r2,0x0005(r9)                   #Load Weapon type 
								ori r3,r0,0x0002					#r3 = Subtract from r2 
								subu r2,r2,r3                       #
								sltiu r2,r2,0x0003					#
								beq r2,r0, @AR.skip_require_sword   #Branch if item is not a sword 
								nop                                 #
								lbu r2,0x0184(r17)                  #Load Equiped Flag 
								nop                                 #
								ori r2,r2,0x0008                    #Activate "Sword" 
								sb r2,0x0184(r17)                   #Store new Equiped Flag 
@AR.skip_require_sword: 		ori r2,r0,0x00ff                    #r2 = ff 
								beq r2,r7, @AR.next_item            #Branch if nothing is equiped 
								nop                                 #
@AR.2nd_attribute_loop: 		beq r11,r0, @AR.skip_2nd_attribute  #Branch if secondary Attribute hasn't been checked
								nop                                 #
								j @AR.skip_1st_attribute            #Skip Loading Generic Attribute 
								lbu r4,0x0006(r9)                   #Load Unknown Byte 
@AR.skip_2nd_attribute: 		lbu r4,0x0007(r9)                   #Load Item Attribute ID 
@AR.skip_1st_attribute: 		ori r3,r0,0x0019                    #r3 = 25 
								multu r3,r4                         #ID * 25 
								mflo r3                             #r3 = ID * 25 
								lui r2,0x8006                       #
								addiu r2,r2,0x42c4                  #r2 = Offset to 1st Attribute Offset 
								addiu r6,r17,0x0033                 #r6 = bonus stat pointer 
								addu r16,r2,r3                      #r16 = Offset to Specific Attribute 
								addu r5,r16,r0                      #r5 = Offset to Specific Attribute 
								addiu r8,r17,0x0036                 #r8 = Offset to stat pointer 
@AR.stat_cap_loop: 				lbu r2,0x0000(r5)                   #Load Item Attribute Stat 
								lbu r3,0x0000(r6)                   #Load Bonus Stat 
								nop                                 #
								addu r3,r3,r2                       #Bonus Stat + Attribute Stat 
								sltiu r2,r3,0x0100                  #
								bne r2,r0, @AR.skip_stat_cap        #Branch if stat less then 100 
								addiu r5,r5,0x0001                  #Attribute Data pointer + 1 
								ori r3,r0,0x00ff                    #set stat to ff 
@AR.skip_stat_cap:				sb r3,0x0000(r6)                    #Store bonus stat 
								addiu r6,r6,0x0001                  #bonus stat pointer + 1 
								slt r2,r6,r8                        #
								bne r2,r0, @AR.stat_cap_loop        #Branch if all stats have not been checked 
								nop                                 #
								lb r2,0x0003(r16)                   #Load Move (attribute) 
								lbu r3,0x003a(r17)                  #Load Move (unit) 
								lb r4,0x0004(r16)                   #Load Jump (attribute) 
								lbu r5,0x003b(r17)                  #Load Jump (item) 
								addu r3,r2,r3                       #Attribute Move + Unit Move 
								sltiu r2,r3,0x00fe                  #
								bne r2,r0, @AR.skip_move_cap        #Branch if Move is greater than FE 
								addiu r6,r17,0x004e                 #r6 = Unit's Innate Status Pointer 
								ori r3,r0,0x00fd                    #Move = fd (hard cap to move) 
@AR.skip_move_cap:				sb r3,0x003a(r17)                   #Store Unit's new move 
								addu r3,r4,r5                       #Attribute Jump + Unit Jump 
								sltiu r2,r3,0x0008                  #
								bne r2,r0, @AR.skip_jump_cap        #Branch if Jump is less than 8 
								addu r5,r0,r0                       #Clear r5 (counter) 
								ori r3,r0,0x0007                    #Jump = 7 (hard cap to jump) 
@AR.skip_jump_cap: 				sb r3,0x003b(r17)                   #Store unit's new jump 
								ori r6,r0,0x000f                    #r6 = Limit 
								addiu r4,r17,0x004e                 #r4 = Unit's Status Pointer 
								jal @ARCombine                      #Store Attribute into Unit Status 
								addiu r5,r16,0x0005                 #r5 = Attribute Status Pointer 
								ori r6,r0,0x0005                    #r6 = Limit 
								addiu r4,r17,0x006d                 #r4 = Unit's Element Pointer 
								jal @ARCombine                      #Store Attribute into Unit Element 
								addiu r5,r16,0x0014                 #r5 = Attribute Element Pointer 
								beq r11,r0, @AR.2nd_attribute_loop  #Loop around to check secondary attribute 
								addiu r11,r0,0x0001                 #r11 + 1 
								addu r11,r0,r0                      #Clear r0 
								lbu r3,0x0006(r17)                  #Load Gender type 
								lbu r2,0x0003(r9)                   #Load Equip's Item Type 
								andi r3,r3,0x0004                   #
								beq r3,r0, @AR.skip_HP/MP_cap		#Branch if not ??? 
								ori r16,r0,0x03e7                   #r16 = HP/MP CAP 
								ori r16,r0,0xffff                   #r16 = Uncap HP/MP for ??? Units (65535) 
@AR.skip_HP/MP_cap: 			andi r2,r2,0x0030                   #
								beq r2,r0, @AR.next_item            #Branch if not Helm/Armor 
								nop                                 #
								lbu r4,0x0004(r9)                   #Load 2nd table ID 
								lhu r3,0x002a(r17)                  #Load Max HP 
								sll r4,r4,0x01                      #ID * 2 
								lui r1,0x8006                       #
								addu r4,r1,r4                       #
								lbu r2,0x3ed8(r4)                   #Load HP Bonus 
								nop                                 #
								addu r3,r3,r2                       #Max HP + HP Bonus 
								sltu r2,r16,r3                      #
								beq r2,r0, @AR.skip_HP_cap          #branch if HP doesn't break limit 
								nop                                 #
								addu r3,r16,r0                      #Set Max HP to cap 
@AR.skip_HP_cap:				lhu r2,0x002e(r17)                  #Load Max MP 
								sh r3,0x002a(r17)                   #Store new Max HP 
								lbu r3,0x3ed9(r4)                   #Load MP Bonus 
								nop                                 #
								addu r3,r2,r3                       #Max MP + MP Bonus 
								sltu r2,r16,r3                      #
								beq r2,r0, @AR.skip_MP_cap          #Branch if MP does not break cap 
								nop                                 #
								addu r3,r16,r0                      #Set Max MP to cap 
@AR.skip_MP_cap:				sh r3,0x002e(r17)                   #Store new Max MP 
@AR.next_item:					addiu r10,r10,0x0001                #Counter ++ 
								jal @AR.RSM_setting                 #
								addu r4,r17,r0                      #Unit Data to r4 
								slti r2,r10,0x0007                  #
								bne r2,r0, @AR.main_loop            #Branch if all items haven't been checked -
								addu r2,r17,r10                     #Prep next check 
@AR.monster_skip:				lhu r3,0x0028(r17)                  #Load Current HP 
								lhu r6,0x002a(r17)                  #Load Max HP 
								nop                                 #
								sltu r2,r6,r3                       #
								beq r2,r0, @AR.HP_Setting           #
								nop                                 #
								sh r6,0x0028(r17)                   #Store new Current HP 
@AR.HP_Setting:					lhu r3,0x002c(r17)                  #Load Current MP 
								lhu r6,0x002e(r17)                  #Load Max Mp 
								nop                                 #
								sltu r2,r6,r3                       #
								beq r2,r0 , @AR.MP_Setting          #
								addiu r5,r17,0x0030                 #
								sh r6,0x002c(r17)                   #Store new Max MP 
@AR.MP_Setting:					addiu r6,r17,0x0032                 #r6 = Unit's Data Pointer (Original SP) 
								addiu r4,r17,0x0033                 #r4 = Unit's Data Pointer (Bonus PA) 
@AR.set_stat_loop:				lb r2,0x0003(r5)                    #Load Unit's Bonus Stat 
								lbu r3,0x0000(r5)                   #Load Unit's Original Stat 
								nop                                 #
								addu r3,r2,r3                       #Original Stat += Bonus Stat 
								slt r2,r5,r6                        #
								beq r2,r0, @AR.set_speed            #Branch if New Stat is Speed 
								sltiu r2,r3,0x0064                  #
								bne r2,r0, @AR.set_pa/ma            #Branch if New Stat is less than 100 
								nop                                 #
								j @AR.set_pa/ma                     #
								ori r3,r0,0x0063                    #New Stat = 99 
@AR.set_speed:					andi r2,r3,0xffff                   #
								sltiu r2,r2,0x0033                  #
								bne r2,r0, @AR.set_pa/ma            #Branch if New Speed is less than 51 
								nop                                 #
								ori r3,r0,0x0032                    #New Speed = 50 
@AR.set_pa/ma:					sb r3,0x0006(r5)                    #Store Unit's Actual Stat = New Stat 
								addiu r5,r5,0x0001                  #Stat Pointer += 1 
								slt r2,r5,r4                        #
								bne r2,r0, @AR.set_stat_loop        #Branch if all stats haven't been set 
								nop                                 #
								lw r31,0x001c(r29)                  #
								lw r17,0x0018(r29)                  #
								lw r16,0x0014(r29)                  #
								jr r31                              #
								addiu r29,r29,0x0020                #
@AR.RSM_setting:				addiu r29,r29,-0x0018               #
								sw r31,0x0010(r29)                  #
								lbu r5,0x000b(r9)                   #Load Item Second Unknown 
								nop                                 #
								addiu r5,r5,0x0100                  #x100 + Second Unknown 
								jal 0x0005b82c                      #Store Item R/S/M 
								nop                                 #
								lw r31,0x0010(r29)                  #
								addiu r29,r29,0x0018                #
								jr r31                              #
								nop                                 #
@ARCombine:                     addu r1,r0,r0                       #Clear Counter 
@ARCombine.loop:                lbu r2,0x0000(r4)                   #Load X Value 
								lbu r3,0x0000(r5)                   #Load Y Value 
								addiu r1,r1,0x0001                  #Counter ++ 
								or r2,r2,r3                         #Combine X and Y value 
								sb r2,0x0000(r4)                    #Store new value 
								addiu r4,r4,0x0001                  #Pointer X + 1 
								slt r2,r1,r6                        #
								bne r2,r0, @ARCombine.loop          #Branch if Counter hasn't reached limit 
								addiu r5,r5,0x0001                  #Pointer Y + 1 
								jr r31                              #
								nop                                 #	
		</Location>
		
		<Variable name="Item ID required for Limit Skill (default - Materia Blade)" file="SCUS_942_21" offset="5C618" default="20" />
		<Variable name="X" file="SCUS_942_21" offset="5C64C" offsetMode="RAM" bytes="1" default="03" />
		<Variable name="Y" file="SCUS_942_21" offset="5C654" offsetMode="RAM" bytes="1" default="02" />
		<Variable name="HP/MP Cap for non-??? Unit" file="SCUS_942_21" offsetMode="RAM" offset="5C764" default="03e7" bytes="2" />
		<Variable name="HP/MP Cap for ??? Unit" file="SCUS_942_21" offsetMode="RAM" offset="5C768" default="FFFF" bytes="2" />

		<Location file="WORLD_WORLD_BIN" offset="122F9C" mode="ASM" offsetMode="RAM">
						.label @Clear_Preview_Data,0x80122e40
						@Attribute_Rewrite_Preview:
								addiu r29, r29, -0x0028	                #
								sw r16,0x0010(r29)	                    #
								sw r17,0x0014(r29)	                    #
								sw r18,0x0018(r29)	                    #
								sw r19,0x001C(r29)	                    #
								addu r16, r4, r0	                    #
								addu r18, r5, r0	                    #
								addu r17, r6, r0	                    #
								addu r19, r7, r0	                    #
								sw r31, 0x0020(r29)	                    #
								addu r4, r18, r0	                    #
								jal @Clear_Preview_Data					#Clear Data
								addu r5, r17, r0			            #
								andi r16, r16, 0x03FF					#r16 = Item ID
								addiu r2, r16, -0x0001					#
								sltiu r2, r2, 0x00FD					#
								beq r2, r0, @AR.preview_end				#Branch to end if not an Item
								nop										#
								jal @Get_Item_Data_Pointer			    #
								addu r4, r16, r0						#Move ID to r4
								addu r4, r2, r0							#Move Item Data Pointer to r4
								lui r1, 0x8006							#r1 = 0x80060000
								slti r2, r16, 0x0080			        #
								beq r2, r0, @AR.preview_not_weapon		#Branch if Item is not a Weapon
								slti r2, r16,0x0090			        	#
								lbu r3, 0x0004(r4)						#Load Second Table ID
								nop			                            #
								sll r3, r3, 0x03						#ID * 8
								addu r3, r1, r3							#80060000 + ID * 8
								lbu r2, 0x3ABD(r3)						#Load Weapon Power
								lbu r3, 0x3ABC(r3)						#Load Weapon Evade
								beq r19, r0, @AR.preview_not_sure		#
								nop			                            #
								sh r3, 0x0008(r17)						#Store Weapon Power to Display
								j @AR.preview_check_2nd					#Jump to Check Attribute
								sh r2, 0x000C(r17)						#Store Weapon Evade to Display
@AR.preview_not_sure:			sh r3, 0x0006(r17)						#Store Weapon Power to Display
								j @AR.preview_check_2nd					#Jump to Check Attribute
								sh r2, 0x000A(r17)						#Store Weapon Evade to Display
@AR.preview_not_weapon:			beq r2, r0, @AR.preview_not_shield		#Branch if Item is not a Shield
								slti r2, r16, 0x00D0			        #
								lbu r3, 0x0004(r4)						#Load Second Table ID
								nop			                            #
								sll r3, r3, 0x01						#ID * 2
								addu r3, r1, r3							#80060000 + ID * 2
								lbu r2, 0x3EB8(r3)						#Load Shield Physical Evade
								lbu r3, 0x3EB9(r3)						#Load Shield Magic Evade
								sh r2, 0x0016(r17)						#Store Physical Evade to Display
								j @AR.preview_check_2nd			        #
								sh r3, 0x0020(r17)						#Store Magical Evade to Display
@AR.preview_not_shield:			beq r2, r0, @AR.preview_not_B/H			#Branch if not Head/Bodygear
								slti r2, r16, 0x00F0			        #
								lbu r3, 0x0004(r4)						#Load Second Table ID
								nop			                            #
								sll r3, r3, 0x01						#ID * 2
								addu r3, r1, r3							#80060000 + ID * 2
								lbu r2, 0x3ED8(r3)						#Load HP Bonus
								lbu r3, 0x3ED9(r3)						#Load MP Bonus
								sh r2, 0x000E(r18)						#Store HP to Display
								j @AR.preview_check_2nd			        #
								sh r3, 0x0014(r18)						#Store MP to Display
@AR.preview_not_B/H:			beq r2, r0, @AR.preview_check_2nd		#Branch if not an accessory
								nop			                            #
								lbu r3, 0x0004(r4)						#Load Second Table ID
								nop			                            #
								sll r3, r3, 0x01						#ID * 2
								addu r3, r1, r3							#80060000 + ID * 2
								lbu r2, 0x3F58(r3)						#Load Accessory Physical Evade
								lbu r3, 0x3F59(r3)						#Load Accessory Magical Evade
								sh r2, 0x0018(r17)						#Store Physical Evade to Display
								sh r3, 0x0022(r17)						#Store Magical Evade to Display
@AR.preview_check_2nd:			lbu r2, 0x0006(r4)						#Load Secondary Attribute
								ori r3, r0, 0x0019			            #
								mult r2, r3			                    #
								mflo r2			                        #
								lbu r4, 0x0007(r4)						#Load Primary Attribute
								nop			                            #
								mult r3, r4			                    #
								mflo r3			                        #
								addu r3, r1, r3							#r3 = Primary Attribute
								addu r4, r1, r2							#r4 = Secondary Attribute
								lb r1, 0x42C7(r3)			            #
								lb r2, 0x42C7(r4)			            #
								nop			                            #
								addu r2, r2, r1			                #
								sh r2, 0x0000(r17)						#Store Move
								lb r1, 0x42C6(r3)			            #
								lb r2, 0x42C6(r4)			            #
								nop			                            #
								addu r2, r2, r1			                #
								sh r2, 0x0002(r17)						#Store Jump
								lb r1, 0x42C8(r3)			            #
								lb r2, 0x42C8(r4)			            #
								nop			                            #
								addu r2, r2, r1			                #
								sh r2, 0x0004(r17)						#Store Speed
								lb r1, 0x42C4(r3)			            #
								lb r2, 0x42C4(r4)			            #
								nop			                            #
								addu r2, r2, r1			                #
								sh r2, 0x0012(r17)						#Store PA
								lb r1, 0x42C5(r3)			            #
								lb r2, 0x42C5(r4)			            #
								nop			                            #
								addu r2, r2, r1			                #
								sh r2, 0x001C(r17)						#Store MA
@AR.preview_end:				lw r31, 0x0020(r29)			            #
								lw r19, 0x001C(r29)			            #
								lw r18, 0x0018(r29)			            #
								lw r17, 0x0014(r29)			            #
								lw r16, 0x0010(r29)			            #
								addiu r29, r29, 0x0028			        #
								jr r31	                                #
								nop	                                    #
		</Location>
	</Patch>

	<Patch name="Item Attribute Rewrite 1.1 - Special Snowflakes Conflict Resolver">
		<Description>Fixes the conflict issue with Xifanie's Special Snowflake ASM

Apply after using both of the others.</Description>

		<Location file="SCUS_942_21" offset="5c5dc" mode="ASM" offsetMode="RAM">
									.label @Data_Nullifying,0x8005e644
									j 0x80028670							#
									addu r16,r5,r0                      	#r16 = Level Up Check
									jal @Data_Nullifying                	#Zero out bonus stats
									ori r5,r0,0x0003                    	#
		</Location>

		<Location file="SCUS_942_21" offset="28680" mode="ASM" offsetMode="RAM">
									nop										#
		</Location>

		<Location file="SCUS_942_21" offset="28690" mode="ASM" offsetMode="RAM">
									addiu r4,r17,0x0033						#
		</Location>
	</Patch>	

	<Patch name="% MP gained at turn start">
		<Description>Gain XX/128% (default 5%) MP at the start of the unit's turn

This conflicts with:
	
	DW - Smart Brave/Faith (see % MP gained at turn start - Conflict Resolver)
	Emmy - Smart Brave/Faith 2.0 (see % MP gained at turn start - Conflict Resolver)
	Emmy - Equip Change = Increased damage at higher HP/increased hit rate at lower hp.
		   Kanji Space issue, can be moved.
		</Description>
			<Location file="BATTLE_BIN" offset="15E604" mode="ASM" offsetMode="RAM">
						@MP_Recovery_at_Unit_Turn_Start:
								lhu r2,0x002e(r16)				#Load Max MP
								ori r3,r0,0x0007				#Input
								mult r2,r3						#Max MP * Input
								mflo r3							#
								srl r3,r3,0x07					#Max MP * Input / 128
								sh r3,0x0196(r16)				#Store MP Recovery
								lbu r2,0x0024(r16)				#Load Brave (Prep for returning to previous routine)
								ori r3,r0,0x0010				#
								jr r31							#
								sb r3,0x01b1(r16)				#Store as MP Recovery Damage Type 
			</Location>
			
			<Location file="BATTLE_BIN" offset="183280" mode="ASM" offsetMode="RAM">
								jal @MP_Recovery_at_Unit_Turn_Start	
			</Location>
			<Variable name="XX" file="BATTLE_BIN" offset="15E608" offsetMode="RAM" bytes="1" default="07" />
	</Patch>
	
	<Patch name="% MP gained at turn start - Conflict Resolver">
		<Description>Fixes the conflict issue with % MP gained at turn start with Smart Brave/Faith Hack (DW/Emmy).

Apply after using both of the others.</Description>
			<Location file="BATTLE_BIN" offset="15E7BC" mode="ASM" offsetMode="RAM">
						.label @MP_Recovery_at_Unit_Turn_Start,0x8015E604
						.label @Smart_Brave_Faith,0x8015E39C
						@MP_Gain_Smart_BF_Fix:
								addiu r29,r29,-0x0018
								sw r31,0x0010(r29)
								jal @MP_Recovery_at_Unit_Turn_Start
								nop
								jal @Smart_Brave_Faith
								nop
								lw r31,0x0010(r29)
								addiu r29,r29,0x0018
								jr r31
								nop
			</Location>
			<Location file="BATTLE_BIN" offset="183280" mode="ASM" offsetMode="RAM">
								jal @MP_Gain_Smart_BF_Fix	
			</Location>
	</Patch>

	<Patch name="QOL: Charge gains unique status effects v2">
		<Description>Charge can have an assigned status inflict ID, overwriting the weapons status effect (IE Poison Shot inflicts Poison). This also sets a default for Charge to use Formula 05.
The status is applied like Formula 2D: 'all or nothing' inflicts status at a 100% rate and 'seperate' inflicts status at a 25% rate.
		
Use the Patcher to determine what Status ID to use under the Inflict Status tab.</Description>
			<Location file="BATTLE_BIN" offset="15E62C" mode="ASM" offsetMode="RAM">
						@Charge.Store:
								addu  r1,r1,r3					#r1 = Offset + Charge Ability ID
								lbu   r3,0x0000(r1)             #Load Status ID
								nop                             #
								beq   r3,r0,@Charge.end			#Branch if Status ID = 0
								nop                             #
								sb    r3,0x38da(r4)             #Store new Status ID
@Charge.end: 					jr    r31                       #
								ori   r16, r0, %ChargeFormulaID #Charge uses Formula 05
								nop								#Charge (+1 - +4) Status Inflict ID
								nop								#Charge (+5 - +20) Status Inflict ID
			</Location>
			
			<Location file="BATTLE_BIN" offset="18B7E4" mode="ASM" offsetMode="RAM">
							@SetChargeData:
								lhu   r3,0x0012(r29)			#Load Ability ID
								lbu   r16,0x0002(r17)           #Load Weapon Formula
								lui   r1,0x8006					#
								addiu r3,r3,-0x0196				#Ability ID - x196
								sltiu r2,r3,0x0008				#
								beq   r2,r0,@Charge.skip		#Branch if a Charge Ability
								lui   r4,0x8019					#
            					sll   r2,r3,0x01				#ID * 2
								addu  r1,r1,r2					#r1 = x80060000 + ID * 2
								lbu   r2,0x1045(r1)				#Load Charge Power
								lui   r1,0x8016					#
								addiu r1,r1,-0x19b4				#r1 = Charge Status ID Offset
								jal   @Charge.Store				#Skip loading formula
								sb    r2,0x38e4(r4)				#Store charge power
@Charge.skip:					lbu   r2,0x38ff(r4)             #Load Weapon Characteristics
								nop                             #
			</Location>

			<Location file="BATTLE_BIN" offset="185f8c" mode="ASM" offsetMode="RAM">
								lb    r3,0x38e4(r3)             #Load Charge Power
			</Location>
			
			<Location file="BATTLE_BIN" offset="188ca4" mode="ASM" offsetMode="RAM">
								jal   0x80188510                #Normal Physical Evasion for Formula 05
			</Location>
			
			<Location file="BATTLE_BIN" offset="188cd4" mode="ASM" offsetMode="RAM">
								nop                             #Remove proc chance check for Formula 05
			</Location>
			
			<Location file="BATTLE_BIN" offset="174364" mode="DATA" offsetMode="RAM" replaceLabels="true">
								@SetChargeData
			</Location>

			<Variable name="Charge +1" file="BATTLE_BIN" offset="15E64C" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +2" file="BATTLE_BIN" offset="15E64D" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +3" file="BATTLE_BIN" offset="15E64E" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +4" file="BATTLE_BIN" offset="15E64F" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +5" file="BATTLE_BIN" offset="15E650" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +7" file="BATTLE_BIN" offset="15E651" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +10" file="BATTLE_BIN" offset="15E652" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="Charge +20" file="BATTLE_BIN" offset="15E653" offsetMode="RAM" bytes="1" default="00" />
			<Variable name="ChargeFormulaID" bytes="2" default="0005" symbol="true" />	
	</Patch>

	<Patch name="QOL: Weapon Range and Others Disable Movement">
		<Description>Weapon Ranged, Linear AOE, and Draw Out AOE type with a Charge Time all disable Movement</Description>
		<Location file="BATTLE_BIN" offset="15E654" mode="ASM" offsetMode="RAM">
							@Disable_Move:
								addiu r2,r16,-0x0196                        #
								sltiu r2,r2,0x0008                          #
								bne   r2,r0,@Disable_Move.end               #Branch if it is a Charge Ability 
								nop                                         #
								sll   r2,r16,0x03                           #Ability ID * 8 
								subu  r2,r2,r16                             #Ability ID * 7 
								sll   r2,r2,0x01                            #Ability ID * 14 
								lui   r3,0x8006                             #
								addiu r3,r3,-0x0410                         #
								addu   r6,r3,r2                             #r6 = Ability Data Offset 
								lbu   r2,0x000c(r6)				            #Load Ability CT 
								lbu   r3,0x0003(r6)                         #Load Ability 1st Ability Flags 
								lhu   r4,0x0004(r6)                         #Load Ability 2nd Ability Flags 
								beq   r2,r0,@Disable_Move.end               #Branch if Ability has no CT 
								andi  r3,r3,0x0020                          #
								bne   r3,r0,@Disable_Move.activate			#Branch if disabling move 
								andi  r5,r4,0x0004                          #
								bne   r5,r0,@Disable_Move.activate          #Branch if Linear Attack is active (Disable Move) 
								andi  r5,r4,0x0400                          #
								bne   r5,r0, @Disable_Move.end              #Branch if Performing flag is active (end)
								lbu   r3,0x0000(r6)                         #Load Ability Range 
								lbu   r4,0x0001(r6)                         #Load Ability AOE 
								bne   r3,r0,@Disable_Move.end               #Branch if Ability Range > 0 
								nop                                         #
								beq   r4,r0,@Disable_Move.end               #Branch if AOE = 0 
								nop                                         #
@Disable_Move.activate:			ori   r2,r0,0x0001                          #
								addu  r23,r0,r0                             #
								sb    r2,0x0187(r19)                        #Store Movement Taken 
@Disable_Move.end:				andi  r2,r18,0x00ff                         #
								jr r31                                      #
								nop                                         #
		</Location>
		<Location file="BATTLE_BIN" offset="17c8a8" mode="ASM" offsetMode="RAM">
								jal   @Disable_Move                         #
								sb    r2,0x0188(r19)                        #
		</Location>
	</Patch>

	<Patch name="Status CT Rewrite">
		<Description>Every Status can now have a CT by setting the time in the FFTPatcher and setting the variable x01 to x0F.&#13;&#10;You are still limited to only 16 timers but they can share CTs. I.E. Poison and Regen can share a CT but will need to cancel and/or not allow them to stack on each other.&#13;&#10;If the status does not have a CT, set the variable to FF.
There's an option to increase or decrease the Status CT	timers through the unit data (ie attaching it to a support) and comes with it assigned to Train and Secret Hunt. Edit the dropdowns to change this. Or set both to 0 if you don't want this at all. Ths ASMs to disable the vanilla effect of Train and Secret Hunt are also in my XML,
		</Description>		
		<Location file="SCUS_942_21" mode="ASM" offset="2705C" offsetMode="RAM">						
						@Set_Dead_CT:
								lbu r2, 0x0005(r7)						#Load Unit Battle Flags
								lbu r3, 0x0006(r7)						#Load Unit Gender
								andi r2, r2, 0x0004						#
								bne r2, r0, @DS.dead_ct_immortal		#Branch if Unit is Immortal
								andi r2, r3, 0x0009						#
								bne r2, r0, @DS.dead_ct_immortal		#	
								nop										#
								ori r8, r0, 0x0003						#r8 = 3
@DS.dead_ct_immortal:			jr r31									#Return
								sb r8, 0x0007(r7)						#Store Dead Timer

						@Death_Sentence:
								lbu r2, 0x006C(r7)						#Load Death Sentence CT
								nop										#
								beq r2, r0, @DS.no_ds					#Branch if DS CT = 0
								addu r2, r0, r0							#Clear r2
								addiu r2, r0, -0x0001					#r2 = xFFFF if Death Sentence is being set
@DS.no_ds:						jr r31									#
								nop										#

						@Status_CT_RSM:	
								lbu r4, %CTIncreaseUnitData (r7)		#Load Unit Supports
								addu r3, r8, r0							#
								andi r4, r4, %CTIncreaseBit				#
								beq r4, r0, @CT_RSM_no_boost			#Branch if Support is not active
								nop										#
								sll r4, r3, 0x01						#
								addu r4, r4, r3							#
								srl r3, r4, 0x01						#r3 = CT * 3 / 2
@CT_RSM_no_boost:				lbu r4, %CTDecreaseUnitData (r7)		#Load Unit Supports
								nop										#
								andi r4, r4, %CTDecreaseBit				#
								beq r4, r0, @CT_RSM_no_decrease			#Branch if Support is not active
								nop										#
								srl r3, r3, 0x01						#CT / 2
@CT_RSM_no_decrease:			jr r31									#
								nop										#

		</Location>
        <Location file="SCUS_942_21" mode="DATA" label="address_status_storage_location">
            FF FF FF FF								<!-- Blank / Crystal / Dead / Undead  -->
            FF FF FF FF								<!-- Charging / Jumping / Defending / Performing -->
            FF FF FF FF								<!-- Petrifty / Invitation / Darkness / Confusion -->
            FF FF FF FF								<!-- Silence / Blood Suck / "Cursed" / Treasure -->
            FF FF FF FF								<!-- Oil / Float / Reraise / Transparent -->
            FF FF FF FF								<!-- Berserk / Chicken / Frog / Critical -->
            00 01 02 03								<!-- Poison / Regen / Protect / Shell -->
            04 05 06 07								<!-- Haste / Slow / Stop / Wall -->
            08 09 0A 0B								<!-- Faith / Innocent / Charm / Sleep -->
            0C 0D 0E 0F								<!-- Dont Move / Dont Act / Reflect / Death Sentence -->
        </Location>
		<Location file="SCUS_942_21" offset="5DB70" mode="ASM" offsetMode="RAM">
            @CT_Magic_Main:
            addiu r29, r29, -0x0018					#r4 = Unit Data Pointer; r5 = Counter; r6 = Initialize Status
            sw r31, 0x0010(r29)						#
            ori r2, r0, 0x0002						#
            bne r2, r5, @CTMMain.not_dead			#Branch if Status to check is not Dead
            addu r7, r4, r0							#r7 = Unit Data Pointer
            jal @Set_Dead_CT						#Set Dead CT
            ori r8, r0, 0x00FF						#(Immortal Dead Timer)
            @CTMMain.not_dead:				jal @Get_Status_Storage_Location		#Get Status Storage Location
            nop										#
            lui r2, 0x8006							#
            sll r3, r5, 0x04						#Counter * 16
            addu r2, r2, r3							#0x80060000 + Counter * 16
            lbu r8, 0x5DE7(r2)						#r8 = Status CT
            nop										#
            beq r8, r0, @CTMMain.end				#Branch to End if Status has no CT
            addu r2, r0, r0							#Clear r2
            beq r6, r0, @CTMMain.set_status			#Branch to next section if beginning status
            nop										#
            sb r0, 0x005D(r1)						#
            j @CTMMain.end							#Jump to End
            addu r2,r0,r0							#Clear r2
            @CTMMain.set_status:			ori r3, r0, 0x0027						#
            bne r3, r5, @CTMMain.not_ds				#Branch if Status is not Death Sentence
            addu r2,r0,r0							#Clear r2
            jal @Death_Sentence						#Death Sentence
            nop										#
            bne r2, r0, @CTMMain.end				#Branch if r2 = xffff
            nop										#
            @CTMMain.not_ds:				jal @Status_CT_RSM						#Check CT Status Supports
            nop										#
            sb r3, 0x005D(r1)						#Store Status CT
            @CTMMain.end:					lw r31, 0x0010(r29)						#
            addiu r29, r29, 0x0018					#
            jr r31									#
            nop										#

            @Get_Status_Storage_Location:
            lui r2, %hi(@address_status_storage_location)
            addu r2, r2, r5							#
            lbu r2, %lo(@address_status_storage_location) (r2)                       #r2 = Status Storage Location
            jr r31									#
            addu r1, r2, r7							#r1 = Unit Data Pointer + Storage Offset
        </Location>	

		<Location file="BATTLE_BIN" offset="15E6E0" mode="ASM" offsetMode="RAM">
						@CT_Status_Timer_Inner:
								addiu r29, r29, -0x0018					#
								sw r31, 0x0010(r29)						#
								ori r2, r0, 0x0002						#
								beq r2, r17, StatusCT.inner.end			#Branch to end if Status check is Dead
								ori r2, r0, 0x0027						#
								beq r2, r17, StatusCT.inner.end			#Branch to end if Status is Death Sentence
								nop										#
								sra r8, r17, 0x03						#Counter / 8
								addu r7, r8, r16						#Unit ID + Counter / 8
								andi r3, r17, 0x0007					#r3 = Bit to Check
								lbu r2, 0x01BB(r7)						#Status Inflict
								srav r6, r9, r3							#r6 = Bit to check
								and r2, r2, r6							#
								lbu r3, 0x004E(r7)						#Load Innate Status
								beq r2, r0, StatusCT.inner.end			#Branch to end if Status not active
								and r2, r3, r6							#
								bne r2, r0, StatusCT.inner.end			#Branch to end if Status is innate
								addu r7, r16, r0						#r7 = Unit Data Pointer
								jal @Get_Status_Storage_Location		#Get Status Storage
								addu r5, r17, r0						#r5 = Counter
								ori r3, r0, 0x00FF						#
								beq r3, r2, StatusCT.inner.end			#Branch to End if not storing Status
								nop										#
								lbu r2, 0x005D(r1)						#Load Status CT
								nop										#
								addiu r2, r2, -0x0001					#CT - 1
								sb r2, 0x005D(r1)						#Store new CT
								andi r2, r2, 0x00FF						#
								bne r2, r0, StatusCT.inner.end			#Branch if Status CT is not 0
								nop										#
								lui r3, 0x8019							#
								lw r3, 0x2D90(r3)						#
								nop										#
								addu r3, r3, r8							#
								lbu r2, 0x0020(r3)						#Load Status Removal
								nop										#
								or r2, r2, r6							#
								sb r2, 0x0020(r3)						#Store new Status Removal
StatusCT.inner.end:				lw r31, 0x0010(r29)						#
								addiu r29, r29, 0x0018					#
								jr r31									#
								nop										#
		</Location>
		
		<Location file="BATTLE_BIN" offset="18D910" mode="ASM" offsetMode="RAM">
						.label @Store_Unit_Locations,0x8018DA04
						.label @Validate_Status_Change,0x80184B24
						@CT_Status_Timer:
								addiu r29, r29, -0x0018					#
								sw r31, 0x000C(r29)						#
								sw r17, 0x0010(r29)						#
								sw r16, 0x0014(r29)						#
								sll r2, r4, 0x03						#Counter * 8
								subu r2, r2, r4							#Counter * 7
								sll r2, r2, 0x06						#Counter * 448
								lui r4, 0x8019							#
								addiu r4, r4, 0x08CC					#
								addu r4, r2, r4							#r4 = Unit Data Pointer
								jal @Store_Unit_Locations				#Store Unit Locations
								addu r16, r4, r0						#r16 = Unit Data Pointer
								addu r17, r0, r0						#Clear r17 (Counter)
Timer.loop:						jal @CT_Status_Timer_Inner				#Get Status Decrease
								ori r9, r0, 0x0080						#
								addiu r17, r17, 0x0001					#Counter ++
								sltiu r2, r17, 0x0028					#
								bne r2, r0, Timer.loop					#Loop until all status are checked
								nop										#
								jal @Validate_Status_Change				#Validate Status Change
								addu r4, r0, r0							#Clear r4
								beq r2, r0, Timer.cannot_remove_status	#Branch if Status cannot be cleared
								ori r2, r0, 0x0008						#
								lui r3, 0x8019							#
								lw r3, 0x2D90(r3)						#
								nop										#
								sb r2, 0x0025(r3)						#Store as Status Change
Timer.cannot_remove_status:		lw r31, 0x000C(r29)						#
								lw r17, 0x0010(r29)						#
								lw r16, 0x0014(r29)						#
								jr r31									#
								addiu r29, r29, 0x0018					#		
		</Location>
		<Variable name="CT Increase Unit Data" symbol="true" default="92" />
		<Variable name="CT Increase Bit" symbol="true" default="01" />
		<Variable name="CT Decrease Unit Data" symbol="true" default="92" />
		<Variable name="CT Decrease Bit" symbol="true" default="02" />
	</Patch>

	<Patch name="R/S/M: Move +1/2/3 and Jump +1/2/3 edits">
		<Description>Turns Move +1 into Move +?. Turns Move +2 into Jump +?. Turns Move + 3 into PA +?. Turns Jump +1 into MA +?. Turns Jump +2 into Speed +?. Turns Jump +3 into Class Evade +?</Description>
		
		<Location file="SCUS_942_21" offset="40BD8" mode="ASM" offsetMode="RAM" inputFile="build_now_loading_rewrite.asm" />
		<Location file="SCUS_942_21" offset="5C904" mode="ASM" offsetMode="RAM">
							.label @Movement.CE,0x80041064
							@Movement_Edits:
								lbu   r6, 0x0093(r4)	    				#Load 1st set of Movements
								lbu   r2, 0x003A(r4)						#Load unit's Movement
								andi  r3, r6,0x0080							#
								beq   r3,r0,@Movement.unit_no_move+			#Branch if unit does not have Move +1
								andi  r3,r6,0x0040							#
								addiu r2, r2,0x0001							#Move + 1
								sb    r2,0x003A(r4)							#Store new Move
@Movement.unit_no_move+:		lbu   r5,0x03B(r4)							#Load unit's Jump
								beq   r3,r0, @Movement.unit_no_jump+		#Branch if the unit doesn't have Jump +2
								andi  r3,r6,0x0020							#
								addiu r5,r5,0x0002							#Jump + 2
								sb    r5, 0x003B(r4)						#Store new Jump
@Movement.unit_no_jump+:		lbu   r2,0x0036(r4)							#Load Unit's PA
								beq   r3,r0, @Movement.unit_no_pa+			#Branch if unit does not have Attack Boost
								andi  r3,r6, 0x0010							#
								addiu r2, r2, 0x0002						#PA + 2
								sb    r2,0x0036(r4)							#Store new PA
@Movement.unit_no_pa+:			lbu   r5,0x0037(r4)							#Load Unit's MA
								beq   r3,r0, @Movement.unit_no_ma+			#Branch if the unit doesn't have Magic Boost
								andi  r3,r6, 0x0008							#
								addiu r5, r5, 0x0002						#MA + 2
								sb    r5,0x0037(r4)							#Store new MA
@Movement.unit_no_ma+:			lbu   r2,0x0038(r4)							#Load Speed
								beq   r3,r0,@Movement.unit_no_speed+		#
								nop											#
								addiu r2, r2, 0x0001						#Speed + 1
								sb    r2,0x0038(r4)							#Store new Speed
@Movement.unit_no_speed+:		j     @Movement.CE							#
								andi  r3,r6, 0x0004							#Prep Jump +3 check
								jr    r31									#					
								nop											#							
		</Location>
		<Location file="SCUS_942_21" offset="41064" mode="ASM" offsetMode="RAM">
							@Movement.CE:
								lbu   r2, 0x0043(r4)						#Load Class Evade
								beq   r3, r0, Movement.CE.end				#Branch if not equipped
								nop											#
								addiu r2, r2, 0x0014						#EV + 20
								sb    r2, 0x0043(r4)						#Store new CE
Movement.CE.end:				jr    r31									#
								nop	
		</Location>

		<Location file="WORLD_WORLD_BIN" offset="13E3C8" mode="ASM" offsetMode="RAM">
						@Movement.Preview_Difference:
								lhu r2, 0x0078(r29)                 		#
								lhu r3, 0x0038(r29)                 		#
								nop                                 		#
								subu r2, r2, r3                     		#
								sh r2, 0x0000(r18)                  		#
								lhu r2, 0x007C(r29)                 		#
								lhu r3, 0x003C(r29)                 		#
								nop                                 		#
								subu r2, r2, r3                     		#
								sh r2, 0x0004(r18)                  		#
								lhu r2, 0x008A(r29)                 		#
								lhu r3, 0x004A(r29)                 		#
								nop                                 		#
								subu r2, r2, r3                     		#
								sh r2, 0x0012(r18)                  		#
								lhu r2, 0x0094(r29)                 		#
								lhu r3, 0x0054(r29)                 		#
								nop                                 		#
								subu r2, r2, r3                     		#
								sh r2, 0x001C(r18)                  		#
								lhu r2, 0x007A(r29)                 		#
								lhu r3, 0x003A(r29)                 		#
								nop                                 		#
								subu r2, r2, r3                     		#
								sh r2, 0x0002(r18)                  		#
								lhu r2, 0x008C(r29)                 		#
								lhu r3, 0x004C(r29)                 		#
								nop                                 		#
								subu r2, r2, r3								#
								sh r2, 0x0014(r18)							#
								jr r31										#
								nop											#

						@Movement.Preview_Ability_Increase:
								ori r2, r0, 0x01E6							#Movement Ability ID (Move + 1)
								bne r2, r16, @Preview.no_move+      		#Branch if not Move +1
								ori r2, r0, 0x0000                  		#
								ori r2, r0, 0x0001                  		#
@Preview.no_move+:				sh r2, 0x0000(r17)                  		#
								ori r2, r0, 0x01E7                  		#Movement Ability ID (Move + 2)
								bne r2, r16, @Preview.no_jump+      		#Branch if not Move +2
								ori r2, r0, 0x0000                  		#
								ori r2, r0, 0x0002                  		#
@Preview.no_jump+:				sh r2, 0x0004(r17)                  		#
								ori r2, r0, 0x01E8                  		#Movement Ability ID (Move + 3)
								bne r2, r16, @Preview.no_pa+        		#Branch if not Move +3
								ori r2, r0, 0x0000                  		#
								ori r2, r0, 0x0002                  		#
@Preview.no_pa+:				sh r2, 0x0012(r17)                  		#
								ori r2, r0, 0x01E9                  		#Movement Ability ID (Jump + 1)
								bne r2, r16, @Preview.no_ma+        		#Branch if not Jump +1
								ori r2, r0, 0x0000                  		#
								ori r2, r0, 0x0002                  		#
@Preview.no_ma+:				sh r2, 0x001C(r17)                  		#
								ori r2, r0, 0x01EA                  		#Movement Ability ID (Jump + 2)
								bne r2, r16, @Preview.no_speed+     		#Branch if not Jump +1
								ori r2, r0, 0x0000                  		#
								ori r2, r0, 0x0001                  		#
@Preview.no_speed+:				sh r2, 0x0002(r17)                  		#
								ori r2, r0, 0x01EB                  		#Movement Ability ID (Jump + 3)
								bne r2, r16, @Preview.no_ce+        		#Branch if not Jump +3
								ori r2, r0, 0x0000                  		#
								ori r2, r0, 0x0014                  		#
@Preview.no_ce+:				sh r2, 0x0014(r17)                  		#
								jr r31                              		#
								nop                                 		#								
		</Location>
		
		<Location file="WORLD_WORLD_BIN" offset="122F58" mode="ASM" offsetMode="RAM">
								jal @Movement.Preview_Difference			#
								nop											#
								j 0x80122F80								#
								nop											#
		</Location>
		<Location file="WORLD_WORLD_BIN" offset="122EAC" mode="ASM" offsetMode="RAM">
								jal @Movement.Preview_Ability_Increase		#
								nop											#
								j 0x80122EF0								#
								nop											#
		</Location>

		<Variable name="Move +" specific="SCUS_942_21:5C918,WORLD_WORLD_BIN:13E454" offsetMode="RAM" bytes="1" default="01" />
		<Variable name="Jump +" specific="SCUS_942_21:5C92C,WORLD_WORLD_BIN:13E468" offsetMode="RAM" bytes="1" default="02" />
		<Variable name="PA +" specific="SCUS_942_21:5C940,WORLD_WORLD_BIN:13E47C" offsetMode="RAM" bytes="1" default="02" />
		<Variable name="MA +" specific="SCUS_942_21:5C954,WORLD_WORLD_BIN:13E490" offsetMode="RAM" bytes="1" default="02" />
		<Variable name="Speed +" specific="SCUS_942_21:5C968,WORLD_WORLD_BIN:13E4A4" offsetMode="RAM" bytes="1" default="01" />
		<Variable name="Class Evasion +" specific="SCUS_942_21:41070,WORLD_WORLD_BIN:13E4B8" offsetMode="RAM" bytes="1" default="14" />

        <Variable name="Now Loading Red Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
        <Variable name="Now Loading Green Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
        <Variable name="Now Loading Blue Value" file="SCUS_942_21" symbol="true" bytes="1" default="80" />
	</Patch>

	<Patch name="Transparent not lost on action or taking damage">
		<Description>Transparent status is no longer removed after taking an action or taking damage.&#13;&#10;This is intended to be used with CT Magic. Unless you want permanent Transparent.</Description>
		<Location file="BATTLE_BIN" offset="126894" mode="ASM" offsetMode="RAM">
								j 0x8018D8EC								#Unconditional jump
		</Location>
		<Location file="BATTLE_BIN" offset="18C440" mode="ASM" offsetMode="RAM">
								nop											#
		</Location>
		<Location file="BATTLE_BIN" offset="18AC8C" mode="ASM" offsetMode="RAM">
								j 0x8018ACD4								#Unconditional jump
		</Location>
	</Patch>

	<Patch name="Defend not removed on act">
		<Description>Defend status is no longer removed after taking an action.&#13;&#10;This is intended to be used with CT Magic. Unless you want permanent Defending.</Description>
		<Location file="BATTLE_BIN" offset="18326C" mode="ASM" offsetMode="RAM">
								j 0x80183280								#Unconditional jump
		</Location>
	</Patch>

	<Patch name="R/S/M: Inflict Status (ID) to Weapon Attacks">
		<Description>Inflict Status: ID to weapon attacks (except Fists) that do not have a proc already.&#13;&#10;Check your FFTPatcher to make sure you are adding (or cancelling) the status you want to be. Defaulted to 09 (Poison).&#13;&#10;This is defaulted over Monster Talk. Edit unit data to choose which data is checked. See http://ffhacktics.com/wiki/Data/Table_Locations for more information. The ASM to disable Monster Talk is also found in my XML.</Description>
		<Location file="BATTLE_BIN" offset="15E788" mode="ASM" offsetMode="RAM">
						@Inflict_Status_RSM:
								lui r1,0x8019								#r1 - r3 free
								lw r2,0x2d94(r1)							#Load Attacker's Data
								bne r4,r0,@Inflict_Status_RSM.end			#Branch if the weapon already has a proc
								nop											#	
								lbu r3,0x0004(r17)							#Load Weapon Power
								lbu r2,0x0094(r2)							#Load Support set
								beq r3,r0,@Inflict_Status_RSM.end			#Branch if Weapon Power = 0 (No Fists)
								andi r2,r2,0x0020							#
								beq r2,r0,@Inflict_Status_RSM.end			#Branch if support set not active
								nop											#
								ori r4,r0,0x0009							#	
@Inflict_Status_RSM.end:		jr r31										#
								sb r4,0x38da(r1)							#Store Proc ID
		</Location>
		
		<Variable name="Unit Data" file="BATTLE_BIN" offset="15E79C" offsetMode="RAM" bytes="1" default="91" />
		<Variable name="Bit" file="BATTLE_BIN" offset="15E7A4" offsetMode="RAM" bytes="1" default="10" />
		<Variable name="Status ID" file="BATTLE_BIN" offset="15E7B0" offsetMode="RAM" bytes="1" default="09" />
		
		<Location file="BATTLE_BIN" offset="18B560"  mode="ASM" offsetMode="RAM">
								jal @Inflict_Status_RSM
								nop
		</Location>
		
		
	</Patch>
	
	<Patch name="Required Level for World Map Condition">
		<Location file="WORLD_WORLD_BIN" offset="123164" offsetMode="RAM" mode="ASM">
						.label @Calculate_Highest_Party_Level,0x8005CBD0
						@World_Map_Level_Conditional:
								addiu r29, r29, -0x0018				#
								sw r31, 0x0010(r29)					#
								sw r16, 0x0014(r29)					#
								jal @Calculate_Highest_Party_Level	#Get highest level from the party
								addu r16, r0, r0					#Clear r16
								addu r16, r2, r0					#Move highest level to r16
								lui r5, 0x800D	                	#	
								addiu r5, r5, 0x4650				#r5 = 0x800d4650
								lhu r3, 0x0000(r5)					#script counter
								addiu r4, r5, -0x0004				#r4 = 0x800d464c
								lw r4, 0x0000(r4)					#load offset to script string
								sll r2, r3, 0x01					#counter * 2
								addu r2, r2, r4						#r2 = next location in script
								lhu r2, 0x0000(r2)					#load required level
								addiu r3, r3, 0x0001				#script location ++
								sh r3, 0x0000(r5)					#Store increase in script read
								slt r2, r16, r2						#
								beq r2, r0, @lvl.end				#Branch if highest level is not at least equal the requirement
								nop									#
								lui r3, 0x800D						#
								addiu r3, r3, 0x4644				#
								lw r2, 0x0000(r3)					#
								nop									#
								ori r2, r2, 0x0002					#
								sw r2, 0x0000(r3)					#Skip rest of code
@lvl.end:						lw r16, 0x0014(r29)					#
								lw r31, 0x0010(r29)					#
								addiu r29, r29, 0x0018				#
								jr r31								#
								nop									#
		</Location>
		<Location file="WORLD_WLDCORE_BIN" offset="9EEA8" offsetMode="RAM" mode="DATA" replaceLabels="true">
								@World_Map_Level_Conditional
		</Location>
		
	</Patch>

    <Patch name="Call Function x0C">
     <Description>Call Function x0C uses variable x01 to determine what song to play.</Description>
     <Location file="BATTLE_BIN" offset="144028"  mode="ASM" offsetMode="RAM">
				lw r2,0x80057720			#Load Variable x01
				lui r1,0x8016				#
				andi r2,r2,0x00FF			#Remove any potential extra
				addu r4,r2,r0				#move to r4 too
				sh r0,0x5fd8(r1)			#
				sh r2,0x5fd4(r1)			#
				sh r0,0x5fd6(r1)			#
     </Location>
    </Patch>
	 
	<Patch name="R/S/M: Disable Secret Hunt">
		<Description>Removes the vanilla function of Secret Hunt; poaching monsters.</Description>
		<Location file="BATTLE_BIN" offset="187D8C" mode="ASM" offsetMode="RAM">
								j 0x80187DF4								#Unconditional jump
		</Location>
	</Patch>
	
	<Patch name="R/S/M: Disable Train">
		<Description>Removes the vanilla function of Train; inviting monsters.</Description>
		<Location file="BATTLE_BIN" offset="187e44" mode="ASM" offsetMode="RAM">
								j 0x80187ea4								#Unconditional jump
		</Location>
	</Patch>
	
	<Patch name="R/S/M: Disable Monster Talk">
		<Description>Removes the vanilla function of Monster Talk; Monsters are always affected by Talk Skill. (Formula 2A)</Description>
		<Location file="BATTLE_BIN" offset="1899ec" mode="ASM" offsetMode="RAM">
								j 0x801899fc 								#Unconditional jump
		</Location>
	</Patch>
	
	<Patch name="R/S/M: Disable Gained JP Up">
	  <Description>Disable the vanilla effect of Gained JP Up.</Description>
	
	  <Location file="BATTLE_BIN" offset="17e9a4" mode="ASM" offsetMode="RAM">
								j    0x8017e9c0
	  </Location>
	
      <Location file="BATTLE_BIN" offset="18dec0" mode="ASM" offsetMode="RAM">
								j    0x8018dee4
	  </Location>
	
	</Patch>
	
	<Patch name="R/S/M: Disable Gained EXP Up">
      <Description>Disable the vanilla effect of Gained EXP Up.</Description>
	
	  <Location file="BATTLE_BIN" offset="18d6bc" mode="ASM" offsetMode="RAM">
								j    0x8018d6c8 								#Unconditional jump
      </Location>
	
      <Location file="BATTLE_BIN" offset="18de58" mode="ASM" offsetMode="RAM">
								j    0x0018dee4 								#Unconditional jump
      </Location>
	</Patch>

	<Patch name="Special Monster Job Fix">
	<Description>'Special' Monsters Jobs (x3C - x49) can change jobs and use items.</Description>
	<Location file="WORLD_WORLD_BIN" offset="120ba0" offsetMode="RAM" mode="ASM">
								li    r2,  0
	</Location>
	</Patch>

	<Patch name="Ramza can change into jobs x01 to x04">
	<Description>Ramza can change into jobs x01 to x04</Description>  
		<Location file="SCUS_942_21" offset="5aa24, 5ab64, 5ab94, 5ac90, 5acdc, 5b0f0"  mode="ASM" offsetMode="RAM">
								sltiu r2, r2, 0x0005
		</Location>
		<Location file="SCUS_942_21" offset="5acf0"  mode="ASM" offsetMode="RAM">
								sltiu r2, r2, 0x0004
		</Location>		
	</Patch>

	<Patch name="Deep Dungeon Maps Have Normal Light">
	<Description>All your Deep Dungeon maps will start fully lit, and stay that way. Unless you ChangeMap() to them with event commands, anyway.
-Nyzer</Description>
		<Location file="MAP_MAP105_GNS" offset="44, 58, 6C, 80" mode="DATA">
								FD
		</Location>
		<Location file="MAP_MAP105_GNS" offset="49" mode="DATA">
								18
		</Location>
		<Location file="MAP_MAP106_GNS" offset="30, 44, 58, 6C" mode="DATA">
								5A
		</Location>
		<Location file="MAP_MAP107_GNS" offset="30, 44, 58, 6C" mode="DATA">
								B9
		</Location>
		<Location file="MAP_MAP108_GNS" offset="30, 44, 58, 6C" mode="DATA">
								19
		</Location>
		<Location file="MAP_MAP109_GNS" offset="30, 44, 58, 6C" mode="DATA">
								7A
		</Location>		
		<Location file="MAP_MAP110_GNS" offset="30, 44, 58, 6C" mode="DATA">
								D9
		</Location>
		<Location file="MAP_MAP111_GNS" offset="30, 44, 58, 6C" mode="DATA">
								36
		</Location>
		<Location file="MAP_MAP112_GNS" offset="30, 44, 58, 6C" mode="DATA">
								95
		</Location>
		<Location file="MAP_MAP113_GNS" offset="30, 44, 58, 6C" mode="DATA">
								F3
		</Location>
		<Location file="MAP_MAP114_GNS" offset="30, 44, 58, 6C" mode="DATA">
								54
		</Location>		
	</Patch>

	<Patch name="Blue Team is Immortal">
	<Description>Player team is "Immortal".</Description>  
		<Location file="SCUS_942_21" offset="5b0f8"  mode="ASM" offsetMode="RAM">
								li    r3,  0x0c
								li    r3,  0x0f
		</Location>
	</Patch>
	
	<Patch name="Remove Spill Over JP">
		<Description>No units will gain spill over jp</Description>
		
			<Location file="BATTLE_BIN" offset="17E980" mode="ASM" offsetMode="RAM" >
								nop
			</Location>
	</Patch>

  	<Patch name="Spillover JP = Regular">
    	<Description>Units gain FULL(?!) JP spillover</Description>
    		<Location file="BATTLE_BIN" offset="17E978" mode="ASM" offsetMode="RAM" >
								nop
    		</Location>
  	</Patch>

	<Patch name="0 Gil earned from Level Bonus">
		<Description>Gain no extra gold based on level.</Description>
		<Location file="BATTLE_BIN" offset="180EFC" mode="ASM" offsetMode="RAM" >
								sw r0,0x001c(r4)
		</Location>
	</Patch>

	<Patch name="Ability Animation 07 00 00 will always swing item">
		<Description>Removes the Ability Flag 'Weapon Strike' from being required to swing a weapon during animation 07 00 00.&#13;&#10;Should be no more unwanted punching while using an attack unless unequipped.</Description>
		<Location file="BATTLE_BIN" offset="18B760" mode="ASM" offsetMode="RAM">
								nop
		</Location>
	</Patch>	

	<Patch name="Random enemies can appear with PA Save, MA Save, and Speed Save">
		<Description>Removes an (intended?) bug that removed PA Save, MA Save, and Speed Save from being randomly selected on enemies. Vanilla is set to x1A9 for Sunken State.</Description>
			<Variable name="Reaction ID" file="SCUS_942_21" offset="5D278" offsetMode="RAM" bytes="2" default="01A6" />
	</Patch>

    <Patch name="AI CT Charge Supports">
	<Description>Fixes minor bug where the AI didn't correctly know Short Charge and No Charge saved them CT</Description>
		<Location file="BATTLE_BIN" offset="195d14" mode="ASM" offsetMode="RAM">
								andi  r2,r3,0x0008
		</Location>

		<Location file="BATTLE_BIN" offset="195d1c" mode="ASM" offsetMode="RAM">
			                    andi  r2,r3,0x0004
		</Location>
	</Patch>

</Patches>